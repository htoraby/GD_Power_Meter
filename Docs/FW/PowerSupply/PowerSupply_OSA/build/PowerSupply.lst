

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Fri Dec 05 13:27:04 2014

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	text768,local,class=CODE,delta=2
    16                           	psect	text773,local,class=CODE,delta=2
    17                           	psect	text786,local,class=CODE,delta=2
    18                           	psect	text796,local,class=CODE,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text803,local,class=CODE,delta=2
    21                           	psect	functab,global,reloc=256,class=CODE,delta=2
    22                           	psect	pa_nodes,global,class=CODE,delta=2
    23                           	dabs	1,0x220,48
    24                           	dabs	1,0x1BE,50
    25                           	dabs	1,0x7E,2
    26  000A                     	;#
    27                           
    28                           	psect	config
    29  8007  D9BC               	dw	55740	;_ADE7758Data
    30                           
    31                           	psect	idataBANK0
    32  0000                     __pidataBANK0:	
    33                           
    34                           	psect	strings
    35  00B4                     __pstrings:	
    36  00B4                     __stringtab:	
    37  00B4  3400               	retlw	0
    38  00B5                     _gucPowerVer:	
    39  00B5  3433               	retlw	51
    40  00B6  342E               	retlw	46
    41  00B7  3430               	retlw	48
    42  00B8  3433               	retlw	51
    43  0005                     _FSR0H	set	5
    44  0004                     _FSR0L	set	4
    45  0000                     _INDF0	set	0
    46  000A                     _PCLATH	set	10
    47  000C                     _PORTA	set	12
    48  0015                     _TMR0	set	21
    49  005F                     _GIE	set	95
    50  005E                     _PEIE	set	94
    51  0067                     _RA7	set	103
    52  0068                     _RB0	set	104
    53  006B                     _RB3	set	107
    54  008D                     _RCIF	set	141
    55  008B                     _SSP1IF	set	139
    56  005D                     _TMR0IE	set	93
    57  005A                     _TMR0IF	set	90
    58  008C                     _TXIF	set	140
    59  009E                     _ADCON1	set	158
    60  0095                     _OPTION_REG	set	149
    61  0099                     _OSCCON	set	153
    62  0097                     _WDTCONbits	set	151
    63  04D4                     _HFIOFR	set	1236
    64  048D                     _RCIE	set	1165
    65  0460                     _TRISA0	set	1120
    66  0461                     _TRISA1	set	1121
    67  0462                     _TRISA2	set	1122
    68  0463                     _TRISA3	set	1123
    69  0464                     _TRISA4	set	1124
    70  0466                     _TRISA6	set	1126
    71  0467                     _TRISA7	set	1127
    72  0468                     _TRISB0	set	1128
    73  0469                     _TRISB1	set	1129
    74  046A                     _TRISB2	set	1130
    75  046B                     _TRISB3	set	1131
    76  046C                     _TRISB4	set	1132
    77  046D                     _TRISB5	set	1133
    78  046E                     _TRISB6	set	1134
    79  046F                     _TRISB7	set	1135
    80  048C                     _TXIE	set	1164
    81  08EF                     _RXDTSEL	set	2287
    82  08EE                     _SDO1SEL	set	2286
    83  08F0                     _TXCKSEL	set	2288
    84  018C                     _ANSELA	set	396
    85  018D                     _ANSELB	set	397
    86  0199                     _RCREG	set	409
    87  019C                     _SPBRGH	set	412
    88  019B                     _SPBRGL	set	411
    89  019A                     _TXREG	set	410
    90  0CFB                     _BRG16	set	3323
    91  0CF2                     _BRGH	set	3314
    92  0CEC                     _CREN	set	3308
    93  0CEA                     _FERR	set	3306
    94  0CE9                     _OERR	set	3305
    95  0CEE                     _RX9	set	3310
    96  0CFC                     _SCKP	set	3324
    97  0CEF                     _SPEN	set	3311
    98  0CF4                     _SYNC	set	3316
    99  0CF1                     _TRMT	set	3313
   100  0CF6                     _TX9	set	3318
   101  0CF5                     _TXEN	set	3317
   102  0212                     _SSP1ADD	set	530
   103  0215                     _SSP1CON1bits	set	533
   104  021D                     _SSP2CON1bits	set	541
   105  021C                     _SSP2STATbits	set	540
   106  0211                     _SSPBUF	set	529
   107  020D                     _WPUB	set	525
   108  0FED                     _STKPTR	set	4077
   109                           
   110                           	psect	bitbssCOMMON
   111  03D8                     __pbitbssCOMMON:	
   112  03D8                     _AbnorProcFlag:	
   113  03D8                     	ds	1
   114  03D9                     _Sample_flag:	
   115  03D9                     	ds	1
   116                           
   117                           	psect	bssCOMMON
   118  0078                     __pbssCOMMON:	
   119  0078                     _gs50msCnt:	
   120  0078                     	ds	2
   121  007A                     __OS_TempH:	
   122  007A                     	ds	1
   123                           
   124                           	psect	bssBANK0
   125  0054                     __pbssBANK0:	
   126  0054                     _ReadData:	
   127  0054                     	ds	3
   128  0057                     _SendData:	
   129  0057                     	ds	3
   130  005A                     _FreqPhase:	
   131  005A                     	ds	2
   132  005C                     __OS_CurTask:	
   133  005C                     	ds	1
   134  005D                     __OS_Flags:	
   135  005D                     	ds	1
   136  005E                     __OS_Temp:	
   137  005E                     	ds	1
   138  005F                     _gucDevAddr:	
   139  005F                     	ds	1
   140  0060                     __OS_Tasks:	
   141  0060                     	ds	12
   142                           
   143                           	psect	dataBANK0
   144  006C                     __pdataBANK0:	
   145  006C                     _fun_array:	
   146  006C                     	ds	3
   147                           
   148                           	psect	bssBANK1
   149  00A0                     __pbssBANK1:	
   150  00A0                     _gstSLIPSend:	
   151  00A0                     	ds	43
   152  00CB                     _gstSLIPRecv:	
   153  00CB                     	ds	22
   154                           
   155                           	psect	clrtext
   156  02E0                     clear_ram:	
   157                           ;	Called with FSR0 containing the base address, and
   158                           ;	btemp/btemp+1 has the size to clear
   159                           
   160  02E0  0064               	clrwdt	;clear the watchdog before getting into this loop
   161  02E1                     clrloop:	
   162  02E1  0180               	clrf	0	;clear RAM location pointed to by FSR
   163  02E2  3101               	addfsr 0,1
   164  02E3  3001               	movlw	1
   165  02E4  02FE               	subwf	126,f
   166  02E5  3000               	movlw	0
   167  02E6  3BFF               	subwfb	127,f
   168  02E7  087F               	movf	127,w
   169  02E8  047E               	iorwf	126,w
   170  02E9  1903               	btfsc	3,2
   171  02EA  3400               	retlw	0	;all done for this memory range, return
   172  02EB  2AE1               	goto	clrloop	;have we reached the end yet?
   173                           
   174                           	psect	cstackCOMMON
   175  0070                     __pcstackCOMMON:	
   176  0070                     ?__OS_EnterWaitMode:	
   177  0070                     ?__OS_CheckEvent:	
   178                           ; 0 bytes @ 0x0
   179                           
   180  0070                     ?_slip_main:	
   181                           ; 0 bytes @ 0x0
   182                           
   183  0070                     ?_OS_Init:	
   184                           ; 0 bytes @ 0x0
   185                           
   186  0070                     ?__OS_JumpToTask:	
   187                           ; 0 bytes @ 0x0
   188                           
   189  0070                     ?__OS_ClrReadySetClrCanContinue:	
   190                           ; 0 bytes @ 0x0
   191                           
   192  0070                     ?_AD7758_init:	
   193                           ; 0 bytes @ 0x0
   194                           
   195  0070                     ?_Sample_ADE7758:	
   196                           ; 0 bytes @ 0x0
   197                           
   198  0070                     ?_Initialize:	
   199                           ; 0 bytes @ 0x0
   200                           
   201  0070                     ?_SPI_Init:	
   202                           ; 0 bytes @ 0x0
   203                           
   204  0070                     ?_isr:	
   205                           ; 0 bytes @ 0x0
   206                           
   207  0070                     ?_thread_Sample:	
   208                           ; 0 bytes @ 0x0
   209                           
   210  0070                     ?_sample_check:	
   211                           ; 0 bytes @ 0x0
   212                           
   213  0070                     ?_thread_slip:	
   214                           ; 0 bytes @ 0x0
   215                           
   216  0070                     ?_thread_abnormal:	
   217                           ; 0 bytes @ 0x0
   218                           
   219  0070                     ?_rs485_send_data:	
   220                           ; 0 bytes @ 0x0
   221                           
   222  0070                     ?_sendACK:	
   223                           ; 0 bytes @ 0x0
   224                           
   225  0070                     ?_sendNACK:	
   226                           ; 0 bytes @ 0x0
   227                           
   228  0070                     ?_sendDEV:	
   229                           ; 0 bytes @ 0x0
   230                           
   231  0070                     ?_sendTemper:	
   232                           ; 0 bytes @ 0x0
   233                           
   234  0070                     ?_sendVER:	
   235                           ; 0 bytes @ 0x0
   236                           
   237  0070                     ?_run_cmd:	
   238                           ; 0 bytes @ 0x0
   239                           
   240  0070                     ?__OS_ReturnSave:	
   241                           ; 0 bytes @ 0x0
   242                           
   243  0070                     ?__OS_EnterWaitModeTO:	
   244                           ; 0 bytes @ 0x0
   245                           
   246  0070                     ?_spiSendByte:	
   247                           ; 0 bytes @ 0x0
   248                           
   249  0070                     ?_get_address:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_AD7758_check_init:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_processing_slipcmd:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_main:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?___lwmod:	
   262                           ; 2 bytes @ 0x0
   263                           
   264  0070                     ___lwmod@divisor:	
   265                           ; 2 bytes @ 0x0
   266                           
   267                           
   268                           ; 2 bytes @ 0x0
   269  0070                     	ds	2
   270  0072                     ___lwmod@dividend:	
   271                           
   272                           ; 2 bytes @ 0x2
   273  0072                     	ds	2
   274  0074                     ??___lwmod:	
   275  0074                     ___lwmod@counter:	
   276                           ; 0 bytes @ 0x4
   277                           
   278                           
   279                           ; 1 bytes @ 0x4
   280  0074                     	ds	1
   281  0075                     ??_isr:	
   282                           
   283                           ; 0 bytes @ 0x5
   284  0075                     	ds	2
   285  0077                     isr@data:	
   286                           
   287                           ; 1 bytes @ 0x7
   288  0077                     	ds	1
   289                           
   290                           	psect	cstackBANK0
   291  0020                     __pcstackBANK0:	
   292  0020                     ?_Delay:	
   293  0020                     ??_spiSendByte:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0020                     ??__OS_EnterWaitMode:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0020                     ??__OS_CheckEvent:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0020                     ??_get_address:	
   303                           ; 0 bytes @ 0x0
   304                           
   305  0020                     ?__OS_Task_Create:	
   306                           ; 0 bytes @ 0x0
   307                           
   308  0020                     ??__OS_JumpToTask:	
   309                           ; 0 bytes @ 0x0
   310                           
   311  0020                     ??__OS_ClrReadySetClrCanContinue:	
   312                           ; 0 bytes @ 0x0
   313                           
   314  0020                     ?_vmemset:	
   315                           ; 0 bytes @ 0x0
   316                           
   317  0020                     ??_SPI_Init:	
   318                           ; 0 bytes @ 0x0
   319                           
   320  0020                     ??__OS_ReturnSave:	
   321                           ; 0 bytes @ 0x0
   322                           
   323  0020                     ??__OS_EnterWaitModeTO:	
   324                           ; 0 bytes @ 0x0
   325                           
   326  0020                     ?_calculateCRC8:	
   327                           ; 0 bytes @ 0x0
   328                           
   329  0020                     ?___bmul:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0020                     spiSendByte@spi_data:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0020                     calculateCRC8@dataLen:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0020                     __OS_CheckEvent@bEvent:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0020                     ___bmul@multiplicand:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0020                     vmemset@p1:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0020                     __OS_Task_Create@TaskAddr:	
   348                           ; 2 bytes @ 0x0
   349                           
   350  0020                     Delay@delay_count_max:	
   351                           ; 2 bytes @ 0x0
   352                           
   353                           
   354                           ; 4 bytes @ 0x0
   355  0020                     	ds	1
   356  0021                     ??_OS_Init:	
   357  0021                     ??_calculateCRC8:	
   358                           ; 0 bytes @ 0x1
   359                           
   360  0021                     ??___bmul:	
   361                           ; 0 bytes @ 0x1
   362                           
   363  0021                     calculateCRC8@inData:	
   364                           ; 0 bytes @ 0x1
   365                           
   366  0021                     ___bmul@product:	
   367                           ; 1 bytes @ 0x1
   368                           
   369  0021                     spiSendByte@cc:	
   370                           ; 1 bytes @ 0x1
   371                           
   372                           
   373                           ; 4 bytes @ 0x1
   374  0021                     	ds	1
   375  0022                     ??__OS_Task_Create:	
   376  0022                     calculateCRC8@j:	
   377                           ; 0 bytes @ 0x2
   378                           
   379  0022                     __OS_Task_Create@priority:	
   380                           ; 1 bytes @ 0x2
   381                           
   382  0022                     ___bmul@multiplier:	
   383                           ; 1 bytes @ 0x2
   384                           
   385  0022                     vmemset@c:	
   386                           ; 1 bytes @ 0x2
   387                           
   388                           
   389                           ; 2 bytes @ 0x2
   390  0022                     	ds	1
   391  0023                     calculateCRC8@i:	
   392  0023                     __OS_Task_Create@Task:	
   393                           ; 1 bytes @ 0x3
   394                           
   395                           
   396                           ; 1 bytes @ 0x3
   397  0023                     	ds	1
   398  0024                     ??_Delay:	
   399  0024                     calculateCRC8@crc:	
   400                           ; 0 bytes @ 0x4
   401                           
   402  0024                     vmemset@n:	
   403                           ; 1 bytes @ 0x4
   404                           
   405  0024                     Delay@delay_count:	
   406                           ; 2 bytes @ 0x4
   407                           
   408                           
   409                           ; 4 bytes @ 0x4
   410  0024                     	ds	1
   411  0025                     ??_processing_slipcmd:	
   412  0025                     spiSendByte@spi_tmp:	
   413                           ; 0 bytes @ 0x5
   414                           
   415                           
   416                           ; 1 bytes @ 0x5
   417  0025                     	ds	1
   418  0026                     ?_AD7758_GetData:	
   419  0026                     ?_AD7758_SendData:	
   420                           ; 0 bytes @ 0x6
   421                           
   422  0026                     ??_vmemset:	
   423                           ; 0 bytes @ 0x6
   424                           
   425  0026                     AD7758_GetData@num:	
   426                           ; 0 bytes @ 0x6
   427                           
   428  0026                     AD7758_SendData@num:	
   429                           ; 1 bytes @ 0x6
   430                           
   431                           
   432                           ; 1 bytes @ 0x6
   433  0026                     	ds	1
   434  0027                     AD7758_GetData@chip:	
   435  0027                     AD7758_SendData@chip:	
   436                           ; 1 bytes @ 0x7
   437                           
   438  0027                     processing_slipcmd@ret:	
   439                           ; 1 bytes @ 0x7
   440                           
   441  0027                     vmemset@p:	
   442                           ; 1 bytes @ 0x7
   443                           
   444                           
   445                           ; 2 bytes @ 0x7
   446  0027                     	ds	1
   447  0028                     ?_AD7758_CS:	
   448  0028                     ??_AD7758_GetData:	
   449                           ; 0 bytes @ 0x8
   450                           
   451  0028                     ??_AD7758_SendData:	
   452                           ; 0 bytes @ 0x8
   453                           
   454  0028                     AD7758_CS@enable:	
   455                           ; 0 bytes @ 0x8
   456                           
   457  0028                     AD7758_GetData@addr:	
   458                           ; 1 bytes @ 0x8
   459                           
   460  0028                     AD7758_SendData@addr:	
   461                           ; 1 bytes @ 0x8
   462                           
   463  0028                     processing_slipcmd@pend:	
   464                           ; 1 bytes @ 0x8
   465                           
   466                           
   467                           ; 1 bytes @ 0x8
   468  0028                     	ds	1
   469  0029                     ??_AD7758_CS:	
   470  0029                     ??_Initialize:	
   471                           ; 0 bytes @ 0x9
   472                           
   473  0029                     AD7758_CS@chip:	
   474                           ; 0 bytes @ 0x9
   475                           
   476  0029                     AD7758_GetData@i:	
   477                           ; 1 bytes @ 0x9
   478                           
   479  0029                     AD7758_SendData@i:	
   480                           ; 1 bytes @ 0x9
   481                           
   482  0029                     processing_slipcmd@j:	
   483                           ; 1 bytes @ 0x9
   484                           
   485                           
   486                           ; 1 bytes @ 0x9
   487  0029                     	ds	1
   488  002A                     ??_AD7758_init:	
   489  002A                     ??_Sample_ADE7758:	
   490                           ; 0 bytes @ 0xA
   491                           
   492  002A                     ??_AD7758_check_init:	
   493                           ; 0 bytes @ 0xA
   494                           
   495  002A                     AD7758_init@chip:	
   496                           ; 0 bytes @ 0xA
   497                           
   498  002A                     AD7758_check_init@ret:	
   499                           ; 1 bytes @ 0xA
   500                           
   501  002A                     processing_slipcmd@i:	
   502                           ; 1 bytes @ 0xA
   503                           
   504                           
   505                           ; 1 bytes @ 0xA
   506  002A                     	ds	1
   507  002B                     AD7758_check_init@chip:	
   508                           
   509                           ; 1 bytes @ 0xB
   510  002B                     	ds	1
   511  002C                     ??_thread_abnormal:	
   512                           
   513                           ; 0 bytes @ 0xC
   514  002C                     	ds	18
   515  003E                     Sample_ADE7758@sum:	
   516                           
   517                           ; 2 bytes @ 0x1E
   518  003E                     	ds	2
   519  0040                     Sample_ADE7758@chip:	
   520                           
   521                           ; 1 bytes @ 0x20
   522  0040                     	ds	1
   523  0041                     ??_thread_Sample:	
   524  0041                     ??_sample_check:	
   525                           ; 0 bytes @ 0x21
   526                           
   527  0041                     ??_rs485_send_data:	
   528                           ; 0 bytes @ 0x21
   529                           
   530  0041                     rs485_send_data@cc:	
   531                           ; 0 bytes @ 0x21
   532                           
   533                           
   534                           ; 4 bytes @ 0x21
   535  0041                     	ds	4
   536  0045                     ??_sendACK:	
   537  0045                     ??_sendNACK:	
   538                           ; 0 bytes @ 0x25
   539                           
   540  0045                     ??_sendDEV:	
   541                           ; 0 bytes @ 0x25
   542                           
   543  0045                     ?_sendPHASE:	
   544                           ; 0 bytes @ 0x25
   545                           
   546  0045                     ??_sendTemper:	
   547                           ; 0 bytes @ 0x25
   548                           
   549  0045                     ??_sendVER:	
   550                           ; 0 bytes @ 0x25
   551                           
   552  0045                     sendACK@idx:	
   553                           ; 0 bytes @ 0x25
   554                           
   555  0045                     sendNACK@idx:	
   556                           ; 1 bytes @ 0x25
   557                           
   558  0045                     sendPHASE@phase:	
   559                           ; 1 bytes @ 0x25
   560                           
   561                           
   562                           ; 2 bytes @ 0x25
   563  0045                     	ds	1
   564  0046                     sendDEV@idx:	
   565  0046                     sendTemper@idx:	
   566                           ; 1 bytes @ 0x26
   567                           
   568  0046                     sendVER@idx:	
   569                           ; 1 bytes @ 0x26
   570                           
   571                           
   572                           ; 1 bytes @ 0x26
   573  0046                     	ds	1
   574  0047                     ??_sendPHASE:	
   575                           
   576                           ; 0 bytes @ 0x27
   577  0047                     	ds	4
   578  004B                     sendPHASE@pchip1_phase:	
   579                           
   580                           ; 2 bytes @ 0x2B
   581  004B                     	ds	2
   582  004D                     sendPHASE@pchip2_phase:	
   583                           
   584                           ; 2 bytes @ 0x2D
   585  004D                     	ds	2
   586  004F                     sendPHASE@idx:	
   587                           
   588                           ; 1 bytes @ 0x2F
   589  004F                     	ds	1
   590  0050                     ??_run_cmd:	
   591  0050                     run_cmd@wregaddr:	
   592                           ; 0 bytes @ 0x30
   593                           
   594                           
   595                           ; 2 bytes @ 0x30
   596  0050                     	ds	2
   597  0052                     ??_slip_main:	
   598  0052                     slip_main@ret:	
   599                           ; 0 bytes @ 0x32
   600                           
   601                           
   602                           ; 1 bytes @ 0x32
   603  0052                     	ds	1
   604  0053                     ??_thread_slip:	
   605  0053                     ??_main:	
   606                           ; 0 bytes @ 0x33
   607                           
   608  0053                     main@i:	
   609                           ; 0 bytes @ 0x33
   610                           
   611                           
   612                           ; 1 bytes @ 0x33
   613  0053                     	ds	1
   614                           
   615                           	psect	text768
   616  081F                     __ptext768:	
   617  081F                     __end_of_thread_Sample:	
   618                           
   619 ;; =============== function _thread_Sample ends ============
   620 ;; *************** function _thread_slip *****************
   621 ;; Defined at:
   622 ;;		line 280 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\main.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;		None
   625 ;; Auto vars:     Size  Location     Type
   626 ;;		None
   627 ;; Return value:  Size  Location     Type
   628 ;;		None               void
   629 ;; Registers used:
   630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : 1F/0
   633 ;;		On exit  : 1F/1
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   636 ;;      Params:         0       0       0       0       0       0
   637 ;;      Locals:         0       0       0       0       0       0
   638 ;;      Temps:          0       0       0       0       0       0
   639 ;;      Totals:         0       0       0       0       0       0
   640 ;;Total ram usage:        0 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:   10
   643 ;; This function calls:
   644 ;;		__OS_EnterWaitMode
   645 ;;		__OS_CheckEvent
   646 ;;		_slip_main
   647 ;; This function is called by:
   648 ;;		_main
   649 ;; This function uses a non-reentrant model
   650 ;;
   651  081F                     _thread_slip:	
   652  081F                     l3011:	
   653                           ; Regs used in _thread_slip: [wreg-status,0+pclath+cstack]
   654                           ;main.c: 281: do
   655                           
   656                           
   657                           ;main.c: 282: {
   658                           ;main.c: 284: { _OS_EnterWaitMode(); _OS_CheckEvent((gstSLIPRecv.ucRecingState == SLIP_D
      +                          ONE) != 0); };
   659  081F  20D7  3188         	fcall	__OS_EnterWaitMode
   660  0821  0021               	movlb	1	; select bank1
   661  0822  084C               	movf	(_gstSLIPRecv^(0+128)+1),w
   662  0823  3A02               	xorlw	2
   663  0824  3000               	movlw	0
   664  0825  1903               	skipnz
   665  0826  3001               	movlw	1
   666  0827  20C4  3188         	fcall	__OS_CheckEvent
   667                           
   668                           ;main.c: 285: slip_main();
   669  0829  2104  3188         	fcall	_slip_main
   670                           
   671                           ;main.c: 286: gstSLIPRecv.ucRecingState = SLIP_IDLE;
   672  082B  0021               	movlb	1	; select bank1
   673  082C  01CC               	clrf	(_gstSLIPRecv^(0+128)+1)
   674                           
   675                           ;main.c: 287: gstSLIPRecv.ucRecdCnt = 0;
   676  082D  01CB               	clrf	_gstSLIPRecv^(0+128)
   677                           
   678                           ;main.c: 290: }while(1);
   679  082E  281F               	goto	l3011
   680  082F                     __ptext767:	
   681  082F                     __end_of_thread_abnormal:	
   682                           
   683 ;; =============== function _thread_abnormal ends ============
   684 ;; *************** function _thread_Sample *****************
   685 ;; Defined at:
   686 ;;		line 248 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\main.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;		None
   689 ;; Auto vars:     Size  Location     Type
   690 ;;		None
   691 ;; Return value:  Size  Location     Type
   692 ;;		None               void
   693 ;; Registers used:
   694 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 1F/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   700 ;;      Params:         0       0       0       0       0       0
   701 ;;      Locals:         0       0       0       0       0       0
   702 ;;      Temps:          0       0       0       0       0       0
   703 ;;      Totals:         0       0       0       0       0       0
   704 ;;Total ram usage:        0 bytes
   705 ;; Hardware stack levels used:    1
   706 ;; Hardware stack levels required when called:    5
   707 ;; This function calls:
   708 ;;		__OS_EnterWaitMode
   709 ;;		__OS_CheckEvent
   710 ;;		_Sample_ADE7758
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715  082F                     _thread_Sample:	
   716  082F                     l3002:	
   717                           ; Regs used in _thread_Sample: [wreg+fsr1l-status,0+pclath+cstack]
   718                           ;main.c: 249: do
   719                           
   720                           
   721                           ;main.c: 250: {
   722                           ;main.c: 252: { _OS_EnterWaitMode(); _OS_CheckEvent((Sample_flag == 1) != 0); };
   723  082F  20D7  3188         	fcall	__OS_EnterWaitMode
   724  0831  3000               	movlw	0
   725  0832  18FB               	btfsc	_Sample_flag/(0+8),_Sample_flag& (0+7)
   726  0833  3001               	movlw	1
   727  0834  20C4  3188         	fcall	__OS_CheckEvent
   728  0836  3001               	movlw	1
   729                           
   730                           ;main.c: 253: Sample_flag = 0;
   731  0837  10FB               	bcf	_Sample_flag/(0+8),_Sample_flag& (0+7)
   732                           
   733                           ;main.c: 254: Sample_ADE7758( 0x01 );
   734  0838  2379  3188         	fcall	_Sample_ADE7758
   735  083A  0064               	clrwdt	;#
   736                           
   737                           ;main.c: 257: Sample_ADE7758( 0x02 );
   738  083B  3002               	movlw	2
   739  083C  2379  3188         	fcall	_Sample_ADE7758
   740  083E  0064               	clrwdt	;#
   741                           
   742                           ;main.c: 262: }while(1);
   743  083F  282F               	goto	l3002
   744  0840                     __ptext779:	
   745 ;; =============== function _sample_check ends ============
   746                           
   747                           
   748 ;; *************** function _OS_Init *****************
   749 ;; Defined at:
   750 ;;		line 68 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\kernel\system\osa_system.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;		None
   755 ;; Return value:  Size  Location     Type
   756 ;;		None               void
   757 ;; Registers used:
   758 ;;		wreg, status,2, status,0, pclath, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 1F/0
   761 ;;		On exit  : 1F/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   764 ;;      Params:         0       0       0       0       0       0
   765 ;;      Locals:         0       0       0       0       0       0
   766 ;;      Temps:          0       0       0       0       0       0
   767 ;;      Totals:         0       0       0       0       0       0
   768 ;;Total ram usage:        0 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; Hardware stack levels required when called:    4
   771 ;; This function calls:
   772 ;;		__OS_ReturnSave
   773 ;;		__OS_EnterWaitMode
   774 ;;		__OS_EnterWaitModeTO
   775 ;;		__OS_CheckEvent
   776 ;;		__OS_JumpToTask
   777 ;; This function is called by:
   778 ;;		_main
   779 ;; This function uses a non-reentrant model
   780 ;;
   781  0840                     _OS_Init:	
   782                           
   783                           ;osa_system.c: 72: *(near OST_UINT*)&_OS_Flags = 0;
   784                           
   785                           ; Regs used in _OS_Init: [wreg+status,2+status,0+pclath+cstack]
   786  0840  01DD               	clrf	__OS_Flags
   787                           
   788                           ;osa_system.c: 75: if (PCLATH & 0x80) { _OS_ReturnSave(); _OS_EnterWaitMode(); _OS_Enter
      +                          WaitModeTO(); _OS_CheckEvent(0); _OS_JumpToTask(); };
   789  0841  1F8A               	btfss	10,7
   790  0842  284D               	goto	l12018
   791  0843  20F0  3188         	fcall	__OS_ReturnSave
   792  0845  20D7  3188         	fcall	__OS_EnterWaitMode
   793  0847  20FE  3188         	fcall	__OS_EnterWaitModeTO
   794  0849  3000               	movlw	0
   795  084A  20C4  3188         	fcall	__OS_CheckEvent
   796  084C  2719               	fcall	__OS_JumpToTask
   797  084D                     l12018:	
   798                           
   799                           ;osa_system.c: 323: _OS_CurTask = (OST_TASK_POINTER) _OS_Tasks + (3-1);
   800  084D  3068               	movlw	(__OS_Tasks+8)& (0+255)
   801  084E  0020               	movlb	0	; select bank0
   802  084F  00DC               	movwf	__OS_CurTask	;volatile
   803                           
   804                           ;osa_system.c: 326: _OS_Tasks[0].State.bEnable = 0;
   805  0850  1360               	bcf	__OS_Tasks,6
   806                           
   807                           ;osa_system.c: 329: _OS_Tasks[1].State.bEnable = 0;
   808  0851  1364               	bcf	__OS_Tasks+4,6
   809                           
   810                           ;osa_system.c: 333: _OS_Tasks[2].State.bEnable = 0;
   811  0852  1368               	bcf	__OS_Tasks+8,6
   812  0853  0008               	return
   813  0854                     __end_of_OS_Init:	
   814  0854                     __ptext766:	
   815 ;; =============== function _main ends ============
   816                           
   817                           
   818 ;; *************** function _thread_abnormal *****************
   819 ;; Defined at:
   820 ;;		line 294 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\main.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;		None
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;		None               void
   827 ;; Registers used:
   828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   829 ;; Tracked objects:
   830 ;;		On entry : 1F/0
   831 ;;		On exit  : 1F/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   834 ;;      Params:         0       0       0       0       0       0
   835 ;;      Locals:         0       0       0       0       0       0
   836 ;;      Temps:          0       0       0       0       0       0
   837 ;;      Totals:         0       0       0       0       0       0
   838 ;;Total ram usage:        0 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; Hardware stack levels required when called:    5
   841 ;; This function calls:
   842 ;;		__OS_EnterWaitMode
   843 ;;		__OS_CheckEvent
   844 ;;		_AD7758_check_init
   845 ;;		_AD7758_init
   846 ;; This function is called by:
   847 ;;		_main
   848 ;; This function uses a non-reentrant model
   849 ;;
   850  0854                     _thread_abnormal:	
   851  0854                     l3016:	
   852                           ; Regs used in _thread_abnormal: [wreg+fsr1l-status,0+pclath+cstack]
   853                           ;main.c: 295: do
   854                           
   855                           
   856                           ;main.c: 296: {
   857                           ;main.c: 297: { _OS_EnterWaitMode(); _OS_CheckEvent((AbnorProcFlag == 1) != 0); };
   858  0854  20D7  3188         	fcall	__OS_EnterWaitMode
   859  0856  3000               	movlw	0
   860  0857  187B               	btfsc	_AbnorProcFlag/(0+8),_AbnorProcFlag& (0+7)
   861  0858  3001               	movlw	1
   862  0859  20C4  3188         	fcall	__OS_CheckEvent
   863  085B  3001               	movlw	1
   864                           
   865                           ;main.c: 298: AbnorProcFlag = 0;
   866  085C  107B               	bcf	_AbnorProcFlag/(0+8),_AbnorProcFlag& (0+7)
   867                           
   868                           ;main.c: 299: if (AD7758_check_init(0x01) == 0 )
   869  085D  206F  3188         	fcall	_AD7758_check_init
   870  085F  3800               	iorlw	0
   871  0860  1D03               	skipz
   872  0861  2865               	goto	l3017
   873                           
   874                           ;main.c: 300: {
   875                           ;main.c: 301: AD7758_init(1);
   876  0862  3001               	movlw	1
   877  0863  26B8  3188         	fcall	_AD7758_init
   878  0865                     l3017:	
   879                           
   880                           ;main.c: 302: }
   881                           ;main.c: 304: if (AD7758_check_init(0x02) == 0 )
   882  0865  3002               	movlw	2
   883  0866  206F  3188         	fcall	_AD7758_check_init
   884  0868  3800               	iorlw	0
   885  0869  1D03               	skipz
   886  086A  2854               	goto	l3016
   887                           
   888                           ;main.c: 305: {
   889                           ;main.c: 306: AD7758_init(2);
   890  086B  3002               	movlw	2
   891  086C  26B8  3188         	fcall	_AD7758_init
   892  086E  2854               	goto	l3016
   893  086F                     __ptext780:	
   894 ;; =============== function _OS_Init ends ============
   895                           
   896                           
   897 ;; *************** function _AD7758_check_init *****************
   898 ;; Defined at:
   899 ;;		line 268 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\ADE7758.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;  chip            1    wreg     unsigned char 
   902 ;; Auto vars:     Size  Location     Type
   903 ;;  chip            1   11[BANK0 ] unsigned char 
   904 ;;  ret             1   10[BANK0 ] unsigned char 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      unsigned char 
   907 ;; Registers used:
   908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 1F/0
   912 ;;		Unchanged: FFFE0/0
   913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   914 ;;      Params:         0       0       0       0       0       0
   915 ;;      Locals:         0       2       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0
   917 ;;      Totals:         0       2       0       0       0       0
   918 ;;Total ram usage:        2 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    4
   921 ;; This function calls:
   922 ;;		_AD7758_CS
   923 ;;		_AD7758_GetData
   924 ;; This function is called by:
   925 ;;		_thread_abnormal
   926 ;; This function uses a non-reentrant model
   927 ;;
   928  086F                     _AD7758_check_init:	
   929                           
   930                           ; Regs used in _AD7758_check_init: [wreg+fsr1l-status,0+pclath+cstack]
   931                           ;AD7758_check_init@chip stored from wreg
   932  086F  0020               	movlb	0	; select bank0
   933  0870  00AB               	movwf	AD7758_check_init@chip
   934                           
   935                           ;ADE7758.c: 269: uchar ret = 1;
   936  0871  01AA               	clrf	AD7758_check_init@ret
   937  0872  0AAA               	incf	AD7758_check_init@ret,f
   938                           
   939                           ;ADE7758.c: 272: AD7758_CS(chip, 1);
   940  0873  01A8               	clrf	?_AD7758_CS
   941  0874  0AA8               	incf	?_AD7758_CS,f
   942  0875  2091  3188         	fcall	_AD7758_CS
   943                           
   944                           ;ADE7758.c: 275: AD7758_GetData(0x16,1,chip);
   945  0877  01A6               	clrf	?_AD7758_GetData
   946  0878  0AA6               	incf	?_AD7758_GetData,f
   947  0879  082B               	movf	AD7758_check_init@chip,w
   948  087A  00A7               	movwf	?_AD7758_GetData+1
   949  087B  3016               	movlw	22
   950  087C  262A  3188         	fcall	_AD7758_GetData
   951                           
   952                           ;ADE7758.c: 276: if ( 0x00 == ReadData[0])
   953  087E  08D4               	movf	_ReadData,f
   954  087F  1D03               	skipz
   955  0880  288B               	goto	l12002
   956                           
   957                           ;ADE7758.c: 277: {
   958                           ;ADE7758.c: 278: AD7758_GetData(0x17,1,chip);
   959  0881  01A6               	clrf	?_AD7758_GetData
   960  0882  0AA6               	incf	?_AD7758_GetData,f
   961  0883  082B               	movf	AD7758_check_init@chip,w
   962  0884  00A7               	movwf	?_AD7758_GetData+1
   963  0885  3017               	movlw	23
   964  0886  262A  3188         	fcall	_AD7758_GetData
   965                           
   966                           ;ADE7758.c: 279: if ( 0x40 != ReadData[0])
   967  0888  0854               	movf	_ReadData,w
   968  0889  3A40               	xorlw	64
   969  088A  1D03               	btfss	3,2
   970  088B                     l12002:	
   971                           
   972                           ;ADE7758.c: 280: {
   973                           ;ADE7758.c: 281: ret = 0;
   974  088B  01AA               	clrf	AD7758_check_init@ret
   975                           
   976                           ;ADE7758.c: 287: }
   977                           ;ADE7758.c: 290: AD7758_CS(chip, 0);
   978  088C  01A8               	clrf	?_AD7758_CS
   979  088D  082B               	movf	AD7758_check_init@chip,w
   980  088E  2091               	fcall	_AD7758_CS
   981                           
   982                           ;ADE7758.c: 293: return ret;
   983  088F  082A               	movf	AD7758_check_init@ret,w
   984  0890  0008               	return
   985  0891                     __end_of_AD7758_check_init:	
   986  0891                     __ptext789:	
   987 ;; =============== function _AD7758_GetData ends ============
   988                           
   989                           
   990 ;; *************** function _AD7758_CS *****************
   991 ;; Defined at:
   992 ;;		line 14 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\ADE7758.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;  chip            1    wreg     unsigned char 
   995 ;;  enable          1    8[BANK0 ] unsigned char 
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  chip            1    9[BANK0 ] unsigned char 
   998 ;; Return value:  Size  Location     Type
   999 ;;		None               void
  1000 ;; Registers used:
  1001 ;;		wreg, status,2, status,0, pclath, cstack
  1002 ;; Tracked objects:
  1003 ;;		On entry : 1F/0
  1004 ;;		On exit  : 1F/0
  1005 ;;		Unchanged: FFFE0/0
  1006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1007 ;;      Params:         0       1       0       0       0       0
  1008 ;;      Locals:         0       1       0       0       0       0
  1009 ;;      Temps:          0       0       0       0       0       0
  1010 ;;      Totals:         0       2       0       0       0       0
  1011 ;;Total ram usage:        2 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; Hardware stack levels required when called:    3
  1014 ;; This function calls:
  1015 ;;		_Delay
  1016 ;; This function is called by:
  1017 ;;		_AD7758_init
  1018 ;;		_Sample_ADE7758
  1019 ;;		_AD7758_check_init
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022  0891                     _AD7758_CS:	
  1023                           
  1024                           ; Regs used in _AD7758_CS: [wreg+status,2+status,0+pclath+cstack]
  1025                           ;AD7758_CS@chip stored from wreg
  1026  0891  00A9               	movwf	AD7758_CS@chip
  1027                           
  1028                           ;ADE7758.c: 15: if (enable)
  1029  0892  0828               	movf	AD7758_CS@enable,w
  1030  0893  1903               	btfsc	3,2
  1031  0894  28A0               	goto	l1445
  1032                           
  1033                           ;ADE7758.c: 16: {
  1034                           ;ADE7758.c: 17: if ( 1 == chip )
  1035  0895  0B29               	decfsz	AD7758_CS@chip,w
  1036  0896  2899               	goto	l11702
  1037                           
  1038                           ;ADE7758.c: 18: {
  1039                           ;ADE7758.c: 19: RB3=0;
  1040  0897  118D               	bcf	13,3
  1041  0898  28A1               	goto	L3
  1042  0899                     l11702:	
  1043                           ;ADE7758.c: 21: }
  1044                           
  1045                           ;ADE7758.c: 20: RB0=1;
  1046                           
  1047                           
  1048                           ;ADE7758.c: 22: else if ( 2 == chip )
  1049  0899  0829               	movf	AD7758_CS@chip,w
  1050  089A  3A02               	xorlw	2
  1051  089B  1D03               	skipz
  1052  089C  28A2               	goto	l11706
  1053                           
  1054                           ;ADE7758.c: 23: {
  1055                           ;ADE7758.c: 24: RB0=0;
  1056  089D  100D               	bcf	13,0
  1057                           
  1058                           ;ADE7758.c: 25: RB3=1;
  1059  089E  158D               	bsf	13,3
  1060  089F  28A2               	goto	l11706
  1061  08A0                     l1445:	
  1062                           
  1063                           ;ADE7758.c: 28: else
  1064                           ;ADE7758.c: 29: {
  1065                           ;ADE7758.c: 30: RB3=1;
  1066  08A0  158D               	bsf	13,3
  1067  08A1                     L3:	
  1068                           
  1069                           ;ADE7758.c: 31: RB0=1;
  1070  08A1  140D               	bsf	13,0
  1071  08A2                     l11706:	
  1072                           
  1073                           ;ADE7758.c: 32: }
  1074                           ;ADE7758.c: 34: Delay(0x01);
  1075  08A2  01A0               	clrf	?_Delay
  1076  08A3  0AA0               	incf	?_Delay,f
  1077  08A4  01A1               	clrf	?_Delay+1
  1078  08A5  01A2               	clrf	?_Delay+2
  1079  08A6  01A3               	clrf	?_Delay+3
  1080  08A7  28A8               	ljmp	l11378
  1081  08A8                     __end_of_AD7758_CS:	
  1082  08A8                     __ptext801:	
  1083 ;; =============== function _spiSendByte ends ============
  1084                           
  1085                           
  1086 ;; *************** function _Delay *****************
  1087 ;; Defined at:
  1088 ;;		line 4 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\util.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  delay_count_    4    0[BANK0 ] unsigned long 
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;  delay_count     4    4[BANK0 ] unsigned long 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;		None               void
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0
  1097 ;; Tracked objects:
  1098 ;;		On entry : 1F/0
  1099 ;;		On exit  : 1F/0
  1100 ;;		Unchanged: FFFE0/0
  1101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1102 ;;      Params:         0       4       0       0       0       0
  1103 ;;      Locals:         0       4       0       0       0       0
  1104 ;;      Temps:          0       0       0       0       0       0
  1105 ;;      Totals:         0       8       0       0       0       0
  1106 ;;Total ram usage:        8 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; Hardware stack levels required when called:    2
  1109 ;; This function calls:
  1110 ;;		Nothing
  1111 ;; This function is called by:
  1112 ;;		_AD7758_CS
  1113 ;;		_AD7758_init
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116  08A8                     _Delay:	
  1117  08A8                     l11378:	
  1118                           ; Regs used in _Delay: [wreg+status,2+status,0]
  1119                           
  1120                           
  1121                           ;util.c: 5: ulong delay_count;
  1122                           ;util.c: 6: for( delay_count = 0 ; delay_count < delay_count_max ; delay_count ++ )
  1123  08A8  01A4               	clrf	Delay@delay_count
  1124  08A9  01A5               	clrf	Delay@delay_count+1
  1125  08AA  01A6               	clrf	Delay@delay_count+2
  1126  08AB  01A7               	clrf	Delay@delay_count+3
  1127  08AC                     l11382:	
  1128  08AC  0823               	movf	Delay@delay_count_max+3,w
  1129  08AD  0227               	subwf	Delay@delay_count+3,w
  1130  08AE  1D03               	skipz
  1131  08AF  28BA               	goto	u915
  1132  08B0  0822               	movf	Delay@delay_count_max+2,w
  1133  08B1  0226               	subwf	Delay@delay_count+2,w
  1134  08B2  1D03               	skipz
  1135  08B3  28BA               	goto	u915
  1136  08B4  0821               	movf	Delay@delay_count_max+1,w
  1137  08B5  0225               	subwf	Delay@delay_count+1,w
  1138  08B6  1D03               	skipz
  1139  08B7  28BA               	goto	u915
  1140  08B8  0820               	movf	Delay@delay_count_max,w
  1141  08B9  0224               	subwf	Delay@delay_count,w
  1142  08BA                     u915:	
  1143  08BA  1803               	btfsc	3,0
  1144  08BB  0008               	return
  1145                           
  1146                           ;util.c: 7: {
  1147                           ;util.c: 8: ;
  1148  08BC  0AA4               	incf	Delay@delay_count,f
  1149  08BD  1903               	skipnz
  1150  08BE  0AA5               	incf	Delay@delay_count+1,f
  1151  08BF  1903               	skipnz
  1152  08C0  0AA6               	incf	Delay@delay_count+2,f
  1153  08C1  1903               	skipnz
  1154  08C2  0AA7               	incf	Delay@delay_count+3,f
  1155  08C3  28AC               	goto	l11382
  1156  08C4                     __end_of_Delay:	
  1157  08C4                     __ptext797:	
  1158 ;; =============== function _get_address ends ============
  1159                           
  1160                           
  1161 ;; *************** function __OS_CheckEvent *****************
  1162 ;; Defined at:
  1163 ;;		line 380 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\port\pic16\osa_pic16e_htpicc_pro.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  bEvent          1    wreg     unsigned char 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  bEvent          1    0[BANK0 ] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;		None               void
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, status,0
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/1
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: FFFE0/0
  1176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1177 ;;      Params:         0       0       0       0       0       0
  1178 ;;      Locals:         0       1       0       0       0       0
  1179 ;;      Temps:          0       0       0       0       0       0
  1180 ;;      Totals:         0       1       0       0       0       0
  1181 ;;Total ram usage:        1 bytes
  1182 ;; Hardware stack levels used:    1
  1183 ;; Hardware stack levels required when called:    2
  1184 ;; This function calls:
  1185 ;;		Nothing
  1186 ;; This function is called by:
  1187 ;;		_thread_Sample
  1188 ;;		_thread_slip
  1189 ;;		_thread_abnormal
  1190 ;;		_OS_Init
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193  08C4                     __OS_CheckEvent:	
  1194                           
  1195                           ; Regs used in __OS_CheckEvent: [wreg+status,2+status,0]
  1196                           ;__OS_CheckEvent@bEvent stored from wreg
  1197  08C4  0020               	movlb	0	; select bank0
  1198  08C5  00A0               	movwf	__OS_CheckEvent@bEvent
  1199                           
  1200                           ;osa_pic16e_htpicc_pro.c: 385: _OS_Flags.bTimeout = 0;
  1201  08C6  12DD               	bcf	__OS_Flags,5	;volatile
  1202                           
  1203                           ;osa_pic16e_htpicc_pro.c: 386: FSR0L = (OS_FSR_TYPE)_OS_CurTask; FSR0H = 0;;
  1204  08C7  085C               	movf	__OS_CurTask,w	;volatile
  1205  08C8  0084               	movwf	4	;volatile
  1206  08C9  0185               	clrf	5	;volatile
  1207                           
  1208                           ;osa_pic16e_htpicc_pro.c: 388: if (bEvent)
  1209  08CA  0820               	movf	__OS_CheckEvent@bEvent,w
  1210  08CB  1903               	btfsc	3,2
  1211  08CC  28CF               	goto	l7505
  1212                           
  1213                           ;osa_pic16e_htpicc_pro.c: 389: {
  1214                           ;osa_pic16e_htpicc_pro.c: 392: ((near OST_TASK_STATE*)(&INDF0))->bDelay = 0;
  1215  08CD  1200               	bcf	0,4
  1216                           
  1217                           ;osa_pic16e_htpicc_pro.c: 395: return;
  1218  08CE  0008               	return
  1219  08CF                     l7505:	
  1220                           
  1221                           ;osa_pic16e_htpicc_pro.c: 397: }
  1222                           ;osa_pic16e_htpicc_pro.c: 401: if ((!((near OST_TASK_STATE*)(&INDF0))->bDelay) && ((near
      +                           OST_TASK_STATE*)(&INDF0))->bCanContinue)
  1223  08CF  1E00               	btfss	0,4
  1224  08D0  1E80               	btfss	0,5
  1225  08D1  28D4               	goto	l11522
  1226                           
  1227                           ;osa_pic16e_htpicc_pro.c: 402: {
  1228                           ;osa_pic16e_htpicc_pro.c: 403: _OS_Flags.bTimeout = 1;
  1229  08D2  16DD               	bsf	__OS_Flags,5	;volatile
  1230                           
  1231                           ;osa_pic16e_htpicc_pro.c: 404: return;
  1232  08D3  0008               	return
  1233  08D4                     l11522:	
  1234                           
  1235                           ;osa_pic16e_htpicc_pro.c: 405: }
  1236                           ;osa_pic16e_htpicc_pro.c: 409: STKPTR--;;
  1237  08D4  003F               	movlb	31	; select bank31
  1238  08D5  03ED               	decf	109,f	;volatile
  1239  08D6  0008               	return
  1240  08D7                     __end_of__OS_CheckEvent:	
  1241  08D7                     __ptext785:	
  1242 ;; =============== function _processing_slipcmd ends ============
  1243                           
  1244                           
  1245 ;; *************** function __OS_EnterWaitMode *****************
  1246 ;; Defined at:
  1247 ;;		line 104 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\port\pic16\osa_pic16e_htpicc_pro.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;		None               void
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0, pclath, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1261 ;;      Params:         0       0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0
  1264 ;;      Totals:         0       0       0       0       0       0
  1265 ;;Total ram usage:        0 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    3
  1268 ;; This function calls:
  1269 ;;		__OS_ClrReadySetClrCanContinue
  1270 ;; This function is called by:
  1271 ;;		_thread_Sample
  1272 ;;		_thread_slip
  1273 ;;		_thread_abnormal
  1274 ;;		_OS_Init
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277  08D7                     __OS_EnterWaitMode:	
  1278                           
  1279                           ;osa_pic16e_htpicc_pro.c: 105: _OS_Temp = 0;
  1280                           
  1281                           ; Regs used in __OS_EnterWaitMode: [wreg+status,2+status,0+pclath+cstack]
  1282  08D7  0020               	movlb	0	; select bank0
  1283  08D8  01DE               	clrf	__OS_Temp
  1284                           
  1285                           ;osa_pic16e_htpicc_pro.c: 106: _OS_ClrReadySetClrCanContinue();
  1286  08D9  20DC               	fcall	__OS_ClrReadySetClrCanContinue
  1287                           
  1288                           ;osa_pic16e_htpicc_pro.c: 107: _nop();
  1289  08DA  0000               	nop
  1290  08DB  0008               	return
  1291  08DC                     __end_of__OS_EnterWaitMode:	
  1292  08DC                     __ptext791:	
  1293 ;; =============== function ___bmul ends ============
  1294                           
  1295                           
  1296 ;; *************** function __OS_ClrReadySetClrCanContinue *****************
  1297 ;; Defined at:
  1298 ;;		line 156 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\port\pic16\osa_pic16e_htpicc_pro.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;		None
  1303 ;; Return value:  Size  Location     Type
  1304 ;;		None               void
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0
  1307 ;; Tracked objects:
  1308 ;;		On entry : 1F/0
  1309 ;;		On exit  : 1F/0
  1310 ;;		Unchanged: FFE00/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1312 ;;      Params:         0       0       0       0       0       0
  1313 ;;      Locals:         0       0       0       0       0       0
  1314 ;;      Temps:          0       0       0       0       0       0
  1315 ;;      Totals:         0       0       0       0       0       0
  1316 ;;Total ram usage:        0 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    2
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		__OS_EnterWaitMode
  1323 ;;		__OS_EnterWaitModeTO
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326  08DC                     __OS_ClrReadySetClrCanContinue:	
  1327                           
  1328                           ;osa_pic16e_htpicc_pro.c: 157: STKPTR--;;
  1329                           
  1330                           ; Regs used in __OS_ClrReadySetClrCanContinue: [wreg+status,2+status,0]
  1331  08DC  003F               	movlb	31	; select bank31
  1332  08DD  03ED               	decf	109,f	;volatile
  1333                           
  1334                           ;osa_pic16e_htpicc_pro.c: 159: _OS_Flags.bEventError = 0;
  1335  08DE  0020               	movlb	0	; select bank0
  1336  08DF  105D               	bcf	__OS_Flags,0	;volatile
  1337                           
  1338                           ;osa_pic16e_htpicc_pro.c: 162: {FSR0L = (OS_FSR_TYPE)_OS_CurTask; FSR0H = 0; asm(" dw 0x
      +                          3100 +""1 + 1");};
  1339  08E0  085C               	movf	__OS_CurTask,w	;volatile
  1340  08E1  0084               	movwf	4	;volatile
  1341  08E2  0185               	clrf	5	;volatile
  1342  08E3  3102               	dw	12546	;#
  1343  08E4  003F               	movlb	31	;#
  1344  08E5  086F               	dw	2159	;#
  1345  08E6  001B               	dw	27	;#
  1346  08E7  086E               	dw	2158	;#
  1347  08E8  001B               	dw	27	;#
  1348                           
  1349                           ;osa_pic16e_htpicc_pro.c: 165: ((near OST_TASK_STATE*)(&INDF0))->bReady = 0;
  1350  08E9  0020               	movlb	0	; select bank0
  1351  08EA  1180               	bcf	0,3
  1352                           
  1353                           ;osa_pic16e_htpicc_pro.c: 169: if (!((near OST_TASK_STATE*)(&INDF0))->bDelay) ((near OST
      +                          _TASK_STATE*)(&INDF0))->bCanContinue = 0;
  1354  08EB  1E00               	btfss	0,4
  1355  08EC  1280               	bcf	0,5
  1356                           
  1357                           ;osa_pic16e_htpicc_pro.c: 170: if (_OS_Temp & 0x01) ((near OST_TASK_STATE*)(&INDF0))->bC
      +                          anContinue = 1;
  1358  08ED  185E               	btfsc	__OS_Temp,0
  1359  08EE  1680               	bsf	0,5
  1360  08EF  0008               	return
  1361  08F0                     __end_of__OS_ClrReadySetClrCanContinue:	
  1362  08F0                     __ptext792:	
  1363 ;; =============== function __OS_ClrReadySetClrCanContinue ends ============
  1364                           
  1365                           
  1366 ;; *************** function __OS_ReturnSave *****************
  1367 ;; Defined at:
  1368 ;;		line 76 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\port\pic16\osa_pic16e_htpicc_pro.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;		None               void
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0
  1377 ;; Tracked objects:
  1378 ;;		On entry : 1F/0
  1379 ;;		On exit  : 1F/1F
  1380 ;;		Unchanged: FFE00/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1382 ;;      Params:         0       0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0
  1385 ;;      Totals:         0       0       0       0       0       0
  1386 ;;Total ram usage:        0 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    2
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_OS_Init
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395  08F0                     __OS_ReturnSave:	
  1396                           
  1397                           ;osa_pic16e_htpicc_pro.c: 78: {FSR0L = (OS_FSR_TYPE)_OS_CurTask; FSR0H = 0; asm(" dw 0x3
      +                          100 +""1 + 1");};
  1398                           
  1399                           ; Regs used in __OS_ReturnSave: [wreg+status,2+status,0]
  1400  08F0  085C               	movf	__OS_CurTask,w	;volatile
  1401  08F1  0084               	movwf	4	;volatile
  1402  08F2  0185               	clrf	5	;volatile
  1403  08F3  3102               	dw	12546	;#
  1404  08F4  003F               	movlb	31	;#
  1405  08F5  086F               	dw	2159	;#
  1406  08F6  001B               	dw	27	;#
  1407  08F7  086E               	dw	2158	;#
  1408  08F8  001B               	dw	27	;#
  1409                           
  1410                           ;osa_pic16e_htpicc_pro.c: 80: ((near OST_TASK_STATE*)(&INDF0))->bReady = 1;
  1411  08F9  0020               	movlb	0	; select bank0
  1412  08FA  1580               	bsf	0,3
  1413                           
  1414                           ;osa_pic16e_htpicc_pro.c: 81: STKPTR--;;
  1415  08FB  003F               	movlb	31	; select bank31
  1416  08FC  03ED               	decf	109,f	;volatile
  1417  08FD  0008               	return
  1418  08FE                     __end_of__OS_ReturnSave:	
  1419  08FE                     __ptext783:	
  1420 ;; =============== function _AD7758_init ends ============
  1421                           
  1422                           
  1423 ;; *************** function __OS_EnterWaitModeTO *****************
  1424 ;; Defined at:
  1425 ;;		line 129 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\port\pic16\osa_pic16e_htpicc_pro.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;		None               void
  1432 ;; Registers used:
  1433 ;;		wreg, status,2, status,0, pclath, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/1F
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1439 ;;      Params:         0       0       0       0       0       0
  1440 ;;      Locals:         0       0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0
  1442 ;;      Totals:         0       0       0       0       0       0
  1443 ;;Total ram usage:        0 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    3
  1446 ;; This function calls:
  1447 ;;		__OS_ClrReadySetClrCanContinue
  1448 ;; This function is called by:
  1449 ;;		_OS_Init
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452  08FE                     __OS_EnterWaitModeTO:	
  1453                           
  1454                           ;osa_pic16e_htpicc_pro.c: 130: _OS_Temp = 0xFF;
  1455                           
  1456                           ; Regs used in __OS_EnterWaitModeTO: [wreg+status,2+status,0+pclath+cstack]
  1457  08FE  30FF               	movlw	255
  1458  08FF  0020               	movlb	0	; select bank0
  1459  0900  00DE               	movwf	__OS_Temp
  1460                           
  1461                           ;osa_pic16e_htpicc_pro.c: 131: _OS_ClrReadySetClrCanContinue();
  1462  0901  20DC               	fcall	__OS_ClrReadySetClrCanContinue
  1463                           
  1464                           ;osa_pic16e_htpicc_pro.c: 132: _nop();
  1465  0902  0000               	nop
  1466  0903  0008               	return
  1467  0904                     __end_of__OS_EnterWaitModeTO:	
  1468  0904                     __ptext769:	
  1469  0904                     __end_of_thread_slip:	
  1470                           
  1471 ;; =============== function _thread_slip ends ============
  1472 ;; *************** function _slip_main *****************
  1473 ;; Defined at:
  1474 ;;		line 291 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;  ret             1   50[BANK0 ] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;		None               void
  1481 ;; Registers used:
  1482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 1E/0
  1486 ;;		Unchanged: FFE00/0
  1487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1488 ;;      Params:         0       0       0       0       0       0
  1489 ;;      Locals:         0       1       0       0       0       0
  1490 ;;      Temps:          0       0       0       0       0       0
  1491 ;;      Totals:         0       1       0       0       0       0
  1492 ;;Total ram usage:        1 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    9
  1495 ;; This function calls:
  1496 ;;		_processing_slipcmd
  1497 ;;		_sendACK
  1498 ;;		_run_cmd
  1499 ;;		_sendNACK
  1500 ;; This function is called by:
  1501 ;;		_thread_slip
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504  0904                     _slip_main:	
  1505                           
  1506                           ;rs485.c: 294: ret = processing_slipcmd();
  1507                           
  1508                           ; Regs used in _slip_main: [wreg-status,0+pclath+cstack]
  1509  0904  2110  3188         	fcall	_processing_slipcmd
  1510  0906  00D2               	movwf	slip_main@ret
  1511                           
  1512                           ;rs485.c: 296: if( ret == 0)
  1513  0907  08D2               	movf	slip_main@ret,f
  1514  0908  1D03               	skipz
  1515  0909  290D               	goto	l12504
  1516                           
  1517                           ;rs485.c: 297: {
  1518                           ;rs485.c: 298: sendACK();
  1519  090A  21A7  3188         	fcall	_sendACK
  1520                           
  1521                           ;rs485.c: 299: run_cmd();
  1522  090C  2A2C               	ljmp	l12474
  1523  090D                     l12504:	
  1524                           ;rs485.c: 300: }
  1525                           
  1526                           
  1527                           ;rs485.c: 301: else if (ret == 1)
  1528  090D  0B52               	decfsz	slip_main@ret,w
  1529  090E  0008               	return
  1530                           
  1531                           ;rs485.c: 302: {
  1532                           ;rs485.c: 303: sendNACK();
  1533  090F  2A12               	ljmp	l12108
  1534  0910                     __end_of_slip_main:	
  1535  0910                     __ptext784:	
  1536 ;; =============== function __OS_EnterWaitModeTO ends ============
  1537                           
  1538                           
  1539 ;; *************** function _processing_slipcmd *****************
  1540 ;; Defined at:
  1541 ;;		line 203 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  i               1   10[BANK0 ] unsigned char 
  1546 ;;  j               1    9[BANK0 ] unsigned char 
  1547 ;;  pend            1    8[BANK0 ] unsigned char 
  1548 ;;  ret             1    7[BANK0 ] unsigned char 
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      unsigned char 
  1551 ;; Registers used:
  1552 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 1F/0
  1556 ;;		Unchanged: FFE00/0
  1557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1558 ;;      Params:         0       0       0       0       0       0
  1559 ;;      Locals:         0       4       0       0       0       0
  1560 ;;      Temps:          0       2       0       0       0       0
  1561 ;;      Totals:         0       6       0       0       0       0
  1562 ;;Total ram usage:        6 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    3
  1565 ;; This function calls:
  1566 ;;		_calculateCRC8
  1567 ;; This function is called by:
  1568 ;;		_slip_main
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571  0910                     _processing_slipcmd:	
  1572                           
  1573                           ;rs485.c: 204: uchar i, j;
  1574                           ;rs485.c: 205: uchar pend = 0;
  1575                           
  1576                           ; Regs used in _processing_slipcmd: [wreg-status,0+pclath+cstack]
  1577  0910  0020               	movlb	0	; select bank0
  1578  0911  01A8               	clrf	processing_slipcmd@pend
  1579                           
  1580                           ;rs485.c: 206: uchar ret;
  1581                           ;rs485.c: 210: for (i = 1; i < gstSLIPRecv.ucRecdCnt - 1; i++)
  1582  0912  01AA               	clrf	processing_slipcmd@i
  1583  0913                     l11858:	
  1584  0913  0AAA               	incf	processing_slipcmd@i,f
  1585  0914  2332  3188         	fcall	PL22	;call to abstracted procedure
  1586  0916  1D03               	skipz
  1587  0917  291A               	goto	u1485
  1588  0918  0825               	movf	??_processing_slipcmd,w
  1589  0919  022A               	subwf	processing_slipcmd@i,w
  1590  091A                     u1485:	
  1591  091A  1803               	btfsc	3,0
  1592  091B  295D               	goto	l11862
  1593                           
  1594                           ;rs485.c: 211: {
  1595                           ;rs485.c: 212: if (gstSLIPRecv.ucData[i] == 0xDC && pend == 1)
  1596  091C  0020               	movlb	0	; select bank0
  1597  091D  236D  3188         	fcall	PL31	;call to abstracted procedure
  1598  091F  3ADC               	xorlw	220
  1599  0920  1D03               	skipz
  1600  0921  2929               	goto	l11836
  1601  0922  0B28               	decfsz	processing_slipcmd@pend,w
  1602  0923  2929               	goto	l11836
  1603                           
  1604                           ;rs485.c: 213: {
  1605                           ;rs485.c: 214: gstSLIPRecv.ucData[i] = 0xC0;
  1606  0924  082A               	movf	processing_slipcmd@i,w
  1607  0925  3ECD               	addlw	(_gstSLIPRecv+2)& (0+255)
  1608  0926  0086               	movwf	6
  1609  0927  30C0               	movlw	192
  1610  0928  2934               	goto	L2
  1611  0929                     l11836:	
  1612                           ;rs485.c: 215: }
  1613                           
  1614                           
  1615                           ;rs485.c: 216: else if (gstSLIPRecv.ucData[i] == 0xDD && pend == 1)
  1616  0929  236D  3188         	fcall	PL31	;call to abstracted procedure
  1617  092B  3ADD               	xorlw	221
  1618  092C  1D03               	skipz
  1619  092D  2937               	goto	l11842
  1620  092E  0B28               	decfsz	processing_slipcmd@pend,w
  1621  092F  2937               	goto	l11842
  1622                           
  1623                           ;rs485.c: 217: {
  1624                           ;rs485.c: 218: gstSLIPRecv.ucData[i] = 0xDB;
  1625  0930  082A               	movf	processing_slipcmd@i,w
  1626  0931  3ECD               	addlw	(_gstSLIPRecv+2)& (0+255)
  1627  0932  0086               	movwf	6
  1628  0933  30DB               	movlw	219
  1629  0934                     L2:	
  1630  0934  0187               	clrf	7
  1631  0935  0081               	movwf	1
  1632                           
  1633                           ;rs485.c: 219: }
  1634  0936  295B               	goto	l11856
  1635  0937                     l11842:	
  1636                           
  1637                           ;rs485.c: 220: else if (gstSLIPRecv.ucData[i] == 0xDB)
  1638  0937  236D  3188         	fcall	PL31	;call to abstracted procedure
  1639  0939  3ADB               	xorlw	219
  1640  093A  1D03               	skipz
  1641  093B  295B               	goto	l11856
  1642                           
  1643                           ;rs485.c: 221: {
  1644                           ;rs485.c: 222: for (j = i; j < gstSLIPRecv.ucRecdCnt - 1; j++)
  1645  093C  082A               	movf	processing_slipcmd@i,w
  1646  093D  00A9               	movwf	processing_slipcmd@j
  1647  093E                     l11850:	
  1648  093E  2332  3188         	fcall	PL22	;call to abstracted procedure
  1649  0940  1D03               	skipz
  1650  0941  2944               	goto	u1475
  1651  0942  0825               	movf	??_processing_slipcmd,w
  1652  0943  0229               	subwf	processing_slipcmd@j,w
  1653  0944                     u1475:	
  1654  0944  1803               	btfsc	3,0
  1655  0945  2953               	goto	l11852
  1656                           
  1657                           ;rs485.c: 223: {
  1658                           ;rs485.c: 224: gstSLIPRecv.ucData[j] = gstSLIPRecv.ucData[j+1];
  1659  0946  0020               	movlb	0	; select bank0
  1660  0947  0829               	movf	processing_slipcmd@j,w
  1661  0948  3ECD               	addlw	(_gstSLIPRecv+2)& (0+255)
  1662  0949  0086               	movwf	6
  1663  094A  0187               	clrf	7
  1664  094B  0829               	movf	processing_slipcmd@j,w
  1665  094C  3ECE               	addlw	(_gstSLIPRecv+3)& (0+255)
  1666  094D  0084               	movwf	4
  1667  094E  0185               	clrf	5
  1668  094F  0800               	movf	0,w
  1669  0950  0081               	movwf	1
  1670  0951  0AA9               	incf	processing_slipcmd@j,f
  1671  0952  293E               	goto	l11850
  1672  0953                     l11852:	
  1673                           
  1674                           ;rs485.c: 225: }
  1675                           ;rs485.c: 226: i--;
  1676  0953  0020               	movlb	0	; select bank0
  1677  0954  03AA               	decf	processing_slipcmd@i,f
  1678                           
  1679                           ;rs485.c: 227: gstSLIPRecv.ucRecdCnt--;
  1680  0955  0021               	movlb	1	; select bank1
  1681  0956  03CB               	decf	_gstSLIPRecv^(0+128),f
  1682                           
  1683                           ;rs485.c: 228: pend = 1;
  1684  0957  0020               	movlb	0	; select bank0
  1685  0958  01A8               	clrf	processing_slipcmd@pend
  1686  0959  0AA8               	incf	processing_slipcmd@pend,f
  1687                           
  1688                           ;rs485.c: 229: continue;
  1689  095A  2913               	goto	l11858
  1690  095B                     l11856:	
  1691                           
  1692                           ;rs485.c: 230: }
  1693                           ;rs485.c: 231: pend = 0;
  1694  095B  01A8               	clrf	processing_slipcmd@pend
  1695  095C  2913               	goto	l11858
  1696  095D                     l11862:	
  1697                           
  1698                           ;rs485.c: 232: }
  1699                           ;rs485.c: 234: ret = 0;
  1700  095D  0020               	movlb	0	; select bank0
  1701  095E  01A7               	clrf	processing_slipcmd@ret
  1702                           
  1703                           ;rs485.c: 235: if (gstSLIPRecv.ucData[1] != gucDevAddr)
  1704  095F  0021               	movlb	1	; select bank1
  1705  0960  084E               	movf	(_gstSLIPRecv^(0+128)+3),w
  1706  0961  0020               	movlb	0	; select bank0
  1707  0962  065F               	xorwf	_gucDevAddr,w
  1708  0963  1903               	skipnz
  1709  0964  2968               	goto	l11868
  1710                           
  1711                           ;rs485.c: 236: {
  1712                           ;rs485.c: 237: ret = 2;
  1713  0965  3002               	movlw	2
  1714  0966  00A7               	movwf	processing_slipcmd@ret
  1715                           
  1716                           ;rs485.c: 238: }
  1717  0967  2987               	goto	l11876
  1718  0968                     l11868:	
  1719                           
  1720                           ;rs485.c: 239: else if ((gstSLIPRecv.ucData[0] != 0xC0)
  1721                           ;rs485.c: 240: || (gstSLIPRecv.ucData[gstSLIPRecv.ucRecdCnt-1] != 0xC0))
  1722  0968  0021               	movlb	1	; select bank1
  1723  0969  084D               	movf	(_gstSLIPRecv^(0+128)+2),w
  1724  096A  3AC0               	xorlw	192
  1725  096B  1D03               	skipz
  1726  096C  2975               	goto	l4538
  1727  096D  084B               	movf	_gstSLIPRecv^(0+128),w
  1728  096E  3ECC               	addlw	(_gstSLIPRecv+1)& (0+255)
  1729  096F  0086               	movwf	6
  1730  0970  0187               	clrf	7
  1731  0971  0801               	movf	1,w
  1732  0972  3AC0               	xorlw	192
  1733  0973  1903               	skipnz
  1734  0974  2979               	goto	l11872
  1735  0975                     l4538:	
  1736                           
  1737                           ;rs485.c: 241: {
  1738                           ;rs485.c: 242: ret = 1;
  1739  0975  0020               	movlb	0	; select bank0
  1740  0976  01A7               	clrf	processing_slipcmd@ret
  1741  0977  0AA7               	incf	processing_slipcmd@ret,f
  1742                           
  1743                           ;rs485.c: 243: }
  1744  0978  2987               	goto	l11876
  1745  0979                     l11872:	
  1746                           
  1747                           ;rs485.c: 244: else if ( gstSLIPRecv.ucData[gstSLIPRecv.ucRecdCnt - 2] != calculateCRC8(
      +                          gstSLIPRecv.ucData+2, gstSLIPRecv.ucRecdCnt-4))
  1748  0979  084B               	movf	_gstSLIPRecv^(0+128),w
  1749  097A  3ECB               	addlw	_gstSLIPRecv& (0+255)
  1750  097B  0084               	movwf	4
  1751  097C  0185               	clrf	5
  1752  097D  084B               	movf	_gstSLIPRecv^(0+128),w
  1753  097E  3EFC               	addlw	252
  1754  097F  0020               	movlb	0	; select bank0
  1755  0980  00A0               	movwf	?_calculateCRC8
  1756  0981  30CF               	movlw	(_gstSLIPRecv+4)& (0+255)
  1757  0982  2189  3188         	fcall	_calculateCRC8
  1758  0984  0600               	xorwf	0,w
  1759  0985  1D03               	btfss	3,2
  1760  0986  2975               	goto	l4538
  1761  0987                     l11876:	
  1762                           
  1763                           ;rs485.c: 247: }
  1764                           ;rs485.c: 249: return ret;
  1765  0987  0827               	movf	processing_slipcmd@ret,w
  1766  0988  0008               	return
  1767  0989                     __end_of_processing_slipcmd:	
  1768  0989                     __ptext793:	
  1769 ;; =============== function __OS_ReturnSave ends ============
  1770                           
  1771                           
  1772 ;; *************** function _calculateCRC8 *****************
  1773 ;; Defined at:
  1774 ;;		line 78 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\util.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  inData          1    wreg     PTR unsigned char 
  1777 ;;		 -> gstSLIPSend(43), gstSLIPRecv(22), 
  1778 ;;  dataLen         1    0[BANK0 ] unsigned char 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  inData          1    1[BANK0 ] PTR unsigned char 
  1781 ;;		 -> gstSLIPSend(43), gstSLIPRecv(22), 
  1782 ;;  crc             1    4[BANK0 ] unsigned char 
  1783 ;;  i               1    3[BANK0 ] unsigned char 
  1784 ;;  j               1    2[BANK0 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      unsigned char 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 1F/0
  1791 ;;		On exit  : 1F/0
  1792 ;;		Unchanged: FFFE0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1794 ;;      Params:         0       1       0       0       0       0
  1795 ;;      Locals:         0       4       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0
  1797 ;;      Totals:         0       5       0       0       0       0
  1798 ;;Total ram usage:        5 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    2
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_sendDEV
  1805 ;;		_sendPHASE
  1806 ;;		_sendTemper
  1807 ;;		_sendVER
  1808 ;;		_processing_slipcmd
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811  0989                     _calculateCRC8:	
  1812                           
  1813                           ; Regs used in _calculateCRC8: [wreg+fsr1l-status,0]
  1814                           ;calculateCRC8@inData stored from wreg
  1815  0989  00A1               	movwf	calculateCRC8@inData
  1816                           
  1817                           ;util.c: 79: uchar i,j,crc=0;
  1818  098A  01A4               	clrf	calculateCRC8@crc
  1819                           
  1820                           ;util.c: 81: for(j=0;j<dataLen;j++)
  1821  098B  01A2               	clrf	calculateCRC8@j
  1822  098C                     l11586:	
  1823  098C  0820               	movf	calculateCRC8@dataLen,w
  1824  098D  0222               	subwf	calculateCRC8@j,w
  1825  098E  1803               	btfsc	3,0
  1826  098F  29A5               	goto	l11588
  1827                           
  1828                           ;util.c: 82: {
  1829                           ;util.c: 83: crc ^= *inData++;
  1830  0990  0821               	movf	calculateCRC8@inData,w
  1831  0991  0086               	movwf	6
  1832  0992  0187               	clrf	7
  1833  0993  0801               	movf	1,w
  1834  0994  06A4               	xorwf	calculateCRC8@crc,f
  1835  0995  0AA1               	incf	calculateCRC8@inData,f
  1836                           
  1837                           ;util.c: 84: for ( i = 0; i < 8; i++ )
  1838  0996  01A3               	clrf	calculateCRC8@i
  1839  0997                     l6028:	
  1840                           
  1841                           ;util.c: 85: {
  1842                           ;util.c: 86: if (( crc & 0x80 ) != 0 )
  1843  0997  1FA4               	btfss	calculateCRC8@crc,7
  1844  0998  299D               	goto	l6030
  1845  0999  3007               	movlw	7
  1846                           
  1847                           ;util.c: 87: {
  1848                           ;util.c: 88: crc <<= 1;
  1849  099A  35A4               	lslf	calculateCRC8@crc,f
  1850                           
  1851                           ;util.c: 89: crc ^= 0x07;
  1852  099B  06A4               	xorwf	calculateCRC8@crc,f
  1853                           
  1854                           ;util.c: 90: }
  1855  099C  299E               	goto	l11580
  1856  099D                     l6030:	
  1857                           
  1858                           ;util.c: 91: else
  1859                           ;util.c: 92: {
  1860                           ;util.c: 93: crc <<= 1;
  1861  099D  35A4               	lslf	calculateCRC8@crc,f
  1862  099E                     l11580:	
  1863  099E  3008               	movlw	8
  1864  099F  0AA3               	incf	calculateCRC8@i,f
  1865  09A0  0223               	subwf	calculateCRC8@i,w
  1866  09A1  1C03               	skipc
  1867  09A2  2997               	goto	l6028
  1868  09A3  0AA2               	incf	calculateCRC8@j,f
  1869  09A4  298C               	goto	l11586
  1870  09A5                     l11588:	
  1871                           
  1872                           ;util.c: 94: }
  1873                           ;util.c: 95: }
  1874                           ;util.c: 96: }
  1875                           ;util.c: 97: return crc;
  1876  09A5  0824               	movf	calculateCRC8@crc,w
  1877  09A6  0008               	return
  1878  09A7                     __end_of_calculateCRC8:	
  1879  09A7                     __ptext776:	
  1880 ;; =============== function _sendNACK ends ============
  1881                           
  1882                           
  1883 ;; *************** function _sendACK *****************
  1884 ;; Defined at:
  1885 ;;		line 41 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  idx             1   37[BANK0 ] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;		None               void
  1892 ;; Registers used:
  1893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 1F/0
  1896 ;;		On exit  : 1F/0
  1897 ;;		Unchanged: FFE00/0
  1898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1899 ;;      Params:         0       0       0       0       0       0
  1900 ;;      Locals:         0       1       0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0
  1902 ;;      Totals:         0       1       0       0       0       0
  1903 ;;Total ram usage:        1 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    7
  1906 ;; This function calls:
  1907 ;;		_rs485_send_data
  1908 ;; This function is called by:
  1909 ;;		_slip_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912  09A7                     _sendACK:	
  1913  09A7  30C0               	movlw	192
  1914                           
  1915                           ;rs485.c: 42: uchar idx = 0;
  1916                           
  1917                           ; Regs used in _sendACK: [wreg+fsr1l-status,0+pclath+cstack]
  1918  09A8  01C5               	clrf	sendACK@idx
  1919                           
  1920                           ;rs485.c: 44: gstSLIPSend.ucData[idx++] = 0xC0;
  1921  09A9  0021               	movlb	1	; select bank1
  1922  09AA  00A3               	movwf	(_gstSLIPSend^(0+128)+3)
  1923  09AB  0020               	movlb	0	; select bank0
  1924  09AC  0AC5               	incf	sendACK@idx,f
  1925                           
  1926                           ;rs485.c: 45: gstSLIPSend.ucData[idx++] = gucDevAddr;
  1927  09AD  0845               	movf	sendACK@idx,w
  1928  09AE  233E  3188         	fcall	PL23	;call to abstracted procedure
  1929  09B0  0AC5               	incf	sendACK@idx,f
  1930                           
  1931                           ;rs485.c: 46: gstSLIPSend.ucData[idx++] = 0x00;
  1932  09B1  0845               	movf	sendACK@idx,w
  1933  09B2  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  1934  09B3  0086               	movwf	6
  1935  09B4  0181               	clrf	1
  1936  09B5  0AC5               	incf	sendACK@idx,f
  1937                           
  1938                           ;rs485.c: 47: gstSLIPSend.ucData[idx++] = 0x00;
  1939  09B6  0845               	movf	sendACK@idx,w
  1940  09B7  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  1941  09B8  0086               	movwf	6
  1942  09B9  0181               	clrf	1
  1943  09BA  0AC5               	incf	sendACK@idx,f
  1944                           
  1945                           ;rs485.c: 48: gstSLIPSend.ucData[idx++] = 0xC0;
  1946  09BB  0845               	movf	sendACK@idx,w
  1947  09BC  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  1948  09BD  0086               	movwf	6
  1949  09BE  30C0               	movlw	192
  1950  09BF  0081               	movwf	1
  1951  09C0  0AC5               	incf	sendACK@idx,f
  1952                           
  1953                           ;rs485.c: 50: gstSLIPSend.ucSendTolCnt = idx;
  1954  09C1  0845               	movf	sendACK@idx,w
  1955  09C2  0021               	movlb	1	; select bank1
  1956  09C3  00A1               	movwf	(_gstSLIPSend^(0+128)+1)
  1957                           
  1958                           ;rs485.c: 51: rs485_send_data();
  1959  09C4  29C5               	ljmp	l12058
  1960  09C5                     __end_of_sendACK:	
  1961  09C5                     __ptext777:	
  1962 ;; =============== function _sendACK ends ============
  1963                           
  1964                           
  1965 ;; *************** function _rs485_send_data *****************
  1966 ;; Defined at:
  1967 ;;		line 16 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;		None
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  cc              4   33[BANK0 ] unsigned long 
  1972 ;; Return value:  Size  Location     Type
  1973 ;;		None               void
  1974 ;; Registers used:
  1975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 1F/1
  1978 ;;		On exit  : 1F/0
  1979 ;;		Unchanged: FFE00/0
  1980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1981 ;;      Params:         0       0       0       0       0       0
  1982 ;;      Locals:         0       4       0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0
  1984 ;;      Totals:         0       4       0       0       0       0
  1985 ;;Total ram usage:        4 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    6
  1988 ;; This function calls:
  1989 ;;		_sample_check
  1990 ;; This function is called by:
  1991 ;;		_sendACK
  1992 ;;		_sendNACK
  1993 ;;		_sendDEV
  1994 ;;		_sendPHASE
  1995 ;;		_sendTemper
  1996 ;;		_sendVER
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999  09C5                     _rs485_send_data:	
  2000  09C5                     l12058:	
  2001                           ; Regs used in _rs485_send_data: [wreg+fsr1l-status,0+pclath+cstack]
  2002                           
  2003                           
  2004                           ;rs485.c: 17: gstSLIPSend.ucSendingState = SLIP_PROCESS;
  2005  09C5  01A2               	clrf	(_gstSLIPSend^(0+128)+2)
  2006  09C6  0AA2               	incf	(_gstSLIPSend^(0+128)+2),f
  2007                           
  2008                           ;rs485.c: 18: gstSLIPSend.ucSentCnt = 0;
  2009  09C7  01A0               	clrf	_gstSLIPSend^(0+128)
  2010                           
  2011                           ;rs485.c: 20: RA7 = 1;
  2012  09C8  0020               	movlb	0	; select bank0
  2013  09C9  178C               	bsf	12,7
  2014                           
  2015                           ;rs485.c: 21: TXEN=1;
  2016  09CA  0023               	movlb	3	; select bank3
  2017  09CB  169E               	bsf	30,5
  2018                           
  2019                           ;rs485.c: 22: TXIE = 1;
  2020  09CC  0021               	movlb	1	; select bank1
  2021  09CD  1611               	bsf	17,4
  2022                           
  2023                           ;rs485.c: 29: ulong cc = 0;
  2024  09CE  2373  3188         	fcall	PL33	;call to abstracted procedure
  2025  09D0                     l12072:	
  2026                           ;rs485.c: 30: while((gstSLIPSend.ucSendingState == SLIP_PROCESS) && (cc++ < 0x0fffffff))
      +                           {sample_check();}
  2027                           
  2028  09D0  0021               	movlb	1	; select bank1
  2029  09D1  0B22               	decfsz	(_gstSLIPSend^(0+128)+2),w
  2030  09D2  29E7               	goto	l4489
  2031  09D3  0020               	movlb	0	; select bank0
  2032  09D4  2355  3188         	fcall	PL28	;call to abstracted procedure
  2033  09D6  1D03               	skipz
  2034  09D7  29E2               	goto	u1695
  2035  09D8  3000               	movlw	0
  2036  09D9  0243               	subwf	rs485_send_data@cc+2,w
  2037  09DA  1D03               	skipz
  2038  09DB  29E2               	goto	u1695
  2039  09DC  3000               	movlw	0
  2040  09DD  0242               	subwf	rs485_send_data@cc+1,w
  2041  09DE  1D03               	skipz
  2042  09DF  29E2               	goto	u1695
  2043  09E0  3000               	movlw	0
  2044  09E1  0241               	subwf	rs485_send_data@cc,w
  2045  09E2                     u1695:	
  2046  09E2  1803               	btfsc	3,0
  2047  09E3  29E7               	goto	l4489
  2048  09E4  2207  3188         	fcall	_sample_check
  2049  09E6  29D0               	goto	l12072
  2050  09E7                     l4489:	
  2051                           
  2052                           ;rs485.c: 31: cc = 0;
  2053  09E7  2373  3188         	fcall	PL33	;call to abstracted procedure
  2054                           
  2055                           ;rs485.c: 32: while((!TRMT)&&(cc++ < 0x0fffffff) ) {sample_check();}
  2056  09E9  29FD               	goto	l12078
  2057  09EA                     l12080:	
  2058  09EA  0020               	movlb	0	; select bank0
  2059  09EB  2355  3188         	fcall	PL28	;call to abstracted procedure
  2060  09ED  1D03               	skipz
  2061  09EE  29F9               	goto	u1715
  2062  09EF  3000               	movlw	0
  2063  09F0  0243               	subwf	rs485_send_data@cc+2,w
  2064  09F1  1D03               	skipz
  2065  09F2  29F9               	goto	u1715
  2066  09F3  3000               	movlw	0
  2067  09F4  0242               	subwf	rs485_send_data@cc+1,w
  2068  09F5  1D03               	skipz
  2069  09F6  29F9               	goto	u1715
  2070  09F7  3000               	movlw	0
  2071  09F8  0241               	subwf	rs485_send_data@cc,w
  2072  09F9                     u1715:	
  2073  09F9  1803               	btfsc	3,0
  2074  09FA  2A00               	goto	l4494
  2075  09FB  2207  3188         	fcall	_sample_check
  2076  09FD                     l12078:	
  2077  09FD  0023               	movlb	3	; select bank3
  2078  09FE  1C9E               	btfss	30,1
  2079  09FF  29EA               	goto	l12080
  2080  0A00                     l4494:	
  2081                           
  2082                           ;rs485.c: 35: TXIE = 0;
  2083  0A00  0021               	movlb	1	; select bank1
  2084  0A01  1211               	bcf	17,4
  2085                           
  2086                           ;rs485.c: 36: TXEN=0;
  2087  0A02  0023               	movlb	3	; select bank3
  2088  0A03  129E               	bcf	30,5
  2089                           
  2090                           ;rs485.c: 37: RA7 = 0;
  2091  0A04  0020               	movlb	0	; select bank0
  2092  0A05  138C               	bcf	12,7
  2093  0A06  0008               	return
  2094  0A07                     __end_of_rs485_send_data:	
  2095  0A07                     __ptext778:	
  2096 ;; =============== function _rs485_send_data ends ============
  2097                           
  2098                           
  2099 ;; *************** function _sample_check *****************
  2100 ;; Defined at:
  2101 ;;		line 266 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\main.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;		None               void
  2108 ;; Registers used:
  2109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 1E/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: FFE00/0
  2114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2115 ;;      Params:         0       0       0       0       0       0
  2116 ;;      Locals:         0       0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0       0
  2118 ;;      Totals:         0       0       0       0       0       0
  2119 ;;Total ram usage:        0 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    5
  2122 ;; This function calls:
  2123 ;;		_Sample_ADE7758
  2124 ;; This function is called by:
  2125 ;;		_rs485_send_data
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128  0A07                     _sample_check:	
  2129                           
  2130                           ;main.c: 267: if (Sample_flag == 1)
  2131                           
  2132                           ; Regs used in _sample_check: [wreg+fsr1l-status,0+pclath+cstack]
  2133  0A07  1CFB               	btfss	_Sample_flag/(0+8),_Sample_flag& (0+7)
  2134  0A08  0008               	return
  2135  0A09  3001               	movlw	1
  2136                           
  2137                           ;main.c: 268: {
  2138                           ;main.c: 269: Sample_flag = 0;
  2139  0A0A  10FB               	bcf	_Sample_flag/(0+8),_Sample_flag& (0+7)
  2140                           
  2141                           ;main.c: 270: Sample_ADE7758( 0x01 );
  2142  0A0B  2379  3188         	fcall	_Sample_ADE7758
  2143  0A0D  0064               	clrwdt	;#
  2144                           
  2145                           ;main.c: 273: Sample_ADE7758( 0x02 );
  2146  0A0E  3002               	movlw	2
  2147  0A0F  2379               	fcall	_Sample_ADE7758
  2148  0A10  0064               	clrwdt	;#
  2149  0A11  0008               	return
  2150  0A12                     __end_of_sample_check:	
  2151  0A12                     __ptext775:	
  2152 ;; =============== function _sendDEV ends ============
  2153                           
  2154                           
  2155 ;; *************** function _sendNACK *****************
  2156 ;; Defined at:
  2157 ;;		line 55 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;		None
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  idx             1   37[BANK0 ] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;		None               void
  2164 ;; Registers used:
  2165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 1F/0
  2168 ;;		On exit  : 1F/0
  2169 ;;		Unchanged: FFE00/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2171 ;;      Params:         0       0       0       0       0       0
  2172 ;;      Locals:         0       1       0       0       0       0
  2173 ;;      Temps:          0       0       0       0       0       0
  2174 ;;      Totals:         0       1       0       0       0       0
  2175 ;;Total ram usage:        1 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; Hardware stack levels required when called:    7
  2178 ;; This function calls:
  2179 ;;		_rs485_send_data
  2180 ;; This function is called by:
  2181 ;;		_slip_main
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184  0A12                     _sendNACK:	
  2185  0A12                     l12108:	
  2186                           ; Regs used in _sendNACK: [wreg+fsr1l-status,0+pclath+cstack]
  2187                           
  2188  0A12  30C0               	movlw	192
  2189                           
  2190                           ;rs485.c: 56: uchar idx = 0;
  2191  0A13  01C5               	clrf	sendNACK@idx
  2192                           
  2193                           ;rs485.c: 58: gstSLIPSend.ucData[idx++] = 0xC0;
  2194  0A14  0021               	movlb	1	; select bank1
  2195  0A15  00A3               	movwf	(_gstSLIPSend^(0+128)+3)
  2196  0A16  0020               	movlb	0	; select bank0
  2197  0A17  0AC5               	incf	sendNACK@idx,f
  2198                           
  2199                           ;rs485.c: 59: gstSLIPSend.ucData[idx++] = gucDevAddr;
  2200  0A18  0845               	movf	sendNACK@idx,w
  2201  0A19  233E  3188         	fcall	PL23	;call to abstracted procedure
  2202  0A1B  0AC5               	incf	sendNACK@idx,f
  2203                           
  2204                           ;rs485.c: 60: gstSLIPSend.ucData[idx++] = 0x80;
  2205  0A1C  0845               	movf	sendNACK@idx,w
  2206  0A1D  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2207  0A1E  0086               	movwf	6
  2208  0A1F  3080               	movlw	128
  2209                           
  2210                           ;rs485.c: 61: gstSLIPSend.ucData[idx++] = 0x89;
  2211  0A20  2367  3188         	fcall	PL30	;call to abstracted procedure
  2212  0A22  3089               	movlw	137
  2213                           
  2214                           ;rs485.c: 62: gstSLIPSend.ucData[idx++] = 0xC0;
  2215  0A23  2367  3188         	fcall	PL30	;call to abstracted procedure
  2216  0A25  30C0               	movlw	192
  2217  0A26  0081               	movwf	1
  2218  0A27  0AC5               	incf	sendNACK@idx,f
  2219                           
  2220                           ;rs485.c: 64: gstSLIPSend.ucSendTolCnt = idx;
  2221  0A28  0845               	movf	sendNACK@idx,w
  2222  0A29  0021               	movlb	1	; select bank1
  2223  0A2A  00A1               	movwf	(_gstSLIPSend^(0+128)+1)
  2224                           
  2225                           ;rs485.c: 65: rs485_send_data();
  2226  0A2B  29C5               	ljmp	l12058
  2227  0A2C                     __end_of_sendNACK:	
  2228  0A2C                     __ptext770:	
  2229 ;; =============== function _slip_main ends ============
  2230                           
  2231                           
  2232 ;; *************** function _run_cmd *****************
  2233 ;; Defined at:
  2234 ;;		line 253 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;		None
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  wregaddr        2   48[BANK0 ] unsigned int 
  2239 ;; Return value:  Size  Location     Type
  2240 ;;		None               void
  2241 ;; Registers used:
  2242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2243 ;; Tracked objects:
  2244 ;;		On entry : 1F/0
  2245 ;;		On exit  : 1E/0
  2246 ;;		Unchanged: FFE00/0
  2247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2248 ;;      Params:         0       0       0       0       0       0
  2249 ;;      Locals:         0       2       0       0       0       0
  2250 ;;      Temps:          0       0       0       0       0       0
  2251 ;;      Totals:         0       2       0       0       0       0
  2252 ;;Total ram usage:        2 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    8
  2255 ;; This function calls:
  2256 ;;		_sendTemper
  2257 ;;		_sendPHASE
  2258 ;;		_sendDEV
  2259 ;;		_sendVER
  2260 ;; This function is called by:
  2261 ;;		_slip_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264  0A2C                     _run_cmd:	
  2265  0A2C                     l12474:	
  2266                           ; Regs used in _run_cmd: [wreg-status,0+pclath+cstack]
  2267                           
  2268                           
  2269                           ;rs485.c: 280: break;
  2270                           
  2271                           ;rs485.c: 256: switch (gstSLIPRecv.ucData[2])
  2272  0A2C  0021               	movlb	1	; select bank1
  2273  0A2D  084F               	movf	(_gstSLIPRecv^(0+128)+4),w
  2274                           
  2275                           ; Switch size 1, requested type "space"
  2276                           ; Number of cases is 6, Range of values is 16 to 64
  2277                           ; switch strategies available:
  2278                           ; Name         Instructions Cycles
  2279                           ; simple_byte           19    10 (average)
  2280                           ; direct_byte          107     9 (fixed)
  2281                           ; jumptable            263     9 (fixed)
  2282                           ;	Chosen strategy is simple_byte
  2283  0A2E  3A10               	xorlw	16	; case 16
  2284  0A2F  1903               	skipnz
  2285  0A30  2A41               	goto	l12476
  2286  0A31  3A01               	xorlw	1	; case 17
  2287  0A32  1903               	skipnz
  2288  0A33  2A56               	goto	l4555
  2289  0A34  3A31               	xorlw	49	; case 32
  2290  0A35  1903               	skipnz
  2291  0A36  2A49               	goto	l12480
  2292  0A37  3A01               	xorlw	1	; case 33
  2293  0A38  1903               	skipnz
  2294  0A39  2A56               	goto	l4555
  2295  0A3A  3A11               	xorlw	17	; case 48
  2296  0A3B  1903               	skipnz
  2297  0A3C  2A54               	goto	l12486
  2298  0A3D  3A70               	xorlw	112	; case 64
  2299  0A3E  1903               	skipnz
  2300  0A3F  2A55               	goto	l12488
  2301  0A40  2A56               	goto	l4555
  2302  0A41                     l12476:	
  2303                           
  2304                           ;rs485.c: 259: wregaddr = (uint)((gstSLIPRecv.ucData[3] << 8) | gstSLIPRecv.ucData[4]);
  2305  0A41  0850               	movf	(_gstSLIPRecv^(0+128)+5),w
  2306                           
  2307                           ;rs485.c: 260: if ( wregaddr == 0xE000 )
  2308  0A42  235F  3188         	fcall	PL29	;call to abstracted procedure
  2309  0A44  3AE0               	xorlw	224
  2310  0A45  0450               	iorwf	run_cmd@wregaddr,w
  2311  0A46  1D03               	skipz
  2312  0A47  0008               	return
  2313                           
  2314                           ;rs485.c: 261: {
  2315                           ;rs485.c: 262: sendTemper();
  2316  0A48  2A9E               	ljmp	l12374
  2317  0A49                     l12480:	
  2318                           
  2319                           ;rs485.c: 267: if ( 8 == gstSLIPRecv.ucData[5] )
  2320  0A49  0852               	movf	(_gstSLIPRecv^(0+128)+7),w
  2321  0A4A  3A08               	xorlw	8
  2322  0A4B  1D03               	skipz
  2323  0A4C  0008               	return
  2324                           
  2325                           ;rs485.c: 268: {
  2326                           ;rs485.c: 269: wregaddr = (uint)((gstSLIPRecv.ucData[3] << 8) | gstSLIPRecv.ucData[4]);
  2327  0A4D  0850               	movf	(_gstSLIPRecv^(0+128)+5),w
  2328                           
  2329                           ;rs485.c: 270: sendPHASE(wregaddr);
  2330  0A4E  235F               	fcall	PL29	;call to abstracted procedure
  2331  0A4F  00C6               	movwf	?_sendPHASE+1
  2332  0A50  0850               	movf	run_cmd@wregaddr,w
  2333  0A51  00C5               	movwf	?_sendPHASE
  2334  0A52  3181  2909         	ljmp	l12196
  2335  0A54                     l12486:	
  2336                           
  2337                           ;rs485.c: 275: sendDEV();
  2338  0A54  2A57               	ljmp	l12134
  2339  0A55                     l12488:	
  2340                           ;rs485.c: 276: break;
  2341                           
  2342                           
  2343                           ;rs485.c: 279: sendVER();
  2344  0A55  2AE3               	ljmp	l12424
  2345  0A56                     l4555:	
  2346  0A56  0008               	return
  2347  0A57                     __end_of_run_cmd:	
  2348  0A57                     __ptext774:	
  2349 ;; =============== function _sendPHASE ends ============
  2350                           
  2351                           
  2352 ;; *************** function _sendDEV *****************
  2353 ;; Defined at:
  2354 ;;		line 69 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;		None
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;  idx             1   38[BANK0 ] unsigned char 
  2359 ;; Return value:  Size  Location     Type
  2360 ;;		None               void
  2361 ;; Registers used:
  2362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2363 ;; Tracked objects:
  2364 ;;		On entry : 1E/1
  2365 ;;		On exit  : 1F/0
  2366 ;;		Unchanged: FFE00/0
  2367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2368 ;;      Params:         0       0       0       0       0       0
  2369 ;;      Locals:         0       1       0       0       0       0
  2370 ;;      Temps:          0       1       0       0       0       0
  2371 ;;      Totals:         0       2       0       0       0       0
  2372 ;;Total ram usage:        2 bytes
  2373 ;; Hardware stack levels used:    1
  2374 ;; Hardware stack levels required when called:    7
  2375 ;; This function calls:
  2376 ;;		_calculateCRC8
  2377 ;;		_rs485_send_data
  2378 ;; This function is called by:
  2379 ;;		_run_cmd
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382  0A57                     _sendDEV:	
  2383  0A57                     l12134:	
  2384                           ; Regs used in _sendDEV: [wreg+fsr1l-status,0+pclath+cstack]
  2385                           
  2386                           
  2387                           ;rs485.c: 70: uchar idx = 0;
  2388  0A57  0020               	movlb	0	; select bank0
  2389  0A58  30C0               	movlw	192
  2390  0A59  01C6               	clrf	sendDEV@idx
  2391                           
  2392                           ;rs485.c: 72: gstSLIPSend.ucData[idx++] = 0xC0;
  2393  0A5A  0021               	movlb	1	; select bank1
  2394  0A5B  00A3               	movwf	(_gstSLIPSend^(0+128)+3)
  2395  0A5C  0020               	movlb	0	; select bank0
  2396  0A5D  0AC6               	incf	sendDEV@idx,f
  2397                           
  2398                           ;rs485.c: 73: gstSLIPSend.ucData[idx++] = gucDevAddr;
  2399  0A5E  0846               	movf	sendDEV@idx,w
  2400  0A5F  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2401  0A60  0086               	movwf	6
  2402  0A61  0187               	clrf	7
  2403  0A62  085F               	movf	_gucDevAddr,w
  2404                           
  2405                           ;rs485.c: 74: gstSLIPSend.ucData[idx++] = 0x00;
  2406  0A63  232C  3188         	fcall	PL17	;call to abstracted procedure
  2407  0A65  0181               	clrf	1
  2408  0A66  0AC6               	incf	sendDEV@idx,f
  2409                           
  2410                           ;rs485.c: 75: gstSLIPSend.ucData[idx++] = 0x00;
  2411  0A67  0846               	movf	sendDEV@idx,w
  2412  0A68  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2413  0A69  0086               	movwf	6
  2414  0A6A  0181               	clrf	1
  2415  0A6B  0AC6               	incf	sendDEV@idx,f
  2416                           
  2417                           ;rs485.c: 76: gstSLIPSend.ucData[idx++] = 0x00;
  2418  0A6C  0846               	movf	sendDEV@idx,w
  2419  0A6D  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2420  0A6E  0086               	movwf	6
  2421  0A6F  0181               	clrf	1
  2422  0A70  0AC6               	incf	sendDEV@idx,f
  2423                           
  2424                           ;rs485.c: 77: gstSLIPSend.ucData[idx++] = 'S';
  2425  0A71  0846               	movf	sendDEV@idx,w
  2426  0A72  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2427  0A73  0086               	movwf	6
  2428  0A74  3053               	movlw	83
  2429                           
  2430                           ;rs485.c: 78: gstSLIPSend.ucData[idx++] = 'S';
  2431  0A75  232C  3188         	fcall	PL17	;call to abstracted procedure
  2432  0A77  3053               	movlw	83
  2433                           
  2434                           ;rs485.c: 79: gstSLIPSend.ucData[idx++] = 'P';
  2435  0A78  232C  3188         	fcall	PL17	;call to abstracted procedure
  2436  0A7A  3050               	movlw	80
  2437                           
  2438                           ;rs485.c: 80: gstSLIPSend.ucData[idx++] = 'O';
  2439  0A7B  232C  3188         	fcall	PL17	;call to abstracted procedure
  2440  0A7D  304F               	movlw	79
  2441                           
  2442                           ;rs485.c: 81: gstSLIPSend.ucData[idx++] = 'W';
  2443  0A7E  232C  3188         	fcall	PL17	;call to abstracted procedure
  2444  0A80  3057               	movlw	87
  2445                           
  2446                           ;rs485.c: 82: gstSLIPSend.ucData[idx++] = 'E';
  2447  0A81  232C  3188         	fcall	PL17	;call to abstracted procedure
  2448  0A83  3045               	movlw	69
  2449                           
  2450                           ;rs485.c: 83: gstSLIPSend.ucData[idx++] = 'R';
  2451  0A84  232C  3188         	fcall	PL17	;call to abstracted procedure
  2452  0A86  3052               	movlw	82
  2453  0A87  0081               	movwf	1
  2454  0A88  0AC6               	incf	sendDEV@idx,f
  2455                           
  2456                           ;rs485.c: 84: gstSLIPSend.ucData[idx++] = calculateCRC8(&gstSLIPSend.ucData[2], idx-2);
  2457  0A89  0846               	movf	sendDEV@idx,w
  2458  0A8A  3EFE               	addlw	254
  2459  0A8B  00A0               	movwf	?_calculateCRC8
  2460  0A8C  30A5               	movlw	(_gstSLIPSend+5)& (0+255)
  2461  0A8D  2189  3188         	fcall	_calculateCRC8
  2462  0A8F  00C5               	movwf	??_sendDEV
  2463  0A90  0846               	movf	sendDEV@idx,w
  2464  0A91  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2465  0A92  0086               	movwf	6
  2466  0A93  0187               	clrf	7
  2467  0A94  0845               	movf	??_sendDEV,w
  2468                           
  2469                           ;rs485.c: 85: gstSLIPSend.ucData[idx++] = 0xC0;
  2470  0A95  232C  3188         	fcall	PL17	;call to abstracted procedure
  2471  0A97  30C0               	movlw	192
  2472  0A98  0081               	movwf	1
  2473  0A99  0AC6               	incf	sendDEV@idx,f
  2474                           
  2475                           ;rs485.c: 87: gstSLIPSend.ucSendTolCnt = idx;
  2476  0A9A  0846               	movf	sendDEV@idx,w
  2477  0A9B  0021               	movlb	1	; select bank1
  2478  0A9C  00A1               	movwf	(_gstSLIPSend^(0+128)+1)
  2479                           
  2480                           ;rs485.c: 88: rs485_send_data();
  2481  0A9D  29C5               	ljmp	l12058
  2482  0A9E                     __end_of_sendDEV:	
  2483  0A9E                     __ptext772:	
  2484 ;; =============== function _sendVER ends ============
  2485                           
  2486                           
  2487 ;; *************** function _sendTemper *****************
  2488 ;; Defined at:
  2489 ;;		line 163 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  idx             1   38[BANK0 ] unsigned char 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;		None               void
  2496 ;; Registers used:
  2497 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 1F/0
  2500 ;;		On exit  : 1F/0
  2501 ;;		Unchanged: FFE00/0
  2502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2503 ;;      Params:         0       0       0       0       0       0
  2504 ;;      Locals:         0       1       0       0       0       0
  2505 ;;      Temps:          0       1       0       0       0       0
  2506 ;;      Totals:         0       2       0       0       0       0
  2507 ;;Total ram usage:        2 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    7
  2510 ;; This function calls:
  2511 ;;		_calculateCRC8
  2512 ;;		_rs485_send_data
  2513 ;; This function is called by:
  2514 ;;		_run_cmd
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517  0A9E                     _sendTemper:	
  2518  0A9E                     l12374:	
  2519                           ; Regs used in _sendTemper: [wreg-status,0+pclath+cstack]
  2520                           
  2521  0A9E  30C0               	movlw	192
  2522                           
  2523                           ;rs485.c: 164: uchar idx = 0;
  2524  0A9F  01C6               	clrf	sendTemper@idx
  2525                           
  2526                           ;rs485.c: 166: gstSLIPSend.ucData[idx++] = 0xC0;
  2527  0AA0  0021               	movlb	1	; select bank1
  2528  0AA1  00A3               	movwf	(_gstSLIPSend^(0+128)+3)
  2529  0AA2  0020               	movlb	0	; select bank0
  2530  0AA3  0AC6               	incf	sendTemper@idx,f
  2531                           
  2532                           ;rs485.c: 167: gstSLIPSend.ucData[idx++] = gucDevAddr;
  2533  0AA4  0846               	movf	sendTemper@idx,w
  2534  0AA5  233E  3188         	fcall	PL23	;call to abstracted procedure
  2535  0AA7  0AC6               	incf	sendTemper@idx,f
  2536                           
  2537                           ;rs485.c: 168: gstSLIPSend.ucData[idx++] = 0x00;
  2538  0AA8  0846               	movf	sendTemper@idx,w
  2539  0AA9  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2540  0AAA  0086               	movwf	6
  2541  0AAB  0181               	clrf	1
  2542  0AAC  0AC6               	incf	sendTemper@idx,f
  2543                           
  2544                           ;rs485.c: 169: gstSLIPSend.ucData[idx++] = 0x00;
  2545  0AAD  0846               	movf	sendTemper@idx,w
  2546  0AAE  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2547  0AAF  0086               	movwf	6
  2548  0AB0  0181               	clrf	1
  2549  0AB1  0AC6               	incf	sendTemper@idx,f
  2550                           
  2551                           ;rs485.c: 170: gstSLIPSend.ucData[idx++] = 0x00;
  2552  0AB2  0846               	movf	sendTemper@idx,w
  2553  0AB3  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2554  0AB4  0086               	movwf	6
  2555  0AB5  0181               	clrf	1
  2556  0AB6  0AC6               	incf	sendTemper@idx,f
  2557                           
  2558                           ;rs485.c: 171: gstSLIPSend.ucData[idx++] = 0x00;
  2559  0AB7  0846               	movf	sendTemper@idx,w
  2560  0AB8  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2561  0AB9  0086               	movwf	6
  2562  0ABA  0181               	clrf	1
  2563  0ABB  0AC6               	incf	sendTemper@idx,f
  2564                           
  2565                           ;rs485.c: 172: gstSLIPSend.ucData[idx++] = 0x00;
  2566  0ABC  0846               	movf	sendTemper@idx,w
  2567  0ABD  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2568  0ABE  0086               	movwf	6
  2569  0ABF  0181               	clrf	1
  2570  0AC0  0AC6               	incf	sendTemper@idx,f
  2571                           
  2572                           ;rs485.c: 173: gstSLIPSend.ucData[idx++] = ADE7758Data[0].Temper;
  2573  0AC1  0846               	movf	sendTemper@idx,w
  2574  0AC2  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2575  0AC3  0086               	movwf	6
  2576  0AC4  3030               	movlw	48
  2577                           
  2578                           ;rs485.c: 174: gstSLIPSend.ucData[idx++] = ADE7758Data[1].Temper;
  2579  0AC5  2344  3188         	fcall	PL25	;call to abstracted procedure
  2580  0AC7  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2581  0AC8  0086               	movwf	6
  2582  0AC9  3061               	movlw	97
  2583                           
  2584                           ;rs485.c: 175: gstSLIPSend.ucData[idx++] = calculateCRC8(&gstSLIPSend.ucData[2], idx-2);
  2585  0ACA  2344  3188         	fcall	PL25	;call to abstracted procedure
  2586  0ACC  3EFE               	addlw	254
  2587  0ACD  00A0               	movwf	?_calculateCRC8
  2588  0ACE  30A5               	movlw	(_gstSLIPSend+5)& (0+255)
  2589  0ACF  2189  3188         	fcall	_calculateCRC8
  2590  0AD1  00C5               	movwf	??_sendTemper
  2591  0AD2  0846               	movf	sendTemper@idx,w
  2592  0AD3  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2593  0AD4  0086               	movwf	6
  2594  0AD5  0187               	clrf	7
  2595  0AD6  0845               	movf	??_sendTemper,w
  2596  0AD7  0081               	movwf	1
  2597  0AD8  0AC6               	incf	sendTemper@idx,f
  2598                           
  2599                           ;rs485.c: 176: gstSLIPSend.ucData[idx++] = 0xC0;
  2600  0AD9  0846               	movf	sendTemper@idx,w
  2601  0ADA  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2602  0ADB  0086               	movwf	6
  2603  0ADC  30C0               	movlw	192
  2604  0ADD  0081               	movwf	1
  2605  0ADE  0AC6               	incf	sendTemper@idx,f
  2606                           
  2607                           ;rs485.c: 178: gstSLIPSend.ucSendTolCnt = idx;
  2608  0ADF  0846               	movf	sendTemper@idx,w
  2609  0AE0  0021               	movlb	1	; select bank1
  2610  0AE1  00A1               	movwf	(_gstSLIPSend^(0+128)+1)
  2611                           
  2612                           ;rs485.c: 179: rs485_send_data();
  2613  0AE2  29C5               	ljmp	l12058
  2614  0AE3                     __end_of_sendTemper:	
  2615  0AE3                     __ptext771:	
  2616 ;; =============== function _run_cmd ends ============
  2617                           
  2618                           
  2619 ;; *************** function _sendVER *****************
  2620 ;; Defined at:
  2621 ;;		line 183 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;		None
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  idx             1   38[BANK0 ] unsigned char 
  2626 ;; Return value:  Size  Location     Type
  2627 ;;		None               void
  2628 ;; Registers used:
  2629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2630 ;; Tracked objects:
  2631 ;;		On entry : 1E/1
  2632 ;;		On exit  : 1F/0
  2633 ;;		Unchanged: FFE00/0
  2634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2635 ;;      Params:         0       0       0       0       0       0
  2636 ;;      Locals:         0       1       0       0       0       0
  2637 ;;      Temps:          0       1       0       0       0       0
  2638 ;;      Totals:         0       2       0       0       0       0
  2639 ;;Total ram usage:        2 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    7
  2642 ;; This function calls:
  2643 ;;		_calculateCRC8
  2644 ;;		_rs485_send_data
  2645 ;; This function is called by:
  2646 ;;		_run_cmd
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649  0AE3                     _sendVER:	
  2650  0AE3                     l12424:	
  2651                           ; Regs used in _sendVER: [wreg+fsr1l-status,0+pclath+cstack]
  2652                           
  2653                           
  2654                           ;rs485.c: 184: uchar idx = 0;
  2655  0AE3  0020               	movlb	0	; select bank0
  2656  0AE4  30C0               	movlw	192
  2657  0AE5  01C6               	clrf	sendVER@idx
  2658                           
  2659                           ;rs485.c: 186: gstSLIPSend.ucData[idx++] = 0xC0;
  2660  0AE6  0021               	movlb	1	; select bank1
  2661  0AE7  00A3               	movwf	(_gstSLIPSend^(0+128)+3)
  2662  0AE8  0020               	movlb	0	; select bank0
  2663  0AE9  0AC6               	incf	sendVER@idx,f
  2664                           
  2665                           ;rs485.c: 187: gstSLIPSend.ucData[idx++] = gucDevAddr;
  2666  0AEA  0846               	movf	sendVER@idx,w
  2667  0AEB  233E               	fcall	PL23	;call to abstracted procedure
  2668  0AEC  0AC6               	incf	sendVER@idx,f
  2669                           
  2670                           ;rs485.c: 188: gstSLIPSend.ucData[idx++] = 0x00;
  2671  0AED  0846               	movf	sendVER@idx,w
  2672  0AEE  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2673  0AEF  0086               	movwf	6
  2674  0AF0  0181               	clrf	1
  2675  0AF1  0AC6               	incf	sendVER@idx,f
  2676                           
  2677                           ;rs485.c: 189: gstSLIPSend.ucData[idx++] = 0x00;
  2678  0AF2  0846               	movf	sendVER@idx,w
  2679  0AF3  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2680  0AF4  0086               	movwf	6
  2681  0AF5  0181               	clrf	1
  2682  0AF6  0AC6               	incf	sendVER@idx,f
  2683                           
  2684                           ;rs485.c: 190: gstSLIPSend.ucData[idx++] = 0x00;
  2685  0AF7  0846               	movf	sendVER@idx,w
  2686  0AF8  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2687  0AF9  0086               	movwf	6
  2688  0AFA  0181               	clrf	1
  2689  0AFB  0AC6               	incf	sendVER@idx,f
  2690                           
  2691                           ;rs485.c: 191: gstSLIPSend.ucData[idx++] = gucPowerVer[0];
  2692  0AFC  0846               	movf	sendVER@idx,w
  2693  0AFD  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2694  0AFE  0086               	movwf	6
  2695  0AFF  30B5               	movlw	low (_gucPowerVer| (0+32768))
  2696  0B00  3180               	movlp	high __stringtab
  2697  0B01  000A               	callw
  2698  0B02  3188               	pagesel	$
  2699                           
  2700                           ;rs485.c: 192: gstSLIPSend.ucData[idx++] = gucPowerVer[1];
  2701  0B03  234F               	fcall	PL26	;call to abstracted procedure
  2702  0B04  30B6               	movlw	low ((_gucPowerVer| (0+32768)+1))
  2703  0B05  0187               	clrf	7
  2704  0B06  3180               	movlp	high __stringtab
  2705  0B07  000A               	callw
  2706  0B08  3188               	pagesel	$
  2707                           
  2708                           ;rs485.c: 193: gstSLIPSend.ucData[idx++] = gucPowerVer[2];
  2709  0B09  234F               	fcall	PL26	;call to abstracted procedure
  2710  0B0A  30B7               	movlw	low ((_gucPowerVer| (0+32768)+2))
  2711  0B0B  0187               	clrf	7
  2712  0B0C  3180               	movlp	high __stringtab
  2713  0B0D  000A               	callw
  2714  0B0E  3188               	pagesel	$
  2715                           
  2716                           ;rs485.c: 194: gstSLIPSend.ucData[idx++] = gucPowerVer[3];
  2717  0B0F  234F               	fcall	PL26	;call to abstracted procedure
  2718  0B10  30B8               	movlw	low ((_gucPowerVer| (0+32768)+3))
  2719  0B11  0187               	clrf	7
  2720  0B12  3180               	movlp	high __stringtab
  2721  0B13  000A               	callw
  2722  0B14  3188               	pagesel	$
  2723  0B15  0081               	movwf	1
  2724  0B16  0AC6               	incf	sendVER@idx,f
  2725                           
  2726                           ;rs485.c: 195: gstSLIPSend.ucData[idx++] = calculateCRC8(&gstSLIPSend.ucData[2], idx-2);
  2727  0B17  0846               	movf	sendVER@idx,w
  2728  0B18  3EFE               	addlw	254
  2729  0B19  00A0               	movwf	?_calculateCRC8
  2730  0B1A  30A5               	movlw	(_gstSLIPSend+5)& (0+255)
  2731  0B1B  2189  3188         	fcall	_calculateCRC8
  2732  0B1D  00C5               	movwf	??_sendVER
  2733  0B1E  0846               	movf	sendVER@idx,w
  2734  0B1F  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2735  0B20  0086               	movwf	6
  2736  0B21  0187               	clrf	7
  2737  0B22  0845               	movf	??_sendVER,w
  2738                           
  2739                           ;rs485.c: 196: gstSLIPSend.ucData[idx++] = 0xC0;
  2740  0B23  234F  3188         	fcall	PL26	;call to abstracted procedure
  2741  0B25  30C0               	movlw	192
  2742  0B26  0081               	movwf	1
  2743  0B27  0AC6               	incf	sendVER@idx,f
  2744                           
  2745                           ;rs485.c: 198: gstSLIPSend.ucSendTolCnt = idx;
  2746  0B28  0846               	movf	sendVER@idx,w
  2747  0B29  0021               	movlb	1	; select bank1
  2748  0B2A  00A1               	movwf	(_gstSLIPSend^(0+128)+1)
  2749                           
  2750                           ;rs485.c: 199: rs485_send_data();
  2751  0B2B  29C5               	ljmp	l12058
  2752  0B2C                     __end_of_sendVER:	
  2753  0B2C                     PL17:	
  2754  0B2C  0081               	movwf	1
  2755  0B2D  0AC6               	incf	sendDEV@idx,f
  2756  0B2E  0846               	movf	sendDEV@idx,w
  2757  0B2F  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2758  0B30  0086               	movwf	6
  2759  0B31  0008               	return
  2760  0B32                     PL22:	
  2761  0B32  0021               	movlb	1	; select bank1
  2762  0B33  084B               	movf	_gstSLIPRecv^(0+128),w
  2763  0B34  3EFF               	addlw	255
  2764  0B35  0020               	movlb	0	; select bank0
  2765  0B36  00A5               	movwf	??_processing_slipcmd
  2766  0B37  30FF               	movlw	255
  2767  0B38  1803               	skipnc
  2768  0B39  3000               	movlw	0
  2769  0B3A  00A6               	movwf	??_processing_slipcmd+1
  2770  0B3B  3A80               	xorlw	128
  2771  0B3C  3C80               	sublw	128
  2772  0B3D  0008               	return
  2773  0B3E                     PL23:	
  2774  0B3E  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2775  0B3F  0086               	movwf	6
  2776  0B40  0187               	clrf	7
  2777  0B41  085F               	movf	_gucDevAddr,w
  2778  0B42  0081               	movwf	1
  2779  0B43  0008               	return
  2780  0B44                     PL25:	
  2781  0B44  3E0E               	addlw	14
  2782  0B45  0084               	movwf	4
  2783  0B46  3021               	movlw	33
  2784  0B47  1803               	skipnc
  2785  0B48  3022               	movlw	34
  2786  0B49  0085               	movwf	5
  2787  0B4A  0800               	movf	0,w
  2788  0B4B  0081               	movwf	1
  2789  0B4C  0AC6               	incf	sendTemper@idx,f
  2790  0B4D  0846               	movf	sendTemper@idx,w
  2791  0B4E  0008               	return
  2792  0B4F                     PL26:	
  2793  0B4F  0081               	movwf	1
  2794  0B50  0AC6               	incf	sendVER@idx,f
  2795  0B51  0846               	movf	sendVER@idx,w
  2796  0B52  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2797  0B53  0086               	movwf	6
  2798  0B54  0008               	return
  2799  0B55                     PL28:	
  2800  0B55  0AC1               	incf	rs485_send_data@cc,f
  2801  0B56  1903               	skipnz
  2802  0B57  0AC2               	incf	rs485_send_data@cc+1,f
  2803  0B58  1903               	skipnz
  2804  0B59  0AC3               	incf	rs485_send_data@cc+2,f
  2805  0B5A  1903               	skipnz
  2806  0B5B  0AC4               	incf	rs485_send_data@cc+3,f
  2807  0B5C  3010               	movlw	16
  2808  0B5D  0244               	subwf	rs485_send_data@cc+3,w
  2809  0B5E  0008               	return
  2810  0B5F                     PL29:	
  2811  0B5F  0020               	movlb	0	; select bank0
  2812  0B60  00D1               	movwf	run_cmd@wregaddr+1
  2813  0B61  0021               	movlb	1	; select bank1
  2814  0B62  0851               	movf	(_gstSLIPRecv^(0+128)+6),w
  2815  0B63  0020               	movlb	0	; select bank0
  2816  0B64  00D0               	movwf	run_cmd@wregaddr
  2817  0B65  0851               	movf	run_cmd@wregaddr+1,w
  2818  0B66  0008               	return
  2819  0B67                     PL30:	
  2820  0B67  0081               	movwf	1
  2821  0B68  0AC5               	incf	sendNACK@idx,f
  2822  0B69  0845               	movf	sendNACK@idx,w
  2823  0B6A  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  2824  0B6B  0086               	movwf	6
  2825  0B6C  0008               	return
  2826  0B6D                     PL31:	
  2827  0B6D  082A               	movf	processing_slipcmd@i,w
  2828  0B6E  3ECD               	addlw	(_gstSLIPRecv+2)& (0+255)
  2829  0B6F  0086               	movwf	6
  2830  0B70  0187               	clrf	7
  2831  0B71  0801               	movf	1,w
  2832  0B72  0008               	return
  2833  0B73                     PL33:	
  2834  0B73  0020               	movlb	0	; select bank0
  2835  0B74  01C1               	clrf	rs485_send_data@cc
  2836  0B75  01C2               	clrf	rs485_send_data@cc+1
  2837  0B76  01C3               	clrf	rs485_send_data@cc+2
  2838  0B77  01C4               	clrf	rs485_send_data@cc+3
  2839  0B78  0008               	return
  2840  0B79                     __ptext781:	
  2841 ;; =============== function _AD7758_check_init ends ============
  2842                           
  2843                           
  2844 ;; *************** function _Sample_ADE7758 *****************
  2845 ;; Defined at:
  2846 ;;		line 128 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\ADE7758.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  chip            1    wreg     unsigned char 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  chip            1   32[BANK0 ] unsigned char 
  2851 ;;  sum             2   30[BANK0 ] unsigned int 
  2852 ;; Return value:  Size  Location     Type
  2853 ;;		None               void
  2854 ;; Registers used:
  2855 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 1F/0
  2859 ;;		Unchanged: FFFE0/0
  2860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2861 ;;      Params:         0       0       0       0       0       0
  2862 ;;      Locals:         0       3       0       0       0       0
  2863 ;;      Temps:          0      20       0       0       0       0
  2864 ;;      Totals:         0      23       0       0       0       0
  2865 ;;Total ram usage:       23 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    4
  2868 ;; This function calls:
  2869 ;;		_AD7758_CS
  2870 ;;		_AD7758_GetData
  2871 ;;		___bmul
  2872 ;;		_AD7758_SendData
  2873 ;; This function is called by:
  2874 ;;		_thread_Sample
  2875 ;;		_sample_check
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878  0B79                     _Sample_ADE7758:	
  2879                           
  2880                           ; Regs used in _Sample_ADE7758: [wreg+fsr1l-status,0+pclath+cstack]
  2881                           ;Sample_ADE7758@chip stored from wreg
  2882  0B79  0020               	movlb	0	; select bank0
  2883  0B7A  00C0               	movwf	Sample_ADE7758@chip
  2884                           
  2885                           ;ADE7758.c: 129: uint sum;
  2886                           ;ADE7758.c: 132: AD7758_CS(chip, 1);
  2887  0B7B  01A8               	clrf	?_AD7758_CS
  2888  0B7C  0AA8               	incf	?_AD7758_CS,f
  2889  0B7D  2091  3188         	fcall	_AD7758_CS
  2890                           
  2891                           ;ADE7758.c: 135: AD7758_GetData(0x10, 2, chip);
  2892  0B7F  3002               	movlw	2
  2893  0B80  00A6               	movwf	?_AD7758_GetData
  2894  0B81  0840               	movf	Sample_ADE7758@chip,w
  2895  0B82  00A7               	movwf	?_AD7758_GetData+1
  2896  0B83  3010               	movlw	16
  2897  0B84  262A  3188         	fcall	_AD7758_GetData
  2898                           
  2899                           ;ADE7758.c: 136: if( FreqPhase[chip-1] == 1 )
  2900  0B86  0840               	movf	Sample_ADE7758@chip,w
  2901  0B87  3E59               	addlw	(_FreqPhase+-1)& (0+255)
  2902  0B88  0086               	movwf	6
  2903  0B89  0187               	clrf	7
  2904  0B8A  0B01               	decfsz	1,w
  2905  0B8B  2BAB               	goto	l11924
  2906                           
  2907                           ;ADE7758.c: 137: {
  2908                           ;ADE7758.c: 138: ADE7758Data[chip-1].PhaseA.Frequency[0]=ReadData[0];
  2909  0B8C  0854               	movf	_ReadData,w
  2910  0B8D  2791  3188         	fcall	PL14	;call to abstracted procedure
  2911  0B8F  261E  3188         	fcall	___bmul
  2912  0B91  2779  3188         	fcall	PL5	;call to abstracted procedure
  2913  0B93  0086               	movwf	6
  2914  0B94  082C               	movf	??_Sample_ADE7758+2,w
  2915  0B95  0087               	movwf	7
  2916  0B96  082A               	movf	??_Sample_ADE7758,w
  2917  0B97  0081               	movwf	1
  2918                           
  2919                           ;ADE7758.c: 139: ADE7758Data[chip-1].PhaseA.Frequency[1]=ReadData[1];
  2920  0B98  0855               	movf	_ReadData+1,w
  2921  0B99  2791  3188         	fcall	PL14	;call to abstracted procedure
  2922  0B9B  261E  3188         	fcall	___bmul
  2923  0B9D  2779  3188         	fcall	PL5	;call to abstracted procedure
  2924  0B9F  3E01               	addlw	1
  2925  0BA0  2723  3188         	fcall	PL2	;call to abstracted procedure
  2926                           
  2927                           ;ADE7758.c: 140: FreqPhase[chip-1] = 2;
  2928  0BA2  0840               	movf	Sample_ADE7758@chip,w
  2929  0BA3  3E59               	addlw	(_FreqPhase+-1)& (0+255)
  2930  0BA4  0086               	movwf	6
  2931  0BA5  3002               	movlw	2
  2932  0BA6  0187               	clrf	7
  2933  0BA7  0081               	movwf	1
  2934                           
  2935                           ;ADE7758.c: 141: SendData[0] = 0x01;
  2936  0BA8  01D7               	clrf	_SendData
  2937  0BA9  0AD7               	incf	_SendData,f
  2938  0BAA  2BED               	goto	l11942
  2939  0BAB                     l11924:	
  2940                           ;ADE7758.c: 143: }
  2941                           
  2942                           ;ADE7758.c: 142: AD7758_SendData(0x14,1,chip);
  2943                           
  2944                           
  2945                           ;ADE7758.c: 144: else if( FreqPhase[chip-1] == 2 )
  2946  0BAB  27C4  3188         	fcall	PL35	;call to abstracted procedure
  2947  0BAD  3A02               	xorlw	2
  2948  0BAE  1D03               	skipz
  2949  0BAF  2BCD               	goto	l11934
  2950                           
  2951                           ;ADE7758.c: 145: {
  2952                           ;ADE7758.c: 146: ADE7758Data[chip-1].PhaseB.Frequency[0]=ReadData[0];
  2953  0BB0  0854               	movf	_ReadData,w
  2954  0BB1  2791  3188         	fcall	PL14	;call to abstracted procedure
  2955  0BB3  261E  3188         	fcall	___bmul
  2956  0BB5  2779  3188         	fcall	PL5	;call to abstracted procedure
  2957  0BB7  3E10               	addlw	16
  2958  0BB8  2723  3188         	fcall	PL2	;call to abstracted procedure
  2959                           
  2960                           ;ADE7758.c: 147: ADE7758Data[chip-1].PhaseB.Frequency[1]=ReadData[1];
  2961  0BBA  0855               	movf	_ReadData+1,w
  2962  0BBB  2791  3188         	fcall	PL14	;call to abstracted procedure
  2963  0BBD  261E  3188         	fcall	___bmul
  2964  0BBF  2779  3188         	fcall	PL5	;call to abstracted procedure
  2965  0BC1  3E11               	addlw	17
  2966  0BC2  2723  3188         	fcall	PL2	;call to abstracted procedure
  2967                           
  2968                           ;ADE7758.c: 148: FreqPhase[chip-1] = 3;
  2969  0BC4  0840               	movf	Sample_ADE7758@chip,w
  2970  0BC5  3E59               	addlw	(_FreqPhase+-1)& (0+255)
  2971  0BC6  0086               	movwf	6
  2972  0BC7  3003               	movlw	3
  2973  0BC8  0187               	clrf	7
  2974  0BC9  0081               	movwf	1
  2975                           
  2976                           ;ADE7758.c: 149: SendData[0] = 0x02;
  2977  0BCA  3002               	movlw	2
  2978  0BCB  00D7               	movwf	_SendData
  2979  0BCC  2BED               	goto	l11942
  2980  0BCD                     l11934:	
  2981                           ;ADE7758.c: 151: }
  2982                           
  2983                           ;ADE7758.c: 150: AD7758_SendData(0x14,1,chip);
  2984                           
  2985                           
  2986                           ;ADE7758.c: 152: else if( FreqPhase[chip-1] == 3 )
  2987  0BCD  27C4  3188         	fcall	PL35	;call to abstracted procedure
  2988  0BCF  3A03               	xorlw	3
  2989  0BD0  1D03               	skipz
  2990  0BD1  2BF4               	goto	l11944
  2991                           
  2992                           ;ADE7758.c: 153: {
  2993                           ;ADE7758.c: 154: ADE7758Data[chip-1].PhaseC.Frequency[0]=ReadData[0];
  2994  0BD2  0854               	movf	_ReadData,w
  2995  0BD3  2791  3188         	fcall	PL14	;call to abstracted procedure
  2996  0BD5  261E  3188         	fcall	___bmul
  2997  0BD7  2779  3188         	fcall	PL5	;call to abstracted procedure
  2998  0BD9  3E20               	addlw	32
  2999  0BDA  2723  3188         	fcall	PL2	;call to abstracted procedure
  3000                           
  3001                           ;ADE7758.c: 155: ADE7758Data[chip-1].PhaseC.Frequency[1]=ReadData[1];
  3002  0BDC  0855               	movf	_ReadData+1,w
  3003  0BDD  2791  3188         	fcall	PL14	;call to abstracted procedure
  3004  0BDF  261E  3188         	fcall	___bmul
  3005  0BE1  2779  3188         	fcall	PL5	;call to abstracted procedure
  3006  0BE3  3E21               	addlw	33
  3007  0BE4  2723  3188         	fcall	PL2	;call to abstracted procedure
  3008                           
  3009                           ;ADE7758.c: 156: FreqPhase[chip-1] = 1;
  3010  0BE6  0840               	movf	Sample_ADE7758@chip,w
  3011  0BE7  3E59               	addlw	(_FreqPhase+-1)& (0+255)
  3012  0BE8  0086               	movwf	6
  3013  0BE9  0187               	clrf	7
  3014  0BEA  0181               	clrf	1
  3015  0BEB  0A81               	incf	1,f
  3016                           
  3017                           ;ADE7758.c: 157: SendData[0] = 0x00;
  3018  0BEC  01D7               	clrf	_SendData
  3019  0BED                     l11942:	
  3020                           
  3021                           ;ADE7758.c: 158: AD7758_SendData(0x14,1,chip);
  3022  0BED  01A6               	clrf	?_AD7758_SendData
  3023  0BEE  0AA6               	incf	?_AD7758_SendData,f
  3024  0BEF  0840               	movf	Sample_ADE7758@chip,w
  3025  0BF0  00A7               	movwf	?_AD7758_SendData+1
  3026  0BF1  3014               	movlw	20
  3027  0BF2  26DF  3188         	fcall	_AD7758_SendData
  3028  0BF4                     l11944:	
  3029                           
  3030                           ;ADE7758.c: 159: }
  3031                           ;ADE7758.c: 162: AD7758_GetData(0x01, 2, chip);
  3032  0BF4  3002               	movlw	2
  3033  0BF5  00A6               	movwf	?_AD7758_GetData
  3034  0BF6  0840               	movf	Sample_ADE7758@chip,w
  3035  0BF7  00A7               	movwf	?_AD7758_GetData+1
  3036  0BF8  3001               	movlw	1
  3037  0BF9  262A  3188         	fcall	_AD7758_GetData
  3038                           
  3039                           ;ADE7758.c: 163: if ( ReadData[0]&0x80 )
  3040  0BFB  1FD4               	btfss	_ReadData,7
  3041  0BFC  2C00               	goto	l11950
  3042                           
  3043                           ;ADE7758.c: 164: {
  3044                           ;ADE7758.c: 165: ReadData[0] = ~ReadData[0];
  3045  0BFD  30FF               	movlw	255
  3046  0BFE  06D4               	xorwf	_ReadData,f
  3047                           
  3048                           ;ADE7758.c: 166: ReadData[1] = ~ReadData[1];
  3049  0BFF  06D5               	xorwf	_ReadData+1,f
  3050  0C00                     l11950:	
  3051                           
  3052                           ;ADE7758.c: 167: }
  3053                           ;ADE7758.c: 169: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseA.Active_
      +                          Power[0]) << 8) +
  3054                           ;ADE7758.c: 170: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseA.Active_Power[1])) >> 1
      +                          );
  3055  0C00  3031               	movlw	49
  3056  0C01  00A0               	movwf	?___bmul
  3057  0C02  0840               	movf	Sample_ADE7758@chip,w
  3058  0C03  261E  3188         	fcall	___bmul
  3059  0C05  279E  3188         	fcall	PL16	;call to abstracted procedure
  3060  0C07  3E08               	addlw	8
  3061  0C08  2759  3188         	fcall	PL4	;call to abstracted procedure
  3062  0C0A  261E  3188         	fcall	___bmul
  3063  0C0C  2796  3188         	fcall	PL15	;call to abstracted procedure
  3064  0C0E  3E09               	addlw	9
  3065                           
  3066                           ;ADE7758.c: 172: ADE7758Data[chip-1].PhaseA.Active_Power[0] = (uchar)(sum>>8);
  3067  0C0F  272E  3188         	fcall	PL3	;call to abstracted procedure
  3068  0C11  261E  3188         	fcall	___bmul
  3069  0C13  2779  3188         	fcall	PL5	;call to abstracted procedure
  3070  0C15  3E08               	addlw	8
  3071  0C16  2723  3188         	fcall	PL2	;call to abstracted procedure
  3072                           
  3073                           ;ADE7758.c: 173: ADE7758Data[chip-1].PhaseA.Active_Power[1] = (uchar)sum;
  3074  0C18  083E               	movf	Sample_ADE7758@sum,w
  3075  0C19  2791  3188         	fcall	PL14	;call to abstracted procedure
  3076  0C1B  261E  3188         	fcall	___bmul
  3077  0C1D  2779  3188         	fcall	PL5	;call to abstracted procedure
  3078  0C1F  3E09               	addlw	9
  3079  0C20  2723  3188         	fcall	PL2	;call to abstracted procedure
  3080                           
  3081                           ;ADE7758.c: 174: if (sum > 50 )
  3082  0C22  3000               	movlw	0
  3083  0C23  023F               	subwf	Sample_ADE7758@sum+1,w
  3084  0C24  3033               	movlw	51
  3085  0C25  1903               	skipnz
  3086  0C26  023E               	subwf	Sample_ADE7758@sum,w
  3087  0C27  1C03               	skipc
  3088  0C28  2C33               	goto	l1474
  3089                           
  3090                           ;ADE7758.c: 175: {
  3091                           ;ADE7758.c: 176: ADE7758Data[chip-1].PhaseA.Energy += sum;
  3092  0C29  083E               	movf	Sample_ADE7758@sum,w
  3093  0C2A  27A6  3188         	fcall	PL20	;call to abstracted procedure
  3094  0C2C  261E  3188         	fcall	___bmul
  3095  0C2E  27AF  3188         	fcall	PL24	;call to abstracted procedure
  3096  0C30  3E0C               	addlw	12
  3097  0C31  2781  3188         	fcall	PL11	;call to abstracted procedure
  3098  0C33                     l1474:	
  3099                           
  3100                           ;ADE7758.c: 177: }
  3101                           ;ADE7758.c: 179: AD7758_GetData(0x02, 2, chip);
  3102  0C33  3002               	movlw	2
  3103  0C34  00A6               	movwf	?_AD7758_GetData
  3104  0C35  0840               	movf	Sample_ADE7758@chip,w
  3105  0C36  00A7               	movwf	?_AD7758_GetData+1
  3106  0C37  3002               	movlw	2
  3107  0C38  262A  3188         	fcall	_AD7758_GetData
  3108                           
  3109                           ;ADE7758.c: 180: if ( ReadData[0]&0x80 )
  3110  0C3A  1FD4               	btfss	_ReadData,7
  3111  0C3B  2C3F               	goto	l11964
  3112                           
  3113                           ;ADE7758.c: 181: {
  3114                           ;ADE7758.c: 182: ReadData[0] = ~ReadData[0];
  3115  0C3C  30FF               	movlw	255
  3116  0C3D  06D4               	xorwf	_ReadData,f
  3117                           
  3118                           ;ADE7758.c: 183: ReadData[1] = ~ReadData[1];
  3119  0C3E  06D5               	xorwf	_ReadData+1,f
  3120  0C3F                     l11964:	
  3121                           
  3122                           ;ADE7758.c: 184: }
  3123                           ;ADE7758.c: 185: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseB.Active_
      +                          Power[0]) << 8) +
  3124                           ;ADE7758.c: 186: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseB.Active_Power[1])) >> 1
      +                          );
  3125  0C3F  3031               	movlw	49
  3126  0C40  00A0               	movwf	?___bmul
  3127  0C41  0840               	movf	Sample_ADE7758@chip,w
  3128  0C42  261E  3188         	fcall	___bmul
  3129  0C44  279E  3188         	fcall	PL16	;call to abstracted procedure
  3130  0C46  3E18               	addlw	24
  3131  0C47  2759  3188         	fcall	PL4	;call to abstracted procedure
  3132  0C49  261E  3188         	fcall	___bmul
  3133  0C4B  2796  3188         	fcall	PL15	;call to abstracted procedure
  3134  0C4D  3E19               	addlw	25
  3135                           
  3136                           ;ADE7758.c: 188: ADE7758Data[chip-1].PhaseB.Active_Power[0] = (uchar)(sum>>8);
  3137  0C4E  272E  3188         	fcall	PL3	;call to abstracted procedure
  3138  0C50  261E  3188         	fcall	___bmul
  3139  0C52  2779  3188         	fcall	PL5	;call to abstracted procedure
  3140  0C54  3E18               	addlw	24
  3141  0C55  2723  3188         	fcall	PL2	;call to abstracted procedure
  3142                           
  3143                           ;ADE7758.c: 189: ADE7758Data[chip-1].PhaseB.Active_Power[1] = (uchar)sum;
  3144  0C57  083E               	movf	Sample_ADE7758@sum,w
  3145  0C58  2791  3188         	fcall	PL14	;call to abstracted procedure
  3146  0C5A  261E  3188         	fcall	___bmul
  3147  0C5C  2779  3188         	fcall	PL5	;call to abstracted procedure
  3148  0C5E  3E19               	addlw	25
  3149  0C5F  2723  3188         	fcall	PL2	;call to abstracted procedure
  3150                           
  3151                           ;ADE7758.c: 190: if (sum > 50 )
  3152  0C61  3000               	movlw	0
  3153  0C62  023F               	subwf	Sample_ADE7758@sum+1,w
  3154  0C63  3033               	movlw	51
  3155  0C64  1903               	skipnz
  3156  0C65  023E               	subwf	Sample_ADE7758@sum,w
  3157  0C66  1C03               	skipc
  3158  0C67  2C72               	goto	l1476
  3159                           
  3160                           ;ADE7758.c: 191: {
  3161                           ;ADE7758.c: 192: ADE7758Data[chip-1].PhaseB.Energy += sum;
  3162  0C68  083E               	movf	Sample_ADE7758@sum,w
  3163  0C69  27A6  3188         	fcall	PL20	;call to abstracted procedure
  3164  0C6B  261E  3188         	fcall	___bmul
  3165  0C6D  27AF  3188         	fcall	PL24	;call to abstracted procedure
  3166  0C6F  3E1C               	addlw	28
  3167  0C70  2781  3188         	fcall	PL11	;call to abstracted procedure
  3168  0C72                     l1476:	
  3169                           
  3170                           ;ADE7758.c: 193: }
  3171                           ;ADE7758.c: 195: AD7758_GetData(0x03, 2, chip);
  3172  0C72  3002               	movlw	2
  3173  0C73  00A6               	movwf	?_AD7758_GetData
  3174  0C74  0840               	movf	Sample_ADE7758@chip,w
  3175  0C75  00A7               	movwf	?_AD7758_GetData+1
  3176  0C76  3003               	movlw	3
  3177  0C77  262A  3188         	fcall	_AD7758_GetData
  3178                           
  3179                           ;ADE7758.c: 196: if ( ReadData[0]&0x80 )
  3180  0C79  1FD4               	btfss	_ReadData,7
  3181  0C7A  2C7E               	goto	l11978
  3182                           
  3183                           ;ADE7758.c: 197: {
  3184                           ;ADE7758.c: 198: ReadData[0] = ~ReadData[0];
  3185  0C7B  30FF               	movlw	255
  3186  0C7C  06D4               	xorwf	_ReadData,f
  3187                           
  3188                           ;ADE7758.c: 199: ReadData[1] = ~ReadData[1];
  3189  0C7D  06D5               	xorwf	_ReadData+1,f
  3190  0C7E                     l11978:	
  3191                           
  3192                           ;ADE7758.c: 200: }
  3193                           ;ADE7758.c: 201: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseC.Active_
      +                          Power[0]) << 8) +
  3194                           ;ADE7758.c: 202: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseC.Active_Power[1])) >> 1
      +                          );
  3195  0C7E  3031               	movlw	49
  3196  0C7F  00A0               	movwf	?___bmul
  3197  0C80  0840               	movf	Sample_ADE7758@chip,w
  3198  0C81  261E  3188         	fcall	___bmul
  3199  0C83  279E  3188         	fcall	PL16	;call to abstracted procedure
  3200  0C85  3E28               	addlw	40
  3201  0C86  2759  3188         	fcall	PL4	;call to abstracted procedure
  3202  0C88  261E  3188         	fcall	___bmul
  3203  0C8A  2796  3188         	fcall	PL15	;call to abstracted procedure
  3204  0C8C  3E29               	addlw	41
  3205                           
  3206                           ;ADE7758.c: 204: ADE7758Data[chip-1].PhaseC.Active_Power[0] = (uchar)(sum>>8);
  3207  0C8D  272E  3188         	fcall	PL3	;call to abstracted procedure
  3208  0C8F  261E  3188         	fcall	___bmul
  3209  0C91  2779  3188         	fcall	PL5	;call to abstracted procedure
  3210  0C93  3E28               	addlw	40
  3211  0C94  2723  3188         	fcall	PL2	;call to abstracted procedure
  3212                           
  3213                           ;ADE7758.c: 205: ADE7758Data[chip-1].PhaseC.Active_Power[1] = (uchar)sum;
  3214  0C96  083E               	movf	Sample_ADE7758@sum,w
  3215  0C97  2791  3188         	fcall	PL14	;call to abstracted procedure
  3216  0C99  261E  3188         	fcall	___bmul
  3217  0C9B  2779  3188         	fcall	PL5	;call to abstracted procedure
  3218  0C9D  3E29               	addlw	41
  3219  0C9E  2723  3188         	fcall	PL2	;call to abstracted procedure
  3220                           
  3221                           ;ADE7758.c: 206: if (sum > 50 )
  3222  0CA0  3000               	movlw	0
  3223  0CA1  023F               	subwf	Sample_ADE7758@sum+1,w
  3224  0CA2  3033               	movlw	51
  3225  0CA3  1903               	skipnz
  3226  0CA4  023E               	subwf	Sample_ADE7758@sum,w
  3227  0CA5  1C03               	skipc
  3228  0CA6  2CB1               	goto	l1478
  3229                           
  3230                           ;ADE7758.c: 207: {
  3231                           ;ADE7758.c: 208: ADE7758Data[chip-1].PhaseC.Energy += sum;
  3232  0CA7  083E               	movf	Sample_ADE7758@sum,w
  3233  0CA8  27A6  3188         	fcall	PL20	;call to abstracted procedure
  3234  0CAA  261E  3188         	fcall	___bmul
  3235  0CAC  27AF  3188         	fcall	PL24	;call to abstracted procedure
  3236  0CAE  3E2C               	addlw	44
  3237  0CAF  2781  3188         	fcall	PL11	;call to abstracted procedure
  3238  0CB1                     l1478:	
  3239                           
  3240                           ;ADE7758.c: 209: }
  3241                           ;ADE7758.c: 211: AD7758_GetData(0x0D, 3, chip);
  3242  0CB1  3003               	movlw	3
  3243  0CB2  00A6               	movwf	?_AD7758_GetData
  3244  0CB3  0840               	movf	Sample_ADE7758@chip,w
  3245  0CB4  00A7               	movwf	?_AD7758_GetData+1
  3246  0CB5  300D               	movlw	13
  3247  0CB6  262A  3188         	fcall	_AD7758_GetData
  3248                           
  3249                           ;ADE7758.c: 212: ADE7758Data[chip-1].PhaseA.Voltage[0]=ReadData[0];
  3250  0CB8  0854               	movf	_ReadData,w
  3251  0CB9  2791  3188         	fcall	PL14	;call to abstracted procedure
  3252  0CBB  261E  3188         	fcall	___bmul
  3253  0CBD  2779  3188         	fcall	PL5	;call to abstracted procedure
  3254  0CBF  3E02               	addlw	2
  3255  0CC0  2723  3188         	fcall	PL2	;call to abstracted procedure
  3256                           
  3257                           ;ADE7758.c: 213: ADE7758Data[chip-1].PhaseA.Voltage[1]=ReadData[1];
  3258  0CC2  0855               	movf	_ReadData+1,w
  3259  0CC3  2791  3188         	fcall	PL14	;call to abstracted procedure
  3260  0CC5  261E  3188         	fcall	___bmul
  3261  0CC7  2779  3188         	fcall	PL5	;call to abstracted procedure
  3262  0CC9  3E03               	addlw	3
  3263  0CCA  2723  3188         	fcall	PL2	;call to abstracted procedure
  3264                           
  3265                           ;ADE7758.c: 214: ADE7758Data[chip-1].PhaseA.Voltage[2]=ReadData[2];
  3266  0CCC  0856               	movf	_ReadData+2,w
  3267  0CCD  2791  3188         	fcall	PL14	;call to abstracted procedure
  3268  0CCF  261E  3188         	fcall	___bmul
  3269  0CD1  2779  3188         	fcall	PL5	;call to abstracted procedure
  3270  0CD3  3E04               	addlw	4
  3271  0CD4  2723  3188         	fcall	PL2	;call to abstracted procedure
  3272                           
  3273                           ;ADE7758.c: 216: AD7758_GetData(0x0E, 3, chip);
  3274  0CD6  3003               	movlw	3
  3275  0CD7  00A6               	movwf	?_AD7758_GetData
  3276  0CD8  0840               	movf	Sample_ADE7758@chip,w
  3277  0CD9  00A7               	movwf	?_AD7758_GetData+1
  3278  0CDA  300E               	movlw	14
  3279  0CDB  262A  3188         	fcall	_AD7758_GetData
  3280                           
  3281                           ;ADE7758.c: 217: ADE7758Data[chip-1].PhaseB.Voltage[0]=ReadData[0];
  3282  0CDD  0854               	movf	_ReadData,w
  3283  0CDE  2791  3188         	fcall	PL14	;call to abstracted procedure
  3284  0CE0  261E  3188         	fcall	___bmul
  3285  0CE2  2779  3188         	fcall	PL5	;call to abstracted procedure
  3286  0CE4  3E12               	addlw	18
  3287  0CE5  2723  3188         	fcall	PL2	;call to abstracted procedure
  3288                           
  3289                           ;ADE7758.c: 218: ADE7758Data[chip-1].PhaseB.Voltage[1]=ReadData[1];
  3290  0CE7  0855               	movf	_ReadData+1,w
  3291  0CE8  2791  3188         	fcall	PL14	;call to abstracted procedure
  3292  0CEA  261E  3188         	fcall	___bmul
  3293  0CEC  2779  3188         	fcall	PL5	;call to abstracted procedure
  3294  0CEE  3E13               	addlw	19
  3295  0CEF  2723  3188         	fcall	PL2	;call to abstracted procedure
  3296                           
  3297                           ;ADE7758.c: 219: ADE7758Data[chip-1].PhaseB.Voltage[2]=ReadData[2];
  3298  0CF1  0856               	movf	_ReadData+2,w
  3299  0CF2  2791  3188         	fcall	PL14	;call to abstracted procedure
  3300  0CF4  261E  3188         	fcall	___bmul
  3301  0CF6  2779  3188         	fcall	PL5	;call to abstracted procedure
  3302  0CF8  3E14               	addlw	20
  3303  0CF9  2723  3188         	fcall	PL2	;call to abstracted procedure
  3304                           
  3305                           ;ADE7758.c: 221: AD7758_GetData(0x0F, 3, chip);
  3306  0CFB  3003               	movlw	3
  3307  0CFC  00A6               	movwf	?_AD7758_GetData
  3308  0CFD  0840               	movf	Sample_ADE7758@chip,w
  3309  0CFE  00A7               	movwf	?_AD7758_GetData+1
  3310  0CFF  300F               	movlw	15
  3311  0D00  262A  3188         	fcall	_AD7758_GetData
  3312                           
  3313                           ;ADE7758.c: 222: ADE7758Data[chip-1].PhaseC.Voltage[0]=ReadData[0];
  3314  0D02  0854               	movf	_ReadData,w
  3315  0D03  2791  3188         	fcall	PL14	;call to abstracted procedure
  3316  0D05  261E  3188         	fcall	___bmul
  3317  0D07  2779  3188         	fcall	PL5	;call to abstracted procedure
  3318  0D09  3E22               	addlw	34
  3319  0D0A  2723  3188         	fcall	PL2	;call to abstracted procedure
  3320                           
  3321                           ;ADE7758.c: 223: ADE7758Data[chip-1].PhaseC.Voltage[1]=ReadData[1];
  3322  0D0C  0855               	movf	_ReadData+1,w
  3323  0D0D  2791  3188         	fcall	PL14	;call to abstracted procedure
  3324  0D0F  261E  3188         	fcall	___bmul
  3325  0D11  2779  3188         	fcall	PL5	;call to abstracted procedure
  3326  0D13  3E23               	addlw	35
  3327  0D14  2723  3188         	fcall	PL2	;call to abstracted procedure
  3328                           
  3329                           ;ADE7758.c: 224: ADE7758Data[chip-1].PhaseC.Voltage[2]=ReadData[2];
  3330  0D16  0856               	movf	_ReadData+2,w
  3331  0D17  2791  3188         	fcall	PL14	;call to abstracted procedure
  3332  0D19  261E  3188         	fcall	___bmul
  3333  0D1B  2779  3188         	fcall	PL5	;call to abstracted procedure
  3334  0D1D  3E24               	addlw	36
  3335  0D1E  2723  3188         	fcall	PL2	;call to abstracted procedure
  3336                           
  3337                           ;ADE7758.c: 226: AD7758_GetData(0x0A, 3, chip);
  3338  0D20  3003               	movlw	3
  3339  0D21  00A6               	movwf	?_AD7758_GetData
  3340  0D22  0840               	movf	Sample_ADE7758@chip,w
  3341  0D23  00A7               	movwf	?_AD7758_GetData+1
  3342  0D24  300A               	movlw	10
  3343  0D25  262A  3188         	fcall	_AD7758_GetData
  3344                           
  3345                           ;ADE7758.c: 227: ADE7758Data[chip-1].PhaseA.Current[0]=ReadData[0];
  3346  0D27  0854               	movf	_ReadData,w
  3347  0D28  2791  3188         	fcall	PL14	;call to abstracted procedure
  3348  0D2A  261E  3188         	fcall	___bmul
  3349  0D2C  2779  3188         	fcall	PL5	;call to abstracted procedure
  3350  0D2E  3E05               	addlw	5
  3351  0D2F  2723  3188         	fcall	PL2	;call to abstracted procedure
  3352                           
  3353                           ;ADE7758.c: 228: ADE7758Data[chip-1].PhaseA.Current[1]=ReadData[1];
  3354  0D31  0855               	movf	_ReadData+1,w
  3355  0D32  2791  3188         	fcall	PL14	;call to abstracted procedure
  3356  0D34  261E  3188         	fcall	___bmul
  3357  0D36  2779  3188         	fcall	PL5	;call to abstracted procedure
  3358  0D38  3E06               	addlw	6
  3359  0D39  2723  3188         	fcall	PL2	;call to abstracted procedure
  3360                           
  3361                           ;ADE7758.c: 229: ADE7758Data[chip-1].PhaseA.Current[2]=ReadData[2];
  3362  0D3B  0856               	movf	_ReadData+2,w
  3363  0D3C  2791  3188         	fcall	PL14	;call to abstracted procedure
  3364  0D3E  261E  3188         	fcall	___bmul
  3365  0D40  2779  3188         	fcall	PL5	;call to abstracted procedure
  3366  0D42  3E07               	addlw	7
  3367  0D43  2723  3188         	fcall	PL2	;call to abstracted procedure
  3368                           
  3369                           ;ADE7758.c: 231: AD7758_GetData(0x0B, 3, chip);
  3370  0D45  3003               	movlw	3
  3371  0D46  00A6               	movwf	?_AD7758_GetData
  3372  0D47  0840               	movf	Sample_ADE7758@chip,w
  3373  0D48  00A7               	movwf	?_AD7758_GetData+1
  3374  0D49  300B               	movlw	11
  3375  0D4A  262A  3188         	fcall	_AD7758_GetData
  3376                           
  3377                           ;ADE7758.c: 232: ADE7758Data[chip-1].PhaseB.Current[0]=ReadData[0];
  3378  0D4C  0854               	movf	_ReadData,w
  3379  0D4D  2791  3188         	fcall	PL14	;call to abstracted procedure
  3380  0D4F  261E  3188         	fcall	___bmul
  3381  0D51  2779  3188         	fcall	PL5	;call to abstracted procedure
  3382  0D53  3E15               	addlw	21
  3383  0D54  2723  3188         	fcall	PL2	;call to abstracted procedure
  3384                           
  3385                           ;ADE7758.c: 233: ADE7758Data[chip-1].PhaseB.Current[1]=ReadData[1];
  3386  0D56  0855               	movf	_ReadData+1,w
  3387  0D57  2791  3188         	fcall	PL14	;call to abstracted procedure
  3388  0D59  261E  3188         	fcall	___bmul
  3389  0D5B  2779  3188         	fcall	PL5	;call to abstracted procedure
  3390  0D5D  3E16               	addlw	22
  3391  0D5E  2723  3188         	fcall	PL2	;call to abstracted procedure
  3392                           
  3393                           ;ADE7758.c: 234: ADE7758Data[chip-1].PhaseB.Current[2]=ReadData[2];
  3394  0D60  0856               	movf	_ReadData+2,w
  3395  0D61  2791  3188         	fcall	PL14	;call to abstracted procedure
  3396  0D63  261E  3188         	fcall	___bmul
  3397  0D65  2779  3188         	fcall	PL5	;call to abstracted procedure
  3398  0D67  3E17               	addlw	23
  3399  0D68  2723  3188         	fcall	PL2	;call to abstracted procedure
  3400                           
  3401                           ;ADE7758.c: 236: AD7758_GetData(0x0C, 3, chip);
  3402  0D6A  3003               	movlw	3
  3403  0D6B  00A6               	movwf	?_AD7758_GetData
  3404  0D6C  0840               	movf	Sample_ADE7758@chip,w
  3405  0D6D  00A7               	movwf	?_AD7758_GetData+1
  3406  0D6E  300C               	movlw	12
  3407  0D6F  262A  3188         	fcall	_AD7758_GetData
  3408                           
  3409                           ;ADE7758.c: 237: ADE7758Data[chip-1].PhaseC.Current[0]=ReadData[0];
  3410  0D71  0854               	movf	_ReadData,w
  3411  0D72  2791  3188         	fcall	PL14	;call to abstracted procedure
  3412  0D74  261E  3188         	fcall	___bmul
  3413  0D76  2779  3188         	fcall	PL5	;call to abstracted procedure
  3414  0D78  3E25               	addlw	37
  3415  0D79  2723  3188         	fcall	PL2	;call to abstracted procedure
  3416                           
  3417                           ;ADE7758.c: 238: ADE7758Data[chip-1].PhaseC.Current[1]=ReadData[1];
  3418  0D7B  0855               	movf	_ReadData+1,w
  3419  0D7C  2791  3188         	fcall	PL14	;call to abstracted procedure
  3420  0D7E  261E  3188         	fcall	___bmul
  3421  0D80  2779  3188         	fcall	PL5	;call to abstracted procedure
  3422  0D82  3E26               	addlw	38
  3423  0D83  2723  3188         	fcall	PL2	;call to abstracted procedure
  3424                           
  3425                           ;ADE7758.c: 239: ADE7758Data[chip-1].PhaseC.Current[2]=ReadData[2];
  3426  0D85  0856               	movf	_ReadData+2,w
  3427  0D86  2791  3188         	fcall	PL14	;call to abstracted procedure
  3428  0D88  261E  3188         	fcall	___bmul
  3429  0D8A  2779  3188         	fcall	PL5	;call to abstracted procedure
  3430  0D8C  3E27               	addlw	39
  3431  0D8D  2723  3188         	fcall	PL2	;call to abstracted procedure
  3432                           
  3433                           ;ADE7758.c: 241: AD7758_GetData(0x07, 2, chip);
  3434  0D8F  3002               	movlw	2
  3435  0D90  00A6               	movwf	?_AD7758_GetData
  3436  0D91  0840               	movf	Sample_ADE7758@chip,w
  3437  0D92  00A7               	movwf	?_AD7758_GetData+1
  3438  0D93  3007               	movlw	7
  3439  0D94  262A  3188         	fcall	_AD7758_GetData
  3440                           
  3441                           ;ADE7758.c: 242: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseA.Apparen
      +                          t_Power[0]) << 8) +
  3442                           ;ADE7758.c: 243: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseA.Apparent_Power[1])) >>
      +                           1);
  3443  0D96  3031               	movlw	49
  3444  0D97  00A0               	movwf	?___bmul
  3445  0D98  0840               	movf	Sample_ADE7758@chip,w
  3446  0D99  261E  3188         	fcall	___bmul
  3447  0D9B  279E  3188         	fcall	PL16	;call to abstracted procedure
  3448  0D9D  3E0A               	addlw	10
  3449  0D9E  2759  3188         	fcall	PL4	;call to abstracted procedure
  3450  0DA0  261E  3188         	fcall	___bmul
  3451  0DA2  2796  3188         	fcall	PL15	;call to abstracted procedure
  3452  0DA4  3E0B               	addlw	11
  3453                           
  3454                           ;ADE7758.c: 244: ADE7758Data[chip-1].PhaseA.Apparent_Power[0] = (uchar)(sum>>8);
  3455  0DA5  272E  3188         	fcall	PL3	;call to abstracted procedure
  3456  0DA7  261E  3188         	fcall	___bmul
  3457  0DA9  2779  3188         	fcall	PL5	;call to abstracted procedure
  3458  0DAB  3E0A               	addlw	10
  3459  0DAC  2723  3188         	fcall	PL2	;call to abstracted procedure
  3460                           
  3461                           ;ADE7758.c: 245: ADE7758Data[chip-1].PhaseA.Apparent_Power[1] = (uchar)sum;
  3462  0DAE  083E               	movf	Sample_ADE7758@sum,w
  3463  0DAF  2791  3188         	fcall	PL14	;call to abstracted procedure
  3464  0DB1  261E  3188         	fcall	___bmul
  3465  0DB3  2779  3188         	fcall	PL5	;call to abstracted procedure
  3466  0DB5  3E0B               	addlw	11
  3467  0DB6  2723  3188         	fcall	PL2	;call to abstracted procedure
  3468                           
  3469                           ;ADE7758.c: 247: AD7758_GetData(0x08, 2, chip);
  3470  0DB8  3002               	movlw	2
  3471  0DB9  00A6               	movwf	?_AD7758_GetData
  3472  0DBA  0840               	movf	Sample_ADE7758@chip,w
  3473  0DBB  00A7               	movwf	?_AD7758_GetData+1
  3474  0DBC  3008               	movlw	8
  3475  0DBD  262A  3188         	fcall	_AD7758_GetData
  3476                           
  3477                           ;ADE7758.c: 248: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseB.Apparen
      +                          t_Power[0]) << 8) +
  3478                           ;ADE7758.c: 249: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseB.Apparent_Power[1])) >>
      +                           1);
  3479  0DBF  3031               	movlw	49
  3480  0DC0  00A0               	movwf	?___bmul
  3481  0DC1  0840               	movf	Sample_ADE7758@chip,w
  3482  0DC2  261E  3188         	fcall	___bmul
  3483  0DC4  279E  3188         	fcall	PL16	;call to abstracted procedure
  3484  0DC6  3E1A               	addlw	26
  3485  0DC7  2759  3188         	fcall	PL4	;call to abstracted procedure
  3486  0DC9  261E  3188         	fcall	___bmul
  3487  0DCB  2796  3188         	fcall	PL15	;call to abstracted procedure
  3488  0DCD  3E1B               	addlw	27
  3489                           
  3490                           ;ADE7758.c: 250: ADE7758Data[chip-1].PhaseB.Apparent_Power[0] = (uchar)(sum>>8);
  3491  0DCE  272E  3188         	fcall	PL3	;call to abstracted procedure
  3492  0DD0  261E  3188         	fcall	___bmul
  3493  0DD2  2779  3188         	fcall	PL5	;call to abstracted procedure
  3494  0DD4  3E1A               	addlw	26
  3495  0DD5  2723  3188         	fcall	PL2	;call to abstracted procedure
  3496                           
  3497                           ;ADE7758.c: 251: ADE7758Data[chip-1].PhaseB.Apparent_Power[1] = (uchar)sum;
  3498  0DD7  083E               	movf	Sample_ADE7758@sum,w
  3499  0DD8  2791  3188         	fcall	PL14	;call to abstracted procedure
  3500  0DDA  261E  3188         	fcall	___bmul
  3501  0DDC  2779  3188         	fcall	PL5	;call to abstracted procedure
  3502  0DDE  3E1B               	addlw	27
  3503  0DDF  2723  3188         	fcall	PL2	;call to abstracted procedure
  3504                           
  3505                           ;ADE7758.c: 253: AD7758_GetData(0x09, 2, chip);
  3506  0DE1  3002               	movlw	2
  3507  0DE2  00A6               	movwf	?_AD7758_GetData
  3508  0DE3  0840               	movf	Sample_ADE7758@chip,w
  3509  0DE4  00A7               	movwf	?_AD7758_GetData+1
  3510  0DE5  3009               	movlw	9
  3511  0DE6  262A  3188         	fcall	_AD7758_GetData
  3512                           
  3513                           ;ADE7758.c: 254: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseC.Apparen
      +                          t_Power[0]) << 8) +
  3514                           ;ADE7758.c: 255: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseC.Apparent_Power[1])) >>
      +                           1);
  3515  0DE8  3031               	movlw	49
  3516  0DE9  00A0               	movwf	?___bmul
  3517  0DEA  0840               	movf	Sample_ADE7758@chip,w
  3518  0DEB  261E  3188         	fcall	___bmul
  3519  0DED  279E  3188         	fcall	PL16	;call to abstracted procedure
  3520  0DEF  3E2A               	addlw	42
  3521  0DF0  2759  3188         	fcall	PL4	;call to abstracted procedure
  3522  0DF2  261E  3188         	fcall	___bmul
  3523  0DF4  2796  3188         	fcall	PL15	;call to abstracted procedure
  3524  0DF6  3E2B               	addlw	43
  3525                           
  3526                           ;ADE7758.c: 256: ADE7758Data[chip-1].PhaseC.Apparent_Power[0] = (uchar)(sum>>8);
  3527  0DF7  272E  3188         	fcall	PL3	;call to abstracted procedure
  3528  0DF9  261E  3188         	fcall	___bmul
  3529  0DFB  2779  3188         	fcall	PL5	;call to abstracted procedure
  3530  0DFD  3E2A               	addlw	42
  3531  0DFE  2723  3188         	fcall	PL2	;call to abstracted procedure
  3532                           
  3533                           ;ADE7758.c: 257: ADE7758Data[chip-1].PhaseC.Apparent_Power[1] = (uchar)sum;
  3534  0E00  083E               	movf	Sample_ADE7758@sum,w
  3535  0E01  2791  3188         	fcall	PL14	;call to abstracted procedure
  3536  0E03  261E  3188         	fcall	___bmul
  3537  0E05  2779  3188         	fcall	PL5	;call to abstracted procedure
  3538  0E07  3E2B               	addlw	43
  3539  0E08  2723  3188         	fcall	PL2	;call to abstracted procedure
  3540                           
  3541                           ;ADE7758.c: 259: AD7758_GetData(0x11, 1, chip);
  3542  0E0A  01A6               	clrf	?_AD7758_GetData
  3543  0E0B  0AA6               	incf	?_AD7758_GetData,f
  3544  0E0C  0840               	movf	Sample_ADE7758@chip,w
  3545  0E0D  00A7               	movwf	?_AD7758_GetData+1
  3546  0E0E  3011               	movlw	17
  3547  0E0F  262A  3188         	fcall	_AD7758_GetData
  3548                           
  3549                           ;ADE7758.c: 260: ADE7758Data[chip-1].Temper = (schar)ReadData[0];
  3550  0E11  0854               	movf	_ReadData,w
  3551  0E12  2791  3188         	fcall	PL14	;call to abstracted procedure
  3552  0E14  261E  3188         	fcall	___bmul
  3553  0E16  2779  3188         	fcall	PL5	;call to abstracted procedure
  3554  0E18  3E30               	addlw	48
  3555  0E19  2723  3188         	fcall	PL2	;call to abstracted procedure
  3556                           
  3557                           ;ADE7758.c: 263: AD7758_CS(chip, 0);
  3558  0E1B  01A8               	clrf	?_AD7758_CS
  3559  0E1C  0840               	movf	Sample_ADE7758@chip,w
  3560  0E1D  2891               	ljmp	_AD7758_CS
  3561  0E1E                     __end_of_Sample_ADE7758:	
  3562  0E1E                     __ptext790:	
  3563 ;; =============== function _AD7758_CS ends ============
  3564                           
  3565                           
  3566 ;; *************** function ___bmul *****************
  3567 ;; Defined at:
  3568 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\bmul.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  multiplier      1    wreg     unsigned char 
  3571 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  multiplier      1    2[BANK0 ] unsigned char 
  3574 ;;  product         1    1[BANK0 ] unsigned char 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  1    wreg      unsigned char 
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0
  3579 ;; Tracked objects:
  3580 ;;		On entry : 1F/0
  3581 ;;		On exit  : 1F/0
  3582 ;;		Unchanged: FFFE0/0
  3583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3584 ;;      Params:         0       1       0       0       0       0
  3585 ;;      Locals:         0       2       0       0       0       0
  3586 ;;      Temps:          0       0       0       0       0       0
  3587 ;;      Totals:         0       3       0       0       0       0
  3588 ;;Total ram usage:        3 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    2
  3591 ;; This function calls:
  3592 ;;		Nothing
  3593 ;; This function is called by:
  3594 ;;		_Sample_ADE7758
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597  0E1E                     ___bmul:	
  3598                           
  3599                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3600                           ;___bmul@multiplier stored from wreg
  3601  0E1E  00A2               	movwf	___bmul@multiplier
  3602  0E1F  01A1               	clrf	___bmul@product
  3603  0E20                     l11646:	
  3604  0E20  0820               	movf	___bmul@multiplicand,w
  3605  0E21  1822               	btfsc	___bmul@multiplier,0
  3606  0E22  07A1               	addwf	___bmul@product,f
  3607  0E23  35A0               	lslf	___bmul@multiplicand,f
  3608  0E24  36A2               	lsrf	___bmul@multiplier,f
  3609  0E25  08A2               	movf	___bmul@multiplier,f
  3610  0E26  1D03               	skipz
  3611  0E27  2E20               	goto	l11646
  3612  0E28  0821               	movf	___bmul@product,w
  3613  0E29  0008               	return
  3614  0E2A                     __end_of___bmul:	
  3615  0E2A                     __ptext788:	
  3616 ;; =============== function _AD7758_SendData ends ============
  3617                           
  3618                           
  3619 ;; *************** function _AD7758_GetData *****************
  3620 ;; Defined at:
  3621 ;;		line 39 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\ADE7758.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;  addr            1    wreg     unsigned char 
  3624 ;;  num             1    6[BANK0 ] unsigned char 
  3625 ;;  chip            1    7[BANK0 ] unsigned char 
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  addr            1    8[BANK0 ] unsigned char 
  3628 ;;  i               1    9[BANK0 ] unsigned char 
  3629 ;; Return value:  Size  Location     Type
  3630 ;;		None               void
  3631 ;; Registers used:
  3632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3633 ;; Tracked objects:
  3634 ;;		On entry : 1F/0
  3635 ;;		On exit  : 1F/0
  3636 ;;		Unchanged: FFFE0/0
  3637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3638 ;;      Params:         0       2       0       0       0       0
  3639 ;;      Locals:         0       2       0       0       0       0
  3640 ;;      Temps:          0       0       0       0       0       0
  3641 ;;      Totals:         0       4       0       0       0       0
  3642 ;;Total ram usage:        4 bytes
  3643 ;; Hardware stack levels used:    1
  3644 ;; Hardware stack levels required when called:    3
  3645 ;; This function calls:
  3646 ;;		_spiSendByte
  3647 ;; This function is called by:
  3648 ;;		_Sample_ADE7758
  3649 ;;		_AD7758_check_init
  3650 ;; This function uses a non-reentrant model
  3651 ;;
  3652  0E2A                     _AD7758_GetData:	
  3653                           
  3654                           ; Regs used in _AD7758_GetData: [wreg+fsr1l-status,0+pclath+cstack]
  3655                           ;AD7758_GetData@addr stored from wreg
  3656  0E2A  00A8               	movwf	AD7758_GetData@addr
  3657                           
  3658                           ;ADE7758.c: 40: uchar i;
  3659                           ;ADE7758.c: 56: spiSendByte(addr);
  3660  0E2B  26F1  3188         	fcall	_spiSendByte
  3661                           
  3662                           ;ADE7758.c: 57: for(i=0;i<num;i++)
  3663  0E2D  01A9               	clrf	AD7758_GetData@i
  3664  0E2E                     l11716:	
  3665  0E2E  0826               	movf	AD7758_GetData@num,w
  3666  0E2F  0229               	subwf	AD7758_GetData@i,w
  3667  0E30  1803               	btfsc	3,0
  3668  0E31  0008               	return
  3669                           
  3670                           ;ADE7758.c: 58: {
  3671                           ;ADE7758.c: 59: ReadData[i] = spiSendByte (0x00);
  3672  0E32  0829               	movf	AD7758_GetData@i,w
  3673  0E33  3E54               	addlw	_ReadData& (0+255)
  3674  0E34  0086               	movwf	6
  3675  0E35  3000               	movlw	0
  3676  0E36  0187               	clrf	7
  3677  0E37  26F1  3188         	fcall	_spiSendByte
  3678  0E39  0081               	movwf	1
  3679  0E3A  0AA9               	incf	AD7758_GetData@i,f
  3680  0E3B  2E2E               	goto	l11716
  3681  0E3C                     __end_of_AD7758_GetData:	
  3682  0E3C                     start_initialization:	
  3683  0E3C  300E               	movlw	14
  3684  210E                     	;BIGRAM
  3685                           
  3686                           ; Clear objects allocated to BIGRAM
  3687  0E3D  0084               	movwf	4
  3688  0E3E  3021               	movlw	33
  3689  0E3F  0085               	movwf	5
  3690  0E40  3062               	movlw	98
  3691  0E41  00FE               	movwf	126
  3692  0E42  3000               	movlw	0
  3693  0E43  01FF               	clrf	127
  3694  0E44  3182  22E0  3188   	fcall	clear_ram
  3695  0E47  3054               	movlw	low __pbssBANK0
  3696                           
  3697                           ; Clear objects allocated to BITCOMMON
  3698  0E48  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  3699                           
  3700                           ; Clear objects allocated to COMMON
  3701  0E49  01F8               	clrf	__pbssCOMMON& (0+127)
  3702  0E4A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  3703  0E4B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  3704                           
  3705                           ; Clear objects allocated to BANK0
  3706  0E4C  0084               	movwf	4
  3707  0E4D  3000               	movlw	high __pbssBANK0
  3708  0E4E  0085               	movwf	5
  3709  0E4F  3018               	movlw	24
  3710  0E50  00FE               	movwf	126
  3711  0E51  3000               	movlw	0
  3712  0E52  00FF               	movwf	127
  3713  0E53  3182  22E0  3188   	fcall	clear_ram
  3714                           
  3715                           ; Clear objects allocated to BANK1
  3716  0E56  30A0               	movlw	low __pbssBANK1
  3717  0E57  0084               	movwf	4
  3718  0E58  3000               	movlw	high __pbssBANK1
  3719  0E59  0085               	movwf	5
  3720  0E5A  3041               	movlw	65
  3721  0E5B  00FE               	movwf	126
  3722  0E5C  3000               	movlw	0
  3723  0E5D  00FF               	movwf	127
  3724  0E5E  3182  22E0  3188   	fcall	clear_ram
  3725                           
  3726                           ;initializer for _fun_array
  3727  0E61  3003               	movlw	(fp__thread_Sample-fpbase)& (0+255)
  3728  0E62  00EC               	movwf	__pdataBANK0& (0+127)
  3729  0E63  3001               	movlw	(fp__thread_slip-fpbase)& (0+255)
  3730  0E64  00ED               	movwf	(__pdataBANK0+1)& (0+127)
  3731  0E65  3005               	movlw	(fp__thread_abnormal-fpbase)& (0+255)
  3732  0E66  00EE               	movwf	(__pdataBANK0+2)& (0+127)
  3733  0E67                     end_of_initialization:	
  3734                           ;End of C runtime variable initialization code
  3735                           
  3736  0E67  0020               	movlb	0
  3737  0E68  2E69               	ljmp	_main	;jump to C main() function
  3738  0E69                     __pmaintext:	
  3739 ;;Data sizes: Strings 0, constant 4, data 3, bss 92, persistent 0 stack 0
  3740 ;;Auto spaces:   Size  Autos    Used
  3741 ;; COMMON          14      8      12
  3742 ;; BANK0           80     52      79
  3743 ;; BANK1           80      0      65
  3744 ;; BANK2           80      0       0
  3745 ;; BANK3           30      0       0
  3746 ;; BANK4            0      0       0
  3747 ;;
  3748 ;; Pointer list with targets:
  3749 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
  3750 ;;
  3751 ;; _OS_Task_Create@Task	PTR struct . size(1) Largest target is 12
  3752 ;;		 -> _OS_Tasks(BANK0[12]), 
  3753 ;;
  3754 ;; calculateCRC8@inData	PTR unsigned char  size(1) Largest target is 43
  3755 ;;		 -> gstSLIPSend(BANK1[43]), gstSLIPRecv(BANK1[22]), 
  3756 ;;
  3757 ;; sendPHASE@pchip2_phase	PTR struct . size(2) Largest target is 98
  3758 ;;		 -> ADE7758Data(BIGRAM[98]), 
  3759 ;;
  3760 ;; sendPHASE@pchip1_phase	PTR struct . size(2) Largest target is 98
  3761 ;;		 -> ADE7758Data(BIGRAM[98]), 
  3762 ;;
  3763 ;; _OS_CurTask	 PTR struct . size(1) Largest target is 12
  3764 ;;		 -> NULL(NULL[0]), _OS_Tasks(BANK0[12]), 
  3765 ;;
  3766 ;; fun_array	PTR FTN()void [3] size(1) Largest target is 0
  3767 ;;		 -> thread_abnormal(), thread_slip(), thread_Sample(), 
  3768 ;;
  3769 ;; vmemset@p1	PTR void  size(2) Largest target is 98
  3770 ;;		 -> ADE7758Data(BIGRAM[98]), 
  3771 ;;
  3772 ;; vmemset@p	PTR unsigned char  size(2) Largest target is 98
  3773 ;;		 -> ADE7758Data(BIGRAM[98]), 
  3774 ;;
  3775 ;;
  3776 ;; Critical Paths under _main in COMMON
  3777 ;;
  3778 ;;   None.
  3779 ;;
  3780 ;; Critical Paths under _isr in COMMON
  3781 ;;
  3782 ;;   _isr->___lwmod
  3783 ;;
  3784 ;; Critical Paths under _main in BANK0
  3785 ;;
  3786 ;;   _thread_slip->_slip_main
  3787 ;;   _slip_main->_run_cmd
  3788 ;;   _run_cmd->_sendPHASE
  3789 ;;   _sendVER->_rs485_send_data
  3790 ;;   _sendTemper->_rs485_send_data
  3791 ;;   _sendPHASE->_rs485_send_data
  3792 ;;   _sendDEV->_rs485_send_data
  3793 ;;   _sendNACK->_rs485_send_data
  3794 ;;   _sendACK->_rs485_send_data
  3795 ;;   _thread_abnormal->_AD7758_check_init
  3796 ;;   _sample_check->_Sample_ADE7758
  3797 ;;   _thread_Sample->_Sample_ADE7758
  3798 ;;   _OS_Init->__OS_CheckEvent
  3799 ;;   _AD7758_check_init->_AD7758_CS
  3800 ;;   _AD7758_check_init->_AD7758_GetData
  3801 ;;   _Sample_ADE7758->_AD7758_CS
  3802 ;;   _Sample_ADE7758->_AD7758_GetData
  3803 ;;   _Sample_ADE7758->_AD7758_SendData
  3804 ;;   _AD7758_init->_AD7758_CS
  3805 ;;   _AD7758_init->_AD7758_SendData
  3806 ;;   _processing_slipcmd->_calculateCRC8
  3807 ;;   _Initialize->_vmemset
  3808 ;;   _AD7758_SendData->_spiSendByte
  3809 ;;   _AD7758_GetData->_spiSendByte
  3810 ;;   _AD7758_CS->_Delay
  3811 ;;
  3812 ;; Critical Paths under _isr in BANK0
  3813 ;;
  3814 ;;   None.
  3815 ;;
  3816 ;; Critical Paths under _main in BANK1
  3817 ;;
  3818 ;;   None.
  3819 ;;
  3820 ;; Critical Paths under _isr in BANK1
  3821 ;;
  3822 ;;   None.
  3823 ;;
  3824 ;; Critical Paths under _main in BANK2
  3825 ;;
  3826 ;;   None.
  3827 ;;
  3828 ;; Critical Paths under _isr in BANK2
  3829 ;;
  3830 ;;   None.
  3831 ;;
  3832 ;; Critical Paths under _main in BANK3
  3833 ;;
  3834 ;;   None.
  3835 ;;
  3836 ;; Critical Paths under _isr in BANK3
  3837 ;;
  3838 ;;   None.
  3839 ;;
  3840 ;; Critical Paths under _main in BANK4
  3841 ;;
  3842 ;;   None.
  3843 ;;
  3844 ;; Critical Paths under _isr in BANK4
  3845 ;;
  3846 ;;   None.
  3847 ;;
  3848 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3849 ;;
  3850 ;;
  3851 ;;Call Graph Tables:
  3852 ;;
  3853 ;; ---------------------------------------------------------------------------------
  3854 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  3855 ;; ---------------------------------------------------------------------------------
  3856 ;; (0) _main                                                 1     1      0   24331
  3857 ;;                                             51 BANK0      1     1      0
  3858 ;;                         _Initialize
  3859 ;;                           _SPI_Init
  3860 ;;                        _AD7758_init
  3861 ;;                        _get_address
  3862 ;;                            _OS_Init
  3863 ;;                    __OS_Task_Create
  3864 ;;                     __OS_JumpToTask
  3865 ;;                    _thread_abnormal
  3866 ;;                        _thread_slip
  3867 ;;                      _thread_Sample
  3868 ;; ---------------------------------------------------------------------------------
  3869 ;; (1) _thread_slip                                          0     0      0   20000
  3870 ;;                  __OS_EnterWaitMode
  3871 ;;                     __OS_CheckEvent
  3872 ;;                          _slip_main
  3873 ;; ---------------------------------------------------------------------------------
  3874 ;; (2) _slip_main                                            1     1      0   19978
  3875 ;;                                             50 BANK0      1     1      0
  3876 ;;                 _processing_slipcmd
  3877 ;;                            _sendACK
  3878 ;;                            _run_cmd
  3879 ;;                           _sendNACK
  3880 ;; ---------------------------------------------------------------------------------
  3881 ;; (3) _run_cmd                                              2     2      0   13910
  3882 ;;                                             48 BANK0      2     2      0
  3883 ;;                         _sendTemper
  3884 ;;                          _sendPHASE
  3885 ;;                            _sendDEV
  3886 ;;                            _sendVER
  3887 ;; ---------------------------------------------------------------------------------
  3888 ;; (4) _sendVER                                              2     2      0    3104
  3889 ;;                                             37 BANK0      2     2      0
  3890 ;;                      _calculateCRC8
  3891 ;;                    _rs485_send_data
  3892 ;; ---------------------------------------------------------------------------------
  3893 ;; (4) _sendTemper                                           2     2      0    3104
  3894 ;;                                             37 BANK0      2     2      0
  3895 ;;                      _calculateCRC8
  3896 ;;                    _rs485_send_data
  3897 ;; ---------------------------------------------------------------------------------
  3898 ;; (4) _sendPHASE                                           11     9      2    4482
  3899 ;;                                             37 BANK0     11     9      2
  3900 ;;                      _calculateCRC8
  3901 ;;                    _rs485_send_data
  3902 ;; ---------------------------------------------------------------------------------
  3903 ;; (4) _sendDEV                                              2     2      0    3173
  3904 ;;                                             37 BANK0      2     2      0
  3905 ;;                      _calculateCRC8
  3906 ;;                    _rs485_send_data
  3907 ;; ---------------------------------------------------------------------------------
  3908 ;; (3) _sendNACK                                             1     1      0    2780
  3909 ;;                                             37 BANK0      1     1      0
  3910 ;;                    _rs485_send_data
  3911 ;; ---------------------------------------------------------------------------------
  3912 ;; (3) _sendACK                                              1     1      0    2780
  3913 ;;                                             37 BANK0      1     1      0
  3914 ;;                    _rs485_send_data
  3915 ;; ---------------------------------------------------------------------------------
  3916 ;; (4) _rs485_send_data                                      4     4      0    2642
  3917 ;;                                             33 BANK0      4     4      0
  3918 ;;                       _sample_check
  3919 ;; ---------------------------------------------------------------------------------
  3920 ;; (1) _thread_abnormal                                      0     0      0     857
  3921 ;;                  __OS_EnterWaitMode
  3922 ;;                     __OS_CheckEvent
  3923 ;;                  _AD7758_check_init
  3924 ;;                        _AD7758_init
  3925 ;; ---------------------------------------------------------------------------------
  3926 ;; (5) _sample_check                                         0     0      0    2596
  3927 ;;                     _Sample_ADE7758
  3928 ;; ---------------------------------------------------------------------------------
  3929 ;; (1) _thread_Sample                                        0     0      0    2618
  3930 ;;                  __OS_EnterWaitMode
  3931 ;;                     __OS_CheckEvent
  3932 ;;                     _Sample_ADE7758
  3933 ;; ---------------------------------------------------------------------------------
  3934 ;; (1) _OS_Init                                              0     0      0      22
  3935 ;;                     __OS_ReturnSave
  3936 ;;                  __OS_EnterWaitMode
  3937 ;;                __OS_EnterWaitModeTO
  3938 ;;                     __OS_CheckEvent
  3939 ;;                     __OS_JumpToTask
  3940 ;; ---------------------------------------------------------------------------------
  3941 ;; (2) _AD7758_check_init                                    2     2      0     385
  3942 ;;                                             10 BANK0      2     2      0
  3943 ;;                          _AD7758_CS
  3944 ;;                     _AD7758_GetData
  3945 ;; ---------------------------------------------------------------------------------
  3946 ;; (2) _Sample_ADE7758                                      23    23      0    2596
  3947 ;;                                             10 BANK0     23    23      0
  3948 ;;                          _AD7758_CS
  3949 ;;                     _AD7758_GetData
  3950 ;;                             ___bmul
  3951 ;;                    _AD7758_SendData
  3952 ;; ---------------------------------------------------------------------------------
  3953 ;; (2) _AD7758_init                                          1     1      0     450
  3954 ;;                                             10 BANK0      1     1      0
  3955 ;;                          _AD7758_CS
  3956 ;;                    _AD7758_SendData
  3957 ;;                              _Delay
  3958 ;; ---------------------------------------------------------------------------------
  3959 ;; (2) __OS_EnterWaitModeTO                                  0     0      0       0
  3960 ;;      __OS_ClrReadySetClrCanContinue
  3961 ;; ---------------------------------------------------------------------------------
  3962 ;; (3) _processing_slipcmd                                   6     6      0     462
  3963 ;;                                              5 BANK0      6     6      0
  3964 ;;                      _calculateCRC8
  3965 ;; ---------------------------------------------------------------------------------
  3966 ;; (2) __OS_EnterWaitMode                                    0     0      0       0
  3967 ;;      __OS_ClrReadySetClrCanContinue
  3968 ;; ---------------------------------------------------------------------------------
  3969 ;; (1) _Initialize                                           0     0      0      90
  3970 ;;                            _vmemset
  3971 ;; ---------------------------------------------------------------------------------
  3972 ;; (3) _AD7758_SendData                                      4     2      2     160
  3973 ;;                                              6 BANK0      4     2      2
  3974 ;;                        _spiSendByte
  3975 ;; ---------------------------------------------------------------------------------
  3976 ;; (3) _AD7758_GetData                                       4     2      2     160
  3977 ;;                                              6 BANK0      4     2      2
  3978 ;;                        _spiSendByte
  3979 ;; ---------------------------------------------------------------------------------
  3980 ;; (3) _AD7758_CS                                            2     1      1     112
  3981 ;;                                              8 BANK0      2     1      1
  3982 ;;                              _Delay
  3983 ;; ---------------------------------------------------------------------------------
  3984 ;; (3) ___bmul                                               3     2      1      68
  3985 ;;                                              0 BANK0      3     2      1
  3986 ;; ---------------------------------------------------------------------------------
  3987 ;; (3) __OS_ClrReadySetClrCanContinue                        0     0      0       0
  3988 ;; ---------------------------------------------------------------------------------
  3989 ;; (2) __OS_ReturnSave                                       0     0      0       0
  3990 ;; ---------------------------------------------------------------------------------
  3991 ;; (5) _calculateCRC8                                        5     4      1     164
  3992 ;;                                              0 BANK0      5     4      1
  3993 ;; ---------------------------------------------------------------------------------
  3994 ;; (1) __OS_JumpToTask                                       0     0      0       0
  3995 ;; ---------------------------------------------------------------------------------
  3996 ;; (1) __OS_Task_Create                                      4     2      2     136
  3997 ;;                                              0 BANK0      4     2      2
  3998 ;; ---------------------------------------------------------------------------------
  3999 ;; (1) _get_address                                          0     0      0       0
  4000 ;; ---------------------------------------------------------------------------------
  4001 ;; (2) __OS_CheckEvent                                       1     1      0      22
  4002 ;;                                              0 BANK0      1     1      0
  4003 ;; ---------------------------------------------------------------------------------
  4004 ;; (1) _SPI_Init                                             0     0      0       0
  4005 ;; ---------------------------------------------------------------------------------
  4006 ;; (2) _vmemset                                              9     3      6      90
  4007 ;;                                              0 BANK0      9     3      6
  4008 ;; ---------------------------------------------------------------------------------
  4009 ;; (4) _spiSendByte                                          6     6      0      70
  4010 ;;                                              0 BANK0      6     6      0
  4011 ;; ---------------------------------------------------------------------------------
  4012 ;; (4) _Delay                                                8     4      4      46
  4013 ;;                                              0 BANK0      8     4      4
  4014 ;; ---------------------------------------------------------------------------------
  4015 ;; Estimated maximum stack depth 5
  4016 ;; ---------------------------------------------------------------------------------
  4017 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  4018 ;; ---------------------------------------------------------------------------------
  4019 ;; (10) _isr                                                 3     3      0     248
  4020 ;;                                              5 COMMON     3     3      0
  4021 ;;                            ___lwmod
  4022 ;; ---------------------------------------------------------------------------------
  4023 ;; (11) ___lwmod                                             5     1      4     159
  4024 ;;                                              0 COMMON     5     1      4
  4025 ;; ---------------------------------------------------------------------------------
  4026 ;; Estimated maximum stack depth 11
  4027 ;; ---------------------------------------------------------------------------------
  4028 ;; Call Graph Graphs:
  4029 ;; _main (ROOT)
  4030 ;;   _Initialize
  4031 ;;     _vmemset
  4032 ;;   _SPI_Init
  4033 ;;   _AD7758_init
  4034 ;;     _AD7758_CS
  4035 ;;       _Delay
  4036 ;;     _AD7758_SendData
  4037 ;;       _spiSendByte
  4038 ;;     _Delay
  4039 ;;   _get_address
  4040 ;;   _OS_Init
  4041 ;;     __OS_ReturnSave
  4042 ;;     __OS_EnterWaitMode
  4043 ;;       __OS_ClrReadySetClrCanContinue
  4044 ;;     __OS_EnterWaitModeTO
  4045 ;;       __OS_ClrReadySetClrCanContinue
  4046 ;;     __OS_CheckEvent
  4047 ;;     __OS_JumpToTask
  4048 ;;   __OS_Task_Create
  4049 ;;   __OS_JumpToTask
  4050 ;;   _thread_abnormal
  4051 ;;     __OS_EnterWaitMode
  4052 ;;       __OS_ClrReadySetClrCanContinue
  4053 ;;     __OS_CheckEvent
  4054 ;;     _AD7758_check_init
  4055 ;;       _AD7758_CS
  4056 ;;         _Delay
  4057 ;;       _AD7758_GetData
  4058 ;;         _spiSendByte
  4059 ;;     _AD7758_init
  4060 ;;       _AD7758_CS
  4061 ;;         _Delay
  4062 ;;       _AD7758_SendData
  4063 ;;         _spiSendByte
  4064 ;;       _Delay
  4065 ;;   _thread_slip
  4066 ;;     __OS_EnterWaitMode
  4067 ;;       __OS_ClrReadySetClrCanContinue
  4068 ;;     __OS_CheckEvent
  4069 ;;     _slip_main
  4070 ;;       _processing_slipcmd
  4071 ;;         _calculateCRC8
  4072 ;;       _sendACK
  4073 ;;         _rs485_send_data
  4074 ;;           _sample_check
  4075 ;;             _Sample_ADE7758
  4076 ;;               _AD7758_CS
  4077 ;;                 _Delay
  4078 ;;               _AD7758_GetData
  4079 ;;                 _spiSendByte
  4080 ;;               ___bmul
  4081 ;;               _AD7758_SendData
  4082 ;;                 _spiSendByte
  4083 ;;       _run_cmd
  4084 ;;         _sendTemper
  4085 ;;           _calculateCRC8
  4086 ;;           _rs485_send_data
  4087 ;;             _sample_check
  4088 ;;               _Sample_ADE7758
  4089 ;;                 _AD7758_CS
  4090 ;;                   _Delay
  4091 ;;                 _AD7758_GetData
  4092 ;;                   _spiSendByte
  4093 ;;                 ___bmul
  4094 ;;                 _AD7758_SendData
  4095 ;;                   _spiSendByte
  4096 ;;         _sendPHASE
  4097 ;;           _calculateCRC8
  4098 ;;           _rs485_send_data
  4099 ;;             _sample_check
  4100 ;;               _Sample_ADE7758
  4101 ;;                 _AD7758_CS
  4102 ;;                   _Delay
  4103 ;;                 _AD7758_GetData
  4104 ;;                   _spiSendByte
  4105 ;;                 ___bmul
  4106 ;;                 _AD7758_SendData
  4107 ;;                   _spiSendByte
  4108 ;;         _sendDEV
  4109 ;;           _calculateCRC8
  4110 ;;           _rs485_send_data
  4111 ;;             _sample_check
  4112 ;;               _Sample_ADE7758
  4113 ;;                 _AD7758_CS
  4114 ;;                   _Delay
  4115 ;;                 _AD7758_GetData
  4116 ;;                   _spiSendByte
  4117 ;;                 ___bmul
  4118 ;;                 _AD7758_SendData
  4119 ;;                   _spiSendByte
  4120 ;;         _sendVER
  4121 ;;           _calculateCRC8
  4122 ;;           _rs485_send_data
  4123 ;;             _sample_check
  4124 ;;               _Sample_ADE7758
  4125 ;;                 _AD7758_CS
  4126 ;;                   _Delay
  4127 ;;                 _AD7758_GetData
  4128 ;;                   _spiSendByte
  4129 ;;                 ___bmul
  4130 ;;                 _AD7758_SendData
  4131 ;;                   _spiSendByte
  4132 ;;       _sendNACK
  4133 ;;         _rs485_send_data
  4134 ;;           _sample_check
  4135 ;;             _Sample_ADE7758
  4136 ;;               _AD7758_CS
  4137 ;;                 _Delay
  4138 ;;               _AD7758_GetData
  4139 ;;                 _spiSendByte
  4140 ;;               ___bmul
  4141 ;;               _AD7758_SendData
  4142 ;;                 _spiSendByte
  4143 ;;   _thread_Sample
  4144 ;;     __OS_EnterWaitMode
  4145 ;;       __OS_ClrReadySetClrCanContinue
  4146 ;;     __OS_CheckEvent
  4147 ;;     _Sample_ADE7758
  4148 ;;       _AD7758_CS
  4149 ;;         _Delay
  4150 ;;       _AD7758_GetData
  4151 ;;         _spiSendByte
  4152 ;;       ___bmul
  4153 ;;       _AD7758_SendData
  4154 ;;         _spiSendByte
  4155 ;;
  4156 ;; _isr (ROOT)
  4157 ;;   ___lwmod
  4158 ;;
  4159 ;; Address spaces:
  4160 ;;Name               Size   Autos  Total    Cost      Usage
  4161 ;;BIGRAM             170      0       0       0        0.0%
  4162 ;;EEDATA             100      0       0       0        0.0%
  4163 ;;NULL                 0      0       0       0        0.0%
  4164 ;;CODE                 0      0       0       0        0.0%
  4165 ;;BITCOMMON            E      0       1       1        7.1%
  4166 ;;BITSFR0              0      0       0       1        0.0%
  4167 ;;SFR0                 0      0       0       1        0.0%
  4168 ;;COMMON               E      8       C       2       85.7%
  4169 ;;BITSFR1              0      0       0       2        0.0%
  4170 ;;SFR1                 0      0       0       2        0.0%
  4171 ;;BITSFR2              0      0       0       3        0.0%
  4172 ;;SFR2                 0      0       0       3        0.0%
  4173 ;;STACK                0      0       D       3        0.0%
  4174 ;;BITSFR3              0      0       0       4        0.0%
  4175 ;;SFR3                 0      0       0       4        0.0%
  4176 ;;ABS                  0      0      9C       4        0.0%
  4177 ;;BITBANK0            50      0       0       5        0.0%
  4178 ;;BITSFR4              0      0       0       5        0.0%
  4179 ;;SFR4                 0      0       0       5        0.0%
  4180 ;;BANK0               50     34      4F       6       98.8%
  4181 ;;BITSFR5              0      0       0       6        0.0%
  4182 ;;SFR5                 0      0       0       6        0.0%
  4183 ;;BITBANK1            50      0       0       7        0.0%
  4184 ;;BITSFR6              0      0       0       7        0.0%
  4185 ;;SFR6                 0      0       0       7        0.0%
  4186 ;;BANK1               50      0      41       8       81.3%
  4187 ;;BITSFR7              0      0       0       8        0.0%
  4188 ;;SFR7                 0      0       0       8        0.0%
  4189 ;;BITBANK2            50      0       0       9        0.0%
  4190 ;;BITSFR8              0      0       0       9        0.0%
  4191 ;;SFR8                 0      0       0       9        0.0%
  4192 ;;BANK2               50      0       0      10        0.0%
  4193 ;;BITSFR9              0      0       0      10        0.0%
  4194 ;;SFR9                 0      0       0      10        0.0%
  4195 ;;BITBANK3            50      0       0      11        0.0%
  4196 ;;BITSFR10             0      0       0      11        0.0%
  4197 ;;SFR10                0      0       0      11        0.0%
  4198 ;;BANK3               1E      0       0      12        0.0%
  4199 ;;BITSFR11             0      0       0      12        0.0%
  4200 ;;SFR11                0      0       0      12        0.0%
  4201 ;;BITBANK4            30      0       0      13        0.0%
  4202 ;;BITSFR12             0      0       0      13        0.0%
  4203 ;;SFR12                0      0       0      13        0.0%
  4204 ;;BITSFR13             0      0       0      14        0.0%
  4205 ;;SFR13                0      0       0      14        0.0%
  4206 ;;BANK4                0      0       0      14        0.0%
  4207 ;;BITSFR14             0      0       0      15        0.0%
  4208 ;;SFR14                0      0       0      15        0.0%
  4209 ;;DATA                 0      0      A9      15        0.0%
  4210 ;;BITSFR15             0      0       0      16        0.0%
  4211 ;;SFR15                0      0       0      16        0.0%
  4212 ;;BITSFR16             0      0       0      17        0.0%
  4213 ;;SFR16                0      0       0      17        0.0%
  4214 ;;BITSFR17             0      0       0      18        0.0%
  4215 ;;SFR17                0      0       0      18        0.0%
  4216 ;;BITSFR18             0      0       0      19        0.0%
  4217 ;;SFR18                0      0       0      19        0.0%
  4218 ;;BITSFR19             0      0       0      20        0.0%
  4219 ;;SFR19                0      0       0      20        0.0%
  4220 ;;BITSFR20             0      0       0      21        0.0%
  4221 ;;SFR20                0      0       0      21        0.0%
  4222 ;;BITSFR21             0      0       0      22        0.0%
  4223 ;;SFR21                0      0       0      22        0.0%
  4224 ;;BITSFR22             0      0       0      23        0.0%
  4225 ;;SFR22                0      0       0      23        0.0%
  4226 ;;BITSFR23             0      0       0      24        0.0%
  4227 ;;SFR23                0      0       0      24        0.0%
  4228 ;;BITSFR24             0      0       0      25        0.0%
  4229 ;;SFR24                0      0       0      25        0.0%
  4230 ;;BITSFR25             0      0       0      26        0.0%
  4231 ;;SFR25                0      0       0      26        0.0%
  4232 ;;BITSFR26             0      0       0      27        0.0%
  4233 ;;SFR26                0      0       0      27        0.0%
  4234 ;;BITSFR27             0      0       0      28        0.0%
  4235 ;;SFR27                0      0       0      28        0.0%
  4236 ;;BITSFR28             0      0       0      29        0.0%
  4237 ;;SFR28                0      0       0      29        0.0%
  4238 ;;BITSFR29             0      0       0      30        0.0%
  4239 ;;SFR29                0      0       0      30        0.0%
  4240 ;;BITSFR30             0      0       0      31        0.0%
  4241 ;;SFR30                0      0       0      31        0.0%
  4242 ;;BITSFR31             0      0       0      32        0.0%
  4243 ;;SFR31                0      0       0      32        0.0%
  4244                           
  4245                           
  4246 ;; *************** function _main *****************
  4247 ;; Defined at:
  4248 ;;		line 321 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\main.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;		None
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  i               1   51[BANK0 ] unsigned char 
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  2  3022[COMMON] int 
  4255 ;; Registers used:
  4256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4257 ;; Tracked objects:
  4258 ;;		On entry : 17F/0
  4259 ;;		On exit  : 1F/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4262 ;;      Params:         0       0       0       0       0       0
  4263 ;;      Locals:         0       1       0       0       0       0
  4264 ;;      Temps:          0       0       0       0       0       0
  4265 ;;      Totals:         0       1       0       0       0       0
  4266 ;;Total ram usage:        1 bytes
  4267 ;; Hardware stack levels required when called:   11
  4268 ;; This function calls:
  4269 ;;		_Initialize
  4270 ;;		_SPI_Init
  4271 ;;		_AD7758_init
  4272 ;;		_get_address
  4273 ;;		_OS_Init
  4274 ;;		__OS_Task_Create
  4275 ;;		__OS_JumpToTask
  4276 ;;		_thread_abnormal
  4277 ;;		_thread_slip
  4278 ;;		_thread_Sample
  4279 ;; This function is called by:
  4280 ;;		Startup code after reset
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283  0E69                     _main:	
  4284                           
  4285                           ;main.c: 322: uchar i;
  4286                           ;main.c: 323: Initialize();
  4287                           
  4288                           ; Regs used in _main: [wreg-status,0+pclath+cstack]
  4289  0E69  3182  2251  3188   	fcall	_Initialize
  4290                           
  4291                           ;main.c: 324: SPI_Init();
  4292  0E6C  27CA  3188         	fcall	_SPI_Init
  4293                           
  4294                           ;main.c: 325: AD7758_init(1);
  4295  0E6E  3001               	movlw	1
  4296  0E6F  26B8  3188         	fcall	_AD7758_init
  4297                           
  4298                           ;main.c: 327: AD7758_init(2);
  4299  0E71  3002               	movlw	2
  4300  0E72  26B8  3188         	fcall	_AD7758_init
  4301                           
  4302                           ;main.c: 329: RA7 = 0;
  4303  0E74  138C               	bcf	12,7
  4304  0E75  0064               	clrwdt	;#
  4305                           
  4306                           ;util.c: 15: return 0x0f;
  4307                           
  4308                           ; Regs used in _get_address: [wreg]
  4309                           
  4310                           ;main.c: 331: gucDevAddr = get_address();
  4311  0E76  300F               	movlw	15
  4312  0E77  0020               	movlb	0	; select bank0
  4313  0E78  00DF               	movwf	_gucDevAddr
  4314                           
  4315                           ;main.c: 332: OS_Init();
  4316  0E79  2040  3188         	fcall	_OS_Init
  4317                           
  4318                           ;main.c: 333: for(i = 0; i < 3; i++)
  4319  0E7B  01D3               	clrf	main@i
  4320  0E7C                     l12538:	
  4321                           
  4322                           ;main.c: 334: {
  4323                           ;main.c: 335: { _OS_Task_Create(i, (OST_CODE_POINTER)0x0103 + (i << 1)); };
  4324  0E7C  0853               	movf	main@i,w
  4325  0E7D  00A0               	movwf	?__OS_Task_Create
  4326  0E7E  3003               	movlw	3
  4327  0E7F  01A1               	clrf	?__OS_Task_Create+1
  4328  0E80  35A0               	lslf	?__OS_Task_Create,f
  4329  0E81  0DA1               	rlf	?__OS_Task_Create+1,f
  4330  0E82  07A0               	addwf	?__OS_Task_Create,f
  4331  0E83  3001               	movlw	1
  4332  0E84  3DA1               	addwfc	?__OS_Task_Create+1,f
  4333  0E85  0853               	movf	main@i,w
  4334  0E86  27DA  3188         	fcall	__OS_Task_Create
  4335  0E88  3003               	movlw	3
  4336  0E89  0AD3               	incf	main@i,f
  4337  0E8A  0253               	subwf	main@i,w
  4338  0E8B  1C03               	skipc
  4339  0E8C  2E7C               	goto	l12538
  4340                           
  4341                           ;main.c: 336: }
  4342                           ;main.c: 337: do { GIE = 1; } while (0);
  4343  0E8D  178B               	bsf	11,7
  4344  0E8E  0064               	clrwdt	;#
  4345  0E8F                     l12544:	
  4346  0E8F  0020               	movlb	0	; select bank0
  4347  0E90  3068               	movlw	(__OS_Tasks+8)& (0+255)
  4348  0E91  01DE               	clrf	__OS_Temp
  4349  0E92  025C               	subwf	__OS_CurTask,w	;volatile
  4350  0E93  1C03               	skipc
  4351  0E94  2E98               	goto	l12550
  4352  0E95  3060               	movlw	__OS_Tasks& (0+255)
  4353  0E96  00DC               	movwf	__OS_CurTask	;volatile
  4354  0E97  2E9A               	goto	l12552
  4355  0E98                     l12550:	
  4356  0E98  3004               	movlw	4
  4357  0E99  07DC               	addwf	__OS_CurTask,f	;volatile
  4358  0E9A                     l12552:	
  4359  0E9A  085C               	movf	__OS_CurTask,w	;volatile
  4360  0E9B  0084               	movwf	4	;volatile
  4361  0E9C  0185               	clrf	5	;volatile
  4362  0E9D  1B00               	btfsc	0,6
  4363  0E9E  1B80               	btfsc	0,7
  4364  0E9F  2E8F               	goto	l12544
  4365  0EA0  1E00               	btfss	0,4
  4366  0EA1  2EA4               	goto	l12564
  4367  0EA2  1E80               	btfss	0,5
  4368  0EA3  2E8F               	goto	l12544
  4369  0EA4                     l12564:	
  4370  0EA4  2719  3188         	fcall	__OS_JumpToTask
  4371  0EA6  0020               	movlb	0	;#
  4372  0EA7  2E8F               	goto	l12544
  4373  0EA8                     l12574:	
  4374                           
  4375                           ;main.c: 341: {
  4376                           ;main.c: 342: fun_array[i]();
  4377  0EA8  0853               	movf	main@i,w
  4378  0EA9  3E6C               	addlw	_fun_array& (0+255)
  4379  0EAA  0086               	movwf	6
  4380  0EAB  0187               	clrf	7
  4381  0EAC  0801               	movf	1,w
  4382  0EAD  3181  2100  3188   	fcall	fptable
  4383  0EB0  0020               	movlb	0	; select bank0
  4384  0EB1  3003               	movlw	3
  4385  0EB2  0AD3               	incf	main@i,f
  4386  0EB3  0253               	subwf	main@i,w
  4387  0EB4  1C03               	skipc
  4388  0EB5  2EA8               	goto	l12574
  4389  0EB6  3180  28B1         	ljmp	start
  4390  0EB8                     __end_of_main:	
  4391  0EB8                     __ptext782:	
  4392 ;; =============== function _Sample_ADE7758 ends ============
  4393                           
  4394                           
  4395 ;; *************** function _AD7758_init *****************
  4396 ;; Defined at:
  4397 ;;		line 101 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\ADE7758.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  chip            1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  chip            1   10[BANK0 ] unsigned char 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;		None               void
  4404 ;; Registers used:
  4405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 1F/0
  4408 ;;		On exit  : 1F/0
  4409 ;;		Unchanged: FFFE0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4411 ;;      Params:         0       0       0       0       0       0
  4412 ;;      Locals:         0       1       0       0       0       0
  4413 ;;      Temps:          0       0       0       0       0       0
  4414 ;;      Totals:         0       1       0       0       0       0
  4415 ;;Total ram usage:        1 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    4
  4418 ;; This function calls:
  4419 ;;		_AD7758_CS
  4420 ;;		_AD7758_SendData
  4421 ;;		_Delay
  4422 ;; This function is called by:
  4423 ;;		_thread_abnormal
  4424 ;;		_main
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427  0EB8                     _AD7758_init:	
  4428                           
  4429                           ; Regs used in _AD7758_init: [wreg+fsr1l-status,0+pclath+cstack]
  4430                           ;AD7758_init@chip stored from wreg
  4431  0EB8  00AA               	movwf	AD7758_init@chip
  4432                           
  4433                           ;ADE7758.c: 103: AD7758_CS(chip, 1);
  4434  0EB9  01A8               	clrf	?_AD7758_CS
  4435  0EBA  0AA8               	incf	?_AD7758_CS,f
  4436  0EBB  2091  3188         	fcall	_AD7758_CS
  4437                           
  4438                           ;ADE7758.c: 106: SendData[0] = 0x40;
  4439                           
  4440                           ;ADE7758.c: 107: AD7758_SendData(0x13,1,chip);
  4441  0EBD  27B7  3188         	fcall	PL32	;call to abstracted procedure
  4442  0EBF  3013               	movlw	19
  4443  0EC0  26DF  3188         	fcall	_AD7758_SendData
  4444                           
  4445                           ;ADE7758.c: 108: Delay(0x20);
  4446  0EC2  3020               	movlw	32
  4447  0EC3  00A0               	movwf	?_Delay
  4448  0EC4  01A1               	clrf	?_Delay+1
  4449  0EC5  01A2               	clrf	?_Delay+2
  4450  0EC6  01A3               	clrf	?_Delay+3
  4451  0EC7  20A8  3188         	fcall	_Delay
  4452                           
  4453                           ;ADE7758.c: 110: SendData[0] = 0x00;
  4454                           
  4455                           ;ADE7758.c: 111: AD7758_SendData(0x16,1,chip);
  4456  0EC9  27BE  3188         	fcall	PL34	;call to abstracted procedure
  4457  0ECB  3016               	movlw	22
  4458  0ECC  26DF  3188         	fcall	_AD7758_SendData
  4459                           
  4460                           ;ADE7758.c: 113: SendData[0] = 0x40;
  4461                           
  4462                           ;ADE7758.c: 114: AD7758_SendData(0x17,1,chip);
  4463  0ECE  27B7  3188         	fcall	PL32	;call to abstracted procedure
  4464  0ED0  3017               	movlw	23
  4465  0ED1  26DF  3188         	fcall	_AD7758_SendData
  4466                           
  4467                           ;ADE7758.c: 116: SendData[0] = 0x00;
  4468                           
  4469                           ;ADE7758.c: 117: AD7758_SendData(0x14,1,chip);
  4470  0ED3  27BE  3188         	fcall	PL34	;call to abstracted procedure
  4471  0ED5  3014               	movlw	20
  4472  0ED6  26DF  3188         	fcall	_AD7758_SendData
  4473                           
  4474                           ;ADE7758.c: 118: FreqPhase[0] = 1;
  4475  0ED8  01DA               	clrf	_FreqPhase
  4476  0ED9  0ADA               	incf	_FreqPhase,f
  4477                           
  4478                           ;ADE7758.c: 119: FreqPhase[1] = 1;
  4479  0EDA  01DB               	clrf	_FreqPhase+1
  4480  0EDB  0ADB               	incf	_FreqPhase+1,f
  4481                           
  4482                           ;ADE7758.c: 122: AD7758_CS(chip, 0);
  4483  0EDC  01A8               	clrf	?_AD7758_CS
  4484  0EDD  082A               	movf	AD7758_init@chip,w
  4485  0EDE  2891               	ljmp	_AD7758_CS
  4486  0EDF                     __end_of_AD7758_init:	
  4487  0EDF                     __ptext787:	
  4488 ;; =============== function _Initialize ends ============
  4489                           
  4490                           
  4491 ;; *************** function _AD7758_SendData *****************
  4492 ;; Defined at:
  4493 ;;		line 70 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\ADE7758.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;  addr            1    wreg     unsigned char 
  4496 ;;  num             1    6[BANK0 ] unsigned char 
  4497 ;;  chip            1    7[BANK0 ] unsigned char 
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;  addr            1    8[BANK0 ] unsigned char 
  4500 ;;  i               1    9[BANK0 ] unsigned char 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;		None               void
  4503 ;; Registers used:
  4504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 1F/0
  4507 ;;		On exit  : 1F/0
  4508 ;;		Unchanged: FFFE0/0
  4509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4510 ;;      Params:         0       2       0       0       0       0
  4511 ;;      Locals:         0       2       0       0       0       0
  4512 ;;      Temps:          0       0       0       0       0       0
  4513 ;;      Totals:         0       4       0       0       0       0
  4514 ;;Total ram usage:        4 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; Hardware stack levels required when called:    3
  4517 ;; This function calls:
  4518 ;;		_spiSendByte
  4519 ;; This function is called by:
  4520 ;;		_AD7758_init
  4521 ;;		_Sample_ADE7758
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524  0EDF                     _AD7758_SendData:	
  4525                           
  4526                           ; Regs used in _AD7758_SendData: [wreg+fsr1l-status,0+pclath+cstack]
  4527                           ;AD7758_SendData@addr stored from wreg
  4528  0EDF  00A8               	movwf	AD7758_SendData@addr
  4529                           
  4530                           ;ADE7758.c: 71: uchar i;
  4531                           ;ADE7758.c: 87: spiSendByte(addr|0x80);
  4532  0EE0  3880               	iorlw	128
  4533  0EE1  26F1  3188         	fcall	_spiSendByte
  4534                           
  4535                           ;ADE7758.c: 88: for(i=0;i<num;i++)
  4536  0EE3  01A9               	clrf	AD7758_SendData@i
  4537  0EE4                     l11726:	
  4538  0EE4  0826               	movf	AD7758_SendData@num,w
  4539  0EE5  0229               	subwf	AD7758_SendData@i,w
  4540  0EE6  1803               	btfsc	3,0
  4541  0EE7  0008               	return
  4542                           
  4543                           ;ADE7758.c: 89: {
  4544                           ;ADE7758.c: 90: spiSendByte (SendData[i]);
  4545  0EE8  0829               	movf	AD7758_SendData@i,w
  4546  0EE9  3E57               	addlw	_SendData& (0+255)
  4547  0EEA  0086               	movwf	6
  4548  0EEB  0187               	clrf	7
  4549  0EEC  0801               	movf	1,w
  4550  0EED  26F1  3188         	fcall	_spiSendByte
  4551  0EEF  0AA9               	incf	AD7758_SendData@i,f
  4552  0EF0  2EE4               	goto	l11726
  4553  0EF1                     __end_of_AD7758_SendData:	
  4554  0EF1                     __ptext800:	
  4555 ;; =============== function _vmemset ends ============
  4556                           
  4557                           
  4558 ;; *************** function _spiSendByte *****************
  4559 ;; Defined at:
  4560 ;;		line 28 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\util.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  spi_data        1    wreg     unsigned char 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  spi_data        1    0[BANK0 ] unsigned char 
  4565 ;;  cc              4    1[BANK0 ] unsigned long 
  4566 ;;  spi_tmp         1    5[BANK0 ] unsigned char 
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      unsigned char 
  4569 ;; Registers used:
  4570 ;;		wreg, status,2, status,0
  4571 ;; Tracked objects:
  4572 ;;		On entry : 1F/0
  4573 ;;		On exit  : 1F/0
  4574 ;;		Unchanged: FFFE0/0
  4575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4576 ;;      Params:         0       0       0       0       0       0
  4577 ;;      Locals:         0       6       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0       0
  4579 ;;      Totals:         0       6       0       0       0       0
  4580 ;;Total ram usage:        6 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    2
  4583 ;; This function calls:
  4584 ;;		Nothing
  4585 ;; This function is called by:
  4586 ;;		_AD7758_GetData
  4587 ;;		_AD7758_SendData
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590  0EF1                     _spiSendByte:	
  4591                           
  4592                           ; Regs used in _spiSendByte: [wreg+status,2+status,0]
  4593                           ;spiSendByte@spi_data stored from wreg
  4594  0EF1  00A0               	movwf	spiSendByte@spi_data
  4595                           
  4596                           ;util.c: 30: ulong cc = 0;
  4597  0EF2  01A1               	clrf	spiSendByte@cc
  4598  0EF3  01A2               	clrf	spiSendByte@cc+1
  4599  0EF4  01A3               	clrf	spiSendByte@cc+2
  4600  0EF5  01A4               	clrf	spiSendByte@cc+3
  4601                           
  4602                           ;util.c: 31: SSPBUF=spi_data;
  4603  0EF6  0024               	movlb	4	; select bank4
  4604  0EF7  0091               	movwf	17	;volatile
  4605                           
  4606                           ;util.c: 32: while((!SSP1IF)&&(cc < 0x0fffffff))
  4607  0EF8  2F10               	goto	l11392
  4608  0EF9                     l11394:	
  4609  0EF9  300F               	movlw	15
  4610  0EFA  0224               	subwf	spiSendByte@cc+3,w
  4611  0EFB  1D03               	skipz
  4612  0EFC  2F07               	goto	u935
  4613  0EFD  30FF               	movlw	255
  4614  0EFE  0223               	subwf	spiSendByte@cc+2,w
  4615  0EFF  1D03               	skipz
  4616  0F00  2F07               	goto	u935
  4617  0F01  30FF               	movlw	255
  4618  0F02  0222               	subwf	spiSendByte@cc+1,w
  4619  0F03  1D03               	skipz
  4620  0F04  2F07               	goto	u935
  4621  0F05  30FF               	movlw	255
  4622  0F06  0221               	subwf	spiSendByte@cc,w
  4623  0F07                     u935:	
  4624  0F07  1803               	btfsc	3,0
  4625  0F08  2F13               	goto	l11396
  4626                           
  4627                           ;util.c: 33: {
  4628                           ;util.c: 34: cc++;
  4629  0F09  0AA1               	incf	spiSendByte@cc,f
  4630  0F0A  1903               	skipnz
  4631  0F0B  0AA2               	incf	spiSendByte@cc+1,f
  4632  0F0C  1903               	skipnz
  4633  0F0D  0AA3               	incf	spiSendByte@cc+2,f
  4634  0F0E  1903               	skipnz
  4635  0F0F  0AA4               	incf	spiSendByte@cc+3,f
  4636  0F10                     l11392:	
  4637  0F10  0020               	movlb	0	; select bank0
  4638  0F11  1D91               	btfss	17,3
  4639  0F12  2EF9               	goto	l11394
  4640  0F13                     l11396:	
  4641                           
  4642                           ;util.c: 35: }
  4643                           ;util.c: 36: spi_tmp = SSPBUF;
  4644  0F13  0024               	movlb	4	; select bank4
  4645  0F14  0811               	movf	17,w	;volatile
  4646  0F15  0020               	movlb	0	; select bank0
  4647  0F16  00A5               	movwf	spiSendByte@spi_tmp
  4648                           
  4649                           ;util.c: 37: SSP1IF = 0;
  4650  0F17  1191               	bcf	17,3
  4651                           
  4652                           ;util.c: 38: return spi_tmp;
  4653  0F18  0008               	return
  4654  0F19                     __end_of_spiSendByte:	
  4655  0F19                     __ptext794:	
  4656 ;; =============== function _calculateCRC8 ends ============
  4657                           
  4658                           
  4659 ;; *************** function __OS_JumpToTask *****************
  4660 ;; Defined at:
  4661 ;;		line 51 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\port\pic16\osa_pic16e_htpicc_pro.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;		None               void
  4668 ;; Registers used:
  4669 ;;		wreg, status,2
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: FFE00/0
  4674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4675 ;;      Params:         0       0       0       0       0       0
  4676 ;;      Locals:         0       0       0       0       0       0
  4677 ;;      Temps:          0       0       0       0       0       0
  4678 ;;      Totals:         0       0       0       0       0       0
  4679 ;;Total ram usage:        0 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    2
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;;		_OS_Init
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689  0F19                     __OS_JumpToTask:	
  4690                           
  4691                           ;osa_pic16e_htpicc_pro.c: 53: {FSR0L = (OS_FSR_TYPE)_OS_CurTask; FSR0H = 0; asm(" dw 0x3
      +                          100 +""1 + 1");};
  4692                           
  4693                           ; Regs used in __OS_JumpToTask: [wreg+status,2]
  4694  0F19  0020               	movlb	0	; select bank0
  4695  0F1A  085C               	movf	__OS_CurTask,w	;volatile
  4696  0F1B  0084               	movwf	4	;volatile
  4697  0F1C  0185               	clrf	5	;volatile
  4698  0F1D  3102               	dw	12546	;#
  4699  0F1E  0013               	dw	19	;#
  4700  0F1F  008A               	dw	138	;#
  4701  0F20  0013               	dw	19	;#
  4702  0F21  0082               	dw	130	;#
  4703  0F22  0008               	return
  4704  0F23                     __end_of__OS_JumpToTask:	
  4705  0F23                     PL2:	
  4706  0F23  00AD               	movwf	??_Sample_ADE7758+3
  4707  0F24  3000               	movlw	0
  4708  0F25  3D2C               	addwfc	??_Sample_ADE7758+2,w
  4709  0F26  00AE               	movwf	??_Sample_ADE7758+4
  4710  0F27  082D               	movf	??_Sample_ADE7758+3,w
  4711  0F28  0086               	movwf	6
  4712  0F29  082E               	movf	??_Sample_ADE7758+4,w
  4713  0F2A  0087               	movwf	7
  4714  0F2B  082A               	movf	??_Sample_ADE7758,w
  4715  0F2C  0081               	movwf	1
  4716  0F2D  0008               	return
  4717  0F2E                     PL3:	
  4718  0F2E  0086               	movwf	6
  4719  0F2F  3000               	movlw	0
  4720  0F30  3D35               	addwfc	??_Sample_ADE7758+11,w
  4721  0F31  0087               	movwf	7
  4722  0F32  0801               	movf	1,w
  4723  0F33  00B6               	movwf	??_Sample_ADE7758+12
  4724  0F34  01B7               	clrf	??_Sample_ADE7758+13
  4725  0F35  01B8               	clrf	??_Sample_ADE7758+14
  4726  0F36  01B9               	clrf	??_Sample_ADE7758+15
  4727  0F37  0855               	movf	_ReadData+1,w
  4728  0F38  00BA               	movwf	??_Sample_ADE7758+16
  4729  0F39  01BB               	clrf	??_Sample_ADE7758+17
  4730  0F3A  01BC               	clrf	??_Sample_ADE7758+18
  4731  0F3B  01BD               	clrf	??_Sample_ADE7758+19
  4732  0F3C  07B6               	addwf	??_Sample_ADE7758+12,f
  4733  0F3D  083B               	movf	??_Sample_ADE7758+17,w
  4734  0F3E  3DB7               	addwfc	??_Sample_ADE7758+13,f
  4735  0F3F  083C               	movf	??_Sample_ADE7758+18,w
  4736  0F40  3DB8               	addwfc	??_Sample_ADE7758+14,f
  4737  0F41  083D               	movf	??_Sample_ADE7758+19,w
  4738  0F42  3DB9               	addwfc	??_Sample_ADE7758+15,f
  4739  0F43  0836               	movf	??_Sample_ADE7758+12,w
  4740  0F44  07AC               	addwf	??_Sample_ADE7758+2,f
  4741  0F45  0837               	movf	??_Sample_ADE7758+13,w
  4742  0F46  3DAD               	addwfc	??_Sample_ADE7758+3,f
  4743  0F47  0838               	movf	??_Sample_ADE7758+14,w
  4744  0F48  3DAE               	addwfc	??_Sample_ADE7758+4,f
  4745  0F49  0839               	movf	??_Sample_ADE7758+15,w
  4746  0F4A  3DAF               	addwfc	??_Sample_ADE7758+5,f
  4747  0F4B  36AF               	lsrf	??_Sample_ADE7758+5,f
  4748  0F4C  0CAE               	rrf	??_Sample_ADE7758+4,f
  4749  0F4D  0CAD               	rrf	??_Sample_ADE7758+3,f
  4750  0F4E  0CAC               	rrf	??_Sample_ADE7758+2,f
  4751  0F4F  082D               	movf	??_Sample_ADE7758+3,w
  4752  0F50  00BF               	movwf	Sample_ADE7758@sum+1
  4753  0F51  082C               	movf	??_Sample_ADE7758+2,w
  4754  0F52  00BE               	movwf	Sample_ADE7758@sum
  4755  0F53  083F               	movf	Sample_ADE7758@sum+1,w
  4756  0F54  00AA               	movwf	??_Sample_ADE7758
  4757  0F55  3031               	movlw	49
  4758  0F56  00A0               	movwf	?___bmul
  4759  0F57  0840               	movf	Sample_ADE7758@chip,w
  4760  0F58  0008               	return
  4761  0F59                     PL4:	
  4762  0F59  0086               	movwf	6
  4763  0F5A  3000               	movlw	0
  4764  0F5B  3D2B               	addwfc	??_Sample_ADE7758+1,w
  4765  0F5C  0087               	movwf	7
  4766  0F5D  0801               	movf	1,w
  4767  0F5E  00AC               	movwf	??_Sample_ADE7758+2
  4768  0F5F  01AD               	clrf	??_Sample_ADE7758+3
  4769  0F60  01AE               	clrf	??_Sample_ADE7758+4
  4770  0F61  01AF               	clrf	??_Sample_ADE7758+5
  4771  0F62  0854               	movf	_ReadData,w
  4772  0F63  00B0               	movwf	??_Sample_ADE7758+6
  4773  0F64  01B1               	clrf	??_Sample_ADE7758+7
  4774  0F65  01B2               	clrf	??_Sample_ADE7758+8
  4775  0F66  01B3               	clrf	??_Sample_ADE7758+9
  4776  0F67  07AC               	addwf	??_Sample_ADE7758+2,f
  4777  0F68  0831               	movf	??_Sample_ADE7758+7,w
  4778  0F69  3DAD               	addwfc	??_Sample_ADE7758+3,f
  4779  0F6A  0832               	movf	??_Sample_ADE7758+8,w
  4780  0F6B  3DAE               	addwfc	??_Sample_ADE7758+4,f
  4781  0F6C  0833               	movf	??_Sample_ADE7758+9,w
  4782  0F6D  3DAF               	addwfc	??_Sample_ADE7758+5,f
  4783  0F6E  082E               	movf	??_Sample_ADE7758+4,w
  4784  0F6F  00AF               	movwf	??_Sample_ADE7758+5
  4785  0F70  082D               	movf	??_Sample_ADE7758+3,w
  4786  0F71  00AE               	movwf	??_Sample_ADE7758+4
  4787  0F72  082C               	movf	??_Sample_ADE7758+2,w
  4788  0F73  00AD               	movwf	??_Sample_ADE7758+3
  4789  0F74  3031               	movlw	49
  4790  0F75  01AC               	clrf	??_Sample_ADE7758+2
  4791  0F76  00A0               	movwf	?___bmul
  4792  0F77  0840               	movf	Sample_ADE7758@chip,w
  4793  0F78  0008               	return
  4794  0F79                     PL5:	
  4795  0F79  3EDD               	addlw	221
  4796  0F7A  00AB               	movwf	??_Sample_ADE7758+1
  4797  0F7B  3020               	movlw	32
  4798  0F7C  1803               	skipnc
  4799  0F7D  0A89               	incf	9,f
  4800  0F7E  00AC               	movwf	??_Sample_ADE7758+2
  4801  0F7F  082B               	movf	??_Sample_ADE7758+1,w
  4802  0F80  0008               	return
  4803  0F81                     PL11:	
  4804  0F81  0086               	movwf	6
  4805  0F82  3000               	movlw	0
  4806  0F83  3D2F               	addwfc	??_Sample_ADE7758+5,w
  4807  0F84  0087               	movwf	7
  4808  0F85  082A               	movf	??_Sample_ADE7758,w
  4809  0F86  0781               	addwf	1,f
  4810  0F87  3141               	addfsr 1,1
  4811  0F88  082B               	movf	??_Sample_ADE7758+1,w
  4812  0F89  3D81               	addwfc	1,f
  4813  0F8A  3141               	addfsr 1,1
  4814  0F8B  082C               	movf	??_Sample_ADE7758+2,w
  4815  0F8C  3D81               	addwfc	1,f
  4816  0F8D  3141               	addfsr 1,1
  4817  0F8E  082D               	movf	??_Sample_ADE7758+3,w
  4818  0F8F  3D81               	addwfc	1,f
  4819  0F90  0008               	return
  4820  0F91                     PL14:	
  4821  0F91  00AA               	movwf	??_Sample_ADE7758
  4822  0F92  3031               	movlw	49
  4823  0F93  00A0               	movwf	?___bmul
  4824  0F94  0840               	movf	Sample_ADE7758@chip,w
  4825  0F95  0008               	return
  4826  0F96                     PL15:	
  4827  0F96  3EDD               	addlw	221
  4828  0F97  00B4               	movwf	??_Sample_ADE7758+10
  4829  0F98  3020               	movlw	32
  4830  0F99  1803               	skipnc
  4831  0F9A  0A89               	incf	9,f
  4832  0F9B  00B5               	movwf	??_Sample_ADE7758+11
  4833  0F9C  0834               	movf	??_Sample_ADE7758+10,w
  4834  0F9D  0008               	return
  4835  0F9E                     PL16:	
  4836  0F9E  3EDD               	addlw	221
  4837  0F9F  00AA               	movwf	??_Sample_ADE7758
  4838  0FA0  3020               	movlw	32
  4839  0FA1  1803               	skipnc
  4840  0FA2  0A89               	incf	9,f
  4841  0FA3  00AB               	movwf	??_Sample_ADE7758+1
  4842  0FA4  082A               	movf	??_Sample_ADE7758,w
  4843  0FA5  0008               	return
  4844  0FA6                     PL20:	
  4845  0FA6  00AA               	movwf	??_Sample_ADE7758
  4846  0FA7  083F               	movf	Sample_ADE7758@sum+1,w
  4847  0FA8  00AB               	movwf	??_Sample_ADE7758+1
  4848  0FA9  3031               	movlw	49
  4849  0FAA  01AC               	clrf	??_Sample_ADE7758+2
  4850  0FAB  01AD               	clrf	??_Sample_ADE7758+3
  4851  0FAC  00A0               	movwf	?___bmul
  4852  0FAD  0840               	movf	Sample_ADE7758@chip,w
  4853  0FAE  0008               	return
  4854  0FAF                     PL24:	
  4855  0FAF  3EDD               	addlw	221
  4856  0FB0  00AE               	movwf	??_Sample_ADE7758+4
  4857  0FB1  3020               	movlw	32
  4858  0FB2  1803               	skipnc
  4859  0FB3  0A89               	incf	9,f
  4860  0FB4  00AF               	movwf	??_Sample_ADE7758+5
  4861  0FB5  082E               	movf	??_Sample_ADE7758+4,w
  4862  0FB6  0008               	return
  4863  0FB7                     PL32:	
  4864  0FB7  3040               	movlw	64
  4865  0FB8  00D7               	movwf	_SendData
  4866  0FB9  01A6               	clrf	?_AD7758_SendData
  4867  0FBA  0AA6               	incf	?_AD7758_SendData,f
  4868  0FBB  082A               	movf	AD7758_init@chip,w
  4869  0FBC  00A7               	movwf	?_AD7758_SendData+1
  4870  0FBD  0008               	return
  4871  0FBE                     PL34:	
  4872  0FBE  01D7               	clrf	_SendData
  4873  0FBF  01A6               	clrf	?_AD7758_SendData
  4874  0FC0  0AA6               	incf	?_AD7758_SendData,f
  4875  0FC1  082A               	movf	AD7758_init@chip,w
  4876  0FC2  00A7               	movwf	?_AD7758_SendData+1
  4877  0FC3  0008               	return
  4878  0FC4                     PL35:	
  4879  0FC4  0840               	movf	Sample_ADE7758@chip,w
  4880  0FC5  3E59               	addlw	(_FreqPhase+-1)& (0+255)
  4881  0FC6  0086               	movwf	6
  4882  0FC7  0187               	clrf	7
  4883  0FC8  0801               	movf	1,w
  4884  0FC9  0008               	return
  4885  0FCA                     __ptext798:	
  4886 ;; =============== function __OS_CheckEvent ends ============
  4887                           
  4888                           
  4889 ;; *************** function _SPI_Init *****************
  4890 ;; Defined at:
  4891 ;;		line 128 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\main.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;		None
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg
  4900 ;; Tracked objects:
  4901 ;;		On entry : 17F/0
  4902 ;;		On exit  : 17F/0
  4903 ;;		Unchanged: FFE80/0
  4904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4905 ;;      Params:         0       0       0       0       0       0
  4906 ;;      Locals:         0       0       0       0       0       0
  4907 ;;      Temps:          0       0       0       0       0       0
  4908 ;;      Totals:         0       0       0       0       0       0
  4909 ;;Total ram usage:        0 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    2
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_main
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918  0FCA                     _SPI_Init:	
  4919                           
  4920                           ;main.c: 130: SSP1CON1bits.SSPEN=0;
  4921                           
  4922                           ; Regs used in _SPI_Init: [wreg]
  4923  0FCA  0024               	movlb	4	; select bank4
  4924  0FCB  1295               	bcf	21,5	;volatile
  4925                           
  4926                           ;main.c: 132: SSP1CON1bits.SSPM0 = 0;
  4927  0FCC  1015               	bcf	21,0	;volatile
  4928                           
  4929                           ;main.c: 133: SSP1CON1bits.SSPM1 = 1;
  4930  0FCD  1495               	bsf	21,1	;volatile
  4931                           
  4932                           ;main.c: 134: SSP1CON1bits.SSPM2 = 0;
  4933  0FCE  1115               	bcf	21,2	;volatile
  4934                           
  4935                           ;main.c: 135: SSP1CON1bits.SSPM3 = 1;
  4936  0FCF  1595               	bsf	21,3	;volatile
  4937                           
  4938                           ;main.c: 136: SSP1ADD = 3;
  4939  0FD0  3003               	movlw	3
  4940  0FD1  0092               	movwf	18	;volatile
  4941                           
  4942                           ;main.c: 138: SSP2STATbits.SMP=1;
  4943  0FD2  179C               	bsf	28,7	;volatile
  4944                           
  4945                           ;main.c: 140: SSP2STATbits.CKE=1;
  4946  0FD3  171C               	bsf	28,6	;volatile
  4947                           
  4948                           ;main.c: 141: SSP2CON1bits.CKP = 0;
  4949  0FD4  121D               	bcf	29,4	;volatile
  4950                           
  4951                           ;main.c: 142: SSP1CON1bits.SSPEN=1;
  4952  0FD5  1695               	bsf	21,5	;volatile
  4953                           
  4954                           ;main.c: 144: RB3=1;
  4955  0FD6  0020               	movlb	0	; select bank0
  4956  0FD7  158D               	bsf	13,3
  4957                           
  4958                           ;main.c: 145: RB0=1;
  4959  0FD8  140D               	bsf	13,0
  4960  0FD9  0008               	return
  4961  0FDA                     __end_of_SPI_Init:	
  4962  0FDA                     __ptext795:	
  4963 ;; =============== function __OS_JumpToTask ends ============
  4964                           
  4965                           
  4966 ;; *************** function __OS_Task_Create *****************
  4967 ;; Defined at:
  4968 ;;		line 76 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\kernel\system\osa_tasks.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  priority        1    wreg     unsigned char 
  4971 ;;  TaskAddr        2    0[BANK0 ] unsigned int 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  priority        1    2[BANK0 ] unsigned char 
  4974 ;;  Task            1    3[BANK0 ] PTR struct .
  4975 ;;		 -> _OS_Tasks(12), 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;		None               void
  4978 ;; Registers used:
  4979 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4980 ;; Tracked objects:
  4981 ;;		On entry : 1F/0
  4982 ;;		On exit  : 1F/0
  4983 ;;		Unchanged: FFFE0/0
  4984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4985 ;;      Params:         0       2       0       0       0       0
  4986 ;;      Locals:         0       2       0       0       0       0
  4987 ;;      Temps:          0       0       0       0       0       0
  4988 ;;      Totals:         0       4       0       0       0       0
  4989 ;;Total ram usage:        4 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    2
  4992 ;; This function calls:
  4993 ;;		Nothing
  4994 ;; This function is called by:
  4995 ;;		_main
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998  0FDA                     __OS_Task_Create:	
  4999                           
  5000                           ; Regs used in __OS_Task_Create: [wreg+fsr1l-status,0]
  5001                           ;__OS_Task_Create@priority stored from wreg
  5002  0FDA  00A2               	movwf	__OS_Task_Create@priority
  5003                           
  5004                           ;osa_tasks.c: 77: OST_TASK_POINTER Task;
  5005                           ;osa_tasks.c: 79: _OS_Flags.bError = 0;
  5006  0FDB  10DD               	bcf	__OS_Flags,1	;volatile
  5007                           
  5008                           ;osa_tasks.c: 88: Task = (OST_TASK_POINTER)_OS_Tasks;
  5009  0FDC  3060               	movlw	__OS_Tasks& (0+255)
  5010  0FDD  00A3               	movwf	__OS_Task_Create@Task
  5011                           
  5012                           ;osa_tasks.c: 89: _OS_Temp = 0;
  5013  0FDE  01DE               	clrf	__OS_Temp
  5014  0FDF                     l11534:	
  5015                           
  5016                           ;osa_tasks.c: 93: if (!Task->State.bEnable)
  5017  0FDF  0823               	movf	__OS_Task_Create@Task,w
  5018  0FE0  0086               	movwf	6
  5019  0FE1  0187               	clrf	7
  5020  0FE2  1B01               	btfsc	1,6
  5021  0FE3  2FF7               	goto	l11548
  5022                           
  5023                           ;osa_tasks.c: 94: {
  5024                           ;osa_tasks.c: 95: ((OST_TASK_STATE*)&priority)->bEnable = 1;
  5025  0FE4  1722               	bsf	__OS_Task_Create@priority,6
  5026                           
  5027                           ;osa_tasks.c: 96: ((OST_TASK_STATE*)&priority)->bReady = 1;
  5028  0FE5  15A2               	bsf	__OS_Task_Create@priority,3
  5029                           
  5030                           ;osa_tasks.c: 98: Task->pTaskPointer = TaskAddr;
  5031  0FE6  0823               	movf	__OS_Task_Create@Task,w
  5032  0FE7  3E01               	addlw	1
  5033  0FE8  0086               	movwf	6
  5034  0FE9  0820               	movf	__OS_Task_Create@TaskAddr,w
  5035  0FEA  3FC0               	movwi [0]fsr1
  5036  0FEB  0821               	movf	__OS_Task_Create@TaskAddr+1,w
  5037  0FEC  3FC1               	movwi [1]fsr1
  5038                           
  5039                           ;osa_tasks.c: 101: Task->Timer = 0;
  5040  0FED  0823               	movf	__OS_Task_Create@Task,w
  5041  0FEE  3E03               	addlw	3
  5042  0FEF  0086               	movwf	6
  5043  0FF0  0181               	clrf	1
  5044                           
  5045                           ;osa_tasks.c: 108: *(( char*)&Task->State) = priority;
  5046  0FF1  0823               	movf	__OS_Task_Create@Task,w
  5047  0FF2  0086               	movwf	6
  5048  0FF3  0822               	movf	__OS_Task_Create@priority,w
  5049  0FF4  0081               	movwf	1
  5050                           
  5051                           ;osa_tasks.c: 126: _OS_Flags.bError = 0;
  5052  0FF5  10DD               	bcf	__OS_Flags,1	;volatile
  5053  0FF6  0008               	return
  5054  0FF7                     l11548:	
  5055                           
  5056                           ;osa_tasks.c: 130: }
  5057                           ;osa_tasks.c: 132: Task ++;
  5058  0FF7  3004               	movlw	4
  5059  0FF8  07A3               	addwf	__OS_Task_Create@Task,f
  5060                           
  5061                           ;osa_tasks.c: 134: } while (++_OS_Temp < 3);
  5062  0FF9  3003               	movlw	3
  5063  0FFA  0ADE               	incf	__OS_Temp,f
  5064  0FFB  025E               	subwf	__OS_Temp,w
  5065  0FFC  1C03               	skipc
  5066  0FFD  2FDF               	goto	l11534
  5067                           
  5068                           ;osa_tasks.c: 137: _OS_Flags.bError = 1;
  5069  0FFE  14DD               	bsf	__OS_Flags,1	;volatile
  5070                           
  5071                           ;osa_tasks.c: 139: return ;
  5072  0FFF  0008               	return
  5073  1000                     __end_of__OS_Task_Create:	
  5074                           
  5075                           	psect	text773
  5076  0109                     __ptext773:	
  5077 ;; =============== function _sendTemper ends ============
  5078                           
  5079                           
  5080 ;; *************** function _sendPHASE *****************
  5081 ;; Defined at:
  5082 ;;		line 92 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\rs485.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;  phase           2   37[BANK0 ] unsigned int 
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;  pchip2_phase    2   45[BANK0 ] PTR struct .
  5087 ;;		 -> ADE7758Data(98), 
  5088 ;;  pchip1_phase    2   43[BANK0 ] PTR struct .
  5089 ;;		 -> ADE7758Data(98), 
  5090 ;;  idx             1   47[BANK0 ] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;		None               void
  5093 ;; Registers used:
  5094 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5095 ;; Tracked objects:
  5096 ;;		On entry : 1F/0
  5097 ;;		On exit  : 1F/0
  5098 ;;		Unchanged: FFE00/0
  5099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5100 ;;      Params:         0       2       0       0       0       0
  5101 ;;      Locals:         0       5       0       0       0       0
  5102 ;;      Temps:          0       4       0       0       0       0
  5103 ;;      Totals:         0      11       0       0       0       0
  5104 ;;Total ram usage:       11 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    7
  5107 ;; This function calls:
  5108 ;;		_calculateCRC8
  5109 ;;		_rs485_send_data
  5110 ;; This function is called by:
  5111 ;;		_run_cmd
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114  0109                     _sendPHASE:	
  5115  0109                     l12196:	
  5116                           ; Regs used in _sendPHASE: [wreg-status,0+pclath+cstack]
  5117                           
  5118                           
  5119                           ;rs485.c: 93: ADE7758_t *pchip1_phase;
  5120                           ;rs485.c: 94: ADE7758_t *pchip2_phase;
  5121                           ;rs485.c: 96: switch(phase)
  5122  0109  2923               	goto	l12206
  5123  010A                     l12198:	
  5124                           
  5125                           ;rs485.c: 99: pchip1_phase = &ADE7758Data[0].PhaseA;
  5126  010A  300E               	movlw	14
  5127  010B  00CB               	movwf	sendPHASE@pchip1_phase
  5128  010C  3021               	movlw	33
  5129  010D  00CC               	movwf	sendPHASE@pchip1_phase+1
  5130                           
  5131                           ;rs485.c: 100: pchip2_phase = &ADE7758Data[1].PhaseA;
  5132  010E  3031               	movlw	49
  5133  010F  3E0E               	addlw	14
  5134  0110  00CD               	movwf	sendPHASE@pchip2_phase
  5135  0111  3021               	movlw	33
  5136  0112  1803               	skipnc
  5137  0113  3022               	movlw	34
  5138  0114  00CE               	movwf	sendPHASE@pchip2_phase+1
  5139                           
  5140                           ;rs485.c: 101: break;
  5141  0115  2933               	goto	l12208
  5142  0116                     l12200:	
  5143                           
  5144                           ;rs485.c: 104: pchip1_phase = &ADE7758Data[0].PhaseB;
  5145  0116  3010               	movlw	16
  5146                           
  5147                           ;rs485.c: 105: pchip2_phase = &ADE7758Data[1].PhaseB;
  5148  0117  222D  3181         	fcall	PL18	;call to abstracted procedure
  5149  0119  3010               	movlw	16
  5150  011A  291F               	goto	L1
  5151  011B                     l12202:	
  5152                           ;rs485.c: 106: break;
  5153                           
  5154                           
  5155                           ;rs485.c: 109: pchip1_phase = &ADE7758Data[0].PhaseC;
  5156  011B  3020               	movlw	32
  5157                           
  5158                           ;rs485.c: 110: pchip2_phase = &ADE7758Data[1].PhaseC;
  5159  011C  222D  3181         	fcall	PL18	;call to abstracted procedure
  5160  011E  3020               	movlw	32
  5161  011F                     L1:	
  5162  011F  07CD               	addwf	sendPHASE@pchip2_phase,f
  5163  0120  1803               	skipnc
  5164  0121  0ACE               	incf	sendPHASE@pchip2_phase+1,f
  5165                           
  5166                           ;rs485.c: 111: break;
  5167  0122  2933               	goto	l12208
  5168  0123                     l12206:	
  5169                           
  5170                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5171                           ; Switch size 1, requested type "space"
  5172                           ; Number of cases is 1, Range of values is 224 to 224
  5173                           ; switch strategies available:
  5174                           ; Name         Instructions Cycles
  5175                           ; simple_byte            4     3 (average)
  5176                           ; direct_byte           11     9 (fixed)
  5177                           ; jumptable            263     9 (fixed)
  5178                           ;	Chosen strategy is simple_byte
  5179  0123  0846               	movf	sendPHASE@phase+1,w
  5180  0124  3AE0               	xorlw	224	; case 224
  5181  0125  1903               	skipnz
  5182  0126  2928               	goto	l12600
  5183  0127  29F0               	goto	l4513
  5184  0128                     l12600:	
  5185                           
  5186                           ; Switch size 1, requested type "space"
  5187                           ; Number of cases is 3, Range of values is 1 to 3
  5188                           ; switch strategies available:
  5189                           ; Name         Instructions Cycles
  5190                           ; simple_byte           10     6 (average)
  5191                           ; direct_byte           15     9 (fixed)
  5192                           ; jumptable            263     9 (fixed)
  5193                           ;	Chosen strategy is simple_byte
  5194  0128  0845               	movf	sendPHASE@phase,w
  5195  0129  3A01               	xorlw	1	; case 1
  5196  012A  1903               	skipnz
  5197  012B  290A               	goto	l12198
  5198  012C  3A03               	xorlw	3	; case 2
  5199  012D  1903               	skipnz
  5200  012E  2916               	goto	l12200
  5201  012F  3A01               	xorlw	1	; case 3
  5202  0130  1903               	skipnz
  5203  0131  291B               	goto	l12202
  5204  0132  29F0               	goto	l4513
  5205  0133                     l12208:	
  5206  0133  30C0               	movlw	192
  5207                           
  5208                           ;rs485.c: 117: uchar idx = 0;
  5209  0134  01CF               	clrf	sendPHASE@idx
  5210                           
  5211                           ;rs485.c: 118: gstSLIPSend.ucData[idx++] = 0xC0;
  5212  0135  0021               	movlb	1	; select bank1
  5213  0136  00A3               	movwf	(_gstSLIPSend^(0+128)+3)
  5214  0137  0020               	movlb	0	; select bank0
  5215  0138  0ACF               	incf	sendPHASE@idx,f
  5216                           
  5217                           ;rs485.c: 119: gstSLIPSend.ucData[idx++] = gucDevAddr;
  5218  0139  084F               	movf	sendPHASE@idx,w
  5219  013A  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  5220  013B  0086               	movwf	6
  5221  013C  0187               	clrf	7
  5222  013D  085F               	movf	_gucDevAddr,w
  5223                           
  5224                           ;rs485.c: 120: gstSLIPSend.ucData[idx++] = 0x00;
  5225  013E  2211  3181         	fcall	PL9	;call to abstracted procedure
  5226  0140  0181               	clrf	1
  5227  0141  0ACF               	incf	sendPHASE@idx,f
  5228                           
  5229                           ;rs485.c: 121: gstSLIPSend.ucData[idx++] = 0x00;
  5230  0142  084F               	movf	sendPHASE@idx,w
  5231  0143  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  5232  0144  0086               	movwf	6
  5233  0145  0181               	clrf	1
  5234  0146  0ACF               	incf	sendPHASE@idx,f
  5235                           
  5236                           ;rs485.c: 122: gstSLIPSend.ucData[idx++] = 0x00;
  5237  0147  084F               	movf	sendPHASE@idx,w
  5238  0148  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  5239  0149  0086               	movwf	6
  5240  014A  0181               	clrf	1
  5241  014B  0ACF               	incf	sendPHASE@idx,f
  5242                           
  5243                           ;rs485.c: 123: gstSLIPSend.ucData[idx++] = (uchar)(pchip1_phase->Energy>>24);
  5244  014C  084F               	movf	sendPHASE@idx,w
  5245  014D  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  5246  014E  0086               	movwf	6
  5247  014F  2227  3181         	fcall	PL13	;call to abstracted procedure
  5248  0151  2217  3181         	fcall	PL10	;call to abstracted procedure
  5249  0153  224C  3181         	fcall	PL27	;call to abstracted procedure
  5250                           
  5251                           ;rs485.c: 124: gstSLIPSend.ucData[idx++] = (uchar)(pchip1_phase->Energy>>16);
  5252  0155  2211  3181         	fcall	PL9	;call to abstracted procedure
  5253  0157  2227  3181         	fcall	PL13	;call to abstracted procedure
  5254  0159  2217  3181         	fcall	PL10	;call to abstracted procedure
  5255  015B  2244  3181         	fcall	PL21	;call to abstracted procedure
  5256                           
  5257                           ;rs485.c: 125: gstSLIPSend.ucData[idx++] = (uchar)(pchip1_phase->Energy>>8);
  5258  015D  2211  3181         	fcall	PL9	;call to abstracted procedure
  5259  015F  2227  3181         	fcall	PL13	;call to abstracted procedure
  5260  0161  2217  3181         	fcall	PL10	;call to abstracted procedure
  5261  0163  223B  3181         	fcall	PL19	;call to abstracted procedure
  5262                           
  5263                           ;rs485.c: 126: gstSLIPSend.ucData[idx++] = (uchar)(pchip1_phase->Energy);
  5264  0165  2211  3181         	fcall	PL9	;call to abstracted procedure
  5265  0167  084B               	movf	sendPHASE@pchip1_phase,w
  5266  0168  3E0C               	addlw	12
  5267                           
  5268                           ;rs485.c: 127: gstSLIPSend.ucData[idx++] = pchip1_phase->Frequency[0];
  5269  0169  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5270  016B  0084               	movwf	4
  5271  016C  084C               	movf	sendPHASE@pchip1_phase+1,w
  5272                           
  5273                           ;rs485.c: 128: gstSLIPSend.ucData[idx++] = pchip1_phase->Voltage[0];
  5274  016D  2209  3181         	fcall	PL8	;call to abstracted procedure
  5275  016F  084B               	movf	sendPHASE@pchip1_phase,w
  5276  0170  3E02               	addlw	2
  5277                           
  5278                           ;rs485.c: 129: gstSLIPSend.ucData[idx++] = pchip1_phase->Voltage[1];
  5279  0171  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5280  0173  3E03               	addlw	3
  5281                           
  5282                           ;rs485.c: 130: gstSLIPSend.ucData[idx++] = pchip1_phase->Voltage[2];
  5283  0174  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5284  0176  3E04               	addlw	4
  5285                           
  5286                           ;rs485.c: 131: gstSLIPSend.ucData[idx++] = pchip1_phase->Frequency[1];
  5287  0177  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5288  0179  3E01               	addlw	1
  5289                           
  5290                           ;rs485.c: 132: gstSLIPSend.ucData[idx++] = pchip1_phase->Current[0];
  5291  017A  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5292  017C  3E05               	addlw	5
  5293                           
  5294                           ;rs485.c: 133: gstSLIPSend.ucData[idx++] = pchip1_phase->Current[1];
  5295  017D  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5296  017F  3E06               	addlw	6
  5297                           
  5298                           ;rs485.c: 134: gstSLIPSend.ucData[idx++] = pchip1_phase->Current[2];
  5299  0180  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5300  0182  3E07               	addlw	7
  5301                           
  5302                           ;rs485.c: 135: gstSLIPSend.ucData[idx++] = pchip1_phase->Active_Power[0];
  5303  0183  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5304  0185  3E08               	addlw	8
  5305                           
  5306                           ;rs485.c: 136: gstSLIPSend.ucData[idx++] = pchip1_phase->Active_Power[1];
  5307  0186  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5308  0188  3E09               	addlw	9
  5309                           
  5310                           ;rs485.c: 137: gstSLIPSend.ucData[idx++] = pchip1_phase->Apparent_Power[0];
  5311  0189  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5312  018B  3E0A               	addlw	10
  5313                           
  5314                           ;rs485.c: 138: gstSLIPSend.ucData[idx++] = pchip1_phase->Apparent_Power[1];
  5315  018C  21FD  3181         	fcall	PL7	;call to abstracted procedure
  5316  018E  3E0B               	addlw	11
  5317  018F  0084               	movwf	4
  5318  0190  3000               	movlw	0
  5319  0191  3D4C               	addwfc	sendPHASE@pchip1_phase+1,w
  5320                           
  5321                           ;rs485.c: 139: gstSLIPSend.ucData[idx++] = (uchar)(pchip2_phase->Energy>>24);
  5322  0192  2209  3181         	fcall	PL8	;call to abstracted procedure
  5323  0194  2221  3181         	fcall	PL12	;call to abstracted procedure
  5324  0196  2217  3181         	fcall	PL10	;call to abstracted procedure
  5325  0198  224C  3181         	fcall	PL27	;call to abstracted procedure
  5326                           
  5327                           ;rs485.c: 140: gstSLIPSend.ucData[idx++] = (uchar)(pchip2_phase->Energy>>16);
  5328  019A  2211  3181         	fcall	PL9	;call to abstracted procedure
  5329  019C  2221  3181         	fcall	PL12	;call to abstracted procedure
  5330  019E  2217  3181         	fcall	PL10	;call to abstracted procedure
  5331  01A0  2244  3181         	fcall	PL21	;call to abstracted procedure
  5332                           
  5333                           ;rs485.c: 141: gstSLIPSend.ucData[idx++] = (uchar)(pchip2_phase->Energy>>8);
  5334  01A2  2211  3181         	fcall	PL9	;call to abstracted procedure
  5335  01A4  2221  3181         	fcall	PL12	;call to abstracted procedure
  5336  01A6  2217  3181         	fcall	PL10	;call to abstracted procedure
  5337  01A8  223B  3181         	fcall	PL19	;call to abstracted procedure
  5338                           
  5339                           ;rs485.c: 142: gstSLIPSend.ucData[idx++] = (uchar)(pchip2_phase->Energy);
  5340  01AA  2211  3181         	fcall	PL9	;call to abstracted procedure
  5341  01AC  084D               	movf	sendPHASE@pchip2_phase,w
  5342  01AD  3E0C               	addlw	12
  5343                           
  5344                           ;rs485.c: 143: gstSLIPSend.ucData[idx++] = pchip2_phase->Frequency[0];
  5345  01AE  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5346  01B0  0084               	movwf	4
  5347  01B1  084E               	movf	sendPHASE@pchip2_phase+1,w
  5348                           
  5349                           ;rs485.c: 144: gstSLIPSend.ucData[idx++] = pchip2_phase->Voltage[0];
  5350  01B2  2209  3181         	fcall	PL8	;call to abstracted procedure
  5351  01B4  084D               	movf	sendPHASE@pchip2_phase,w
  5352  01B5  3E02               	addlw	2
  5353                           
  5354                           ;rs485.c: 145: gstSLIPSend.ucData[idx++] = pchip2_phase->Voltage[1];
  5355  01B6  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5356  01B8  3E03               	addlw	3
  5357                           
  5358                           ;rs485.c: 146: gstSLIPSend.ucData[idx++] = pchip2_phase->Voltage[2];
  5359  01B9  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5360  01BB  3E04               	addlw	4
  5361                           
  5362                           ;rs485.c: 147: gstSLIPSend.ucData[idx++] = pchip2_phase->Frequency[1];
  5363  01BC  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5364  01BE  3E01               	addlw	1
  5365                           
  5366                           ;rs485.c: 148: gstSLIPSend.ucData[idx++] = pchip2_phase->Current[0];
  5367  01BF  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5368  01C1  3E05               	addlw	5
  5369                           
  5370                           ;rs485.c: 149: gstSLIPSend.ucData[idx++] = pchip2_phase->Current[1];
  5371  01C2  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5372  01C4  3E06               	addlw	6
  5373                           
  5374                           ;rs485.c: 150: gstSLIPSend.ucData[idx++] = pchip2_phase->Current[2];
  5375  01C5  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5376  01C7  3E07               	addlw	7
  5377                           
  5378                           ;rs485.c: 151: gstSLIPSend.ucData[idx++] = pchip2_phase->Active_Power[0];
  5379  01C8  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5380  01CA  3E08               	addlw	8
  5381                           
  5382                           ;rs485.c: 152: gstSLIPSend.ucData[idx++] = pchip2_phase->Active_Power[1];
  5383  01CB  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5384  01CD  3E09               	addlw	9
  5385                           
  5386                           ;rs485.c: 153: gstSLIPSend.ucData[idx++] = pchip2_phase->Apparent_Power[0];
  5387  01CE  21F1  3181         	fcall	PL6	;call to abstracted procedure
  5388  01D0  3E0A               	addlw	10
  5389                           
  5390                           ;rs485.c: 154: gstSLIPSend.ucData[idx++] = pchip2_phase->Apparent_Power[1];
  5391  01D1  21F1               	fcall	PL6	;call to abstracted procedure
  5392  01D2  3E0B               	addlw	11
  5393  01D3  0084               	movwf	4
  5394  01D4  3000               	movlw	0
  5395  01D5  3D4E               	addwfc	sendPHASE@pchip2_phase+1,w
  5396  01D6  0085               	movwf	5
  5397  01D7  0800               	movf	0,w
  5398  01D8  0081               	movwf	1
  5399  01D9  0ACF               	incf	sendPHASE@idx,f
  5400                           
  5401                           ;rs485.c: 155: gstSLIPSend.ucData[idx++] = calculateCRC8(&gstSLIPSend.ucData[2], idx-2);
  5402  01DA  084F               	movf	sendPHASE@idx,w
  5403  01DB  3EFE               	addlw	254
  5404  01DC  00A0               	movwf	?_calculateCRC8
  5405  01DD  30A5               	movlw	(_gstSLIPSend+5)& (0+255)
  5406  01DE  3189  2189  3181   	fcall	_calculateCRC8
  5407  01E1  00C7               	movwf	??_sendPHASE
  5408  01E2  084F               	movf	sendPHASE@idx,w
  5409  01E3  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  5410  01E4  0086               	movwf	6
  5411  01E5  0187               	clrf	7
  5412  01E6  0847               	movf	??_sendPHASE,w
  5413                           
  5414                           ;rs485.c: 156: gstSLIPSend.ucData[idx++] = 0xC0;
  5415  01E7  2211               	fcall	PL9	;call to abstracted procedure
  5416  01E8  30C0               	movlw	192
  5417  01E9  0081               	movwf	1
  5418  01EA  0ACF               	incf	sendPHASE@idx,f
  5419                           
  5420                           ;rs485.c: 158: gstSLIPSend.ucSendTolCnt = idx;
  5421  01EB  084F               	movf	sendPHASE@idx,w
  5422  01EC  0021               	movlb	1	; select bank1
  5423  01ED  00A1               	movwf	(_gstSLIPSend^(0+128)+1)
  5424                           
  5425                           ;rs485.c: 159: rs485_send_data();
  5426  01EE  3189  21C5         	fcall	_rs485_send_data
  5427  01F0                     l4513:	
  5428  01F0  0008               	return
  5429  01F1                     __end_of_sendPHASE:	
  5430  01F1                     PL6:	
  5431  01F1  0084               	movwf	4
  5432  01F2  3000               	movlw	0
  5433  01F3  3D4E               	addwfc	sendPHASE@pchip2_phase+1,w
  5434  01F4  0085               	movwf	5
  5435  01F5  0800               	movf	0,w
  5436  01F6  0081               	movwf	1
  5437  01F7  0ACF               	incf	sendPHASE@idx,f
  5438  01F8  084F               	movf	sendPHASE@idx,w
  5439  01F9  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  5440  01FA  0086               	movwf	6
  5441  01FB  084D               	movf	sendPHASE@pchip2_phase,w
  5442  01FC  0008               	return
  5443  01FD                     PL7:	
  5444  01FD  0084               	movwf	4
  5445  01FE  3000               	movlw	0
  5446  01FF  3D4C               	addwfc	sendPHASE@pchip1_phase+1,w
  5447  0200  0085               	movwf	5
  5448  0201  0800               	movf	0,w
  5449  0202  0081               	movwf	1
  5450  0203  0ACF               	incf	sendPHASE@idx,f
  5451  0204  084F               	movf	sendPHASE@idx,w
  5452  0205  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  5453  0206  0086               	movwf	6
  5454  0207  084B               	movf	sendPHASE@pchip1_phase,w
  5455  0208  0008               	return
  5456  0209                     PL8:	
  5457  0209  0085               	movwf	5
  5458  020A  0800               	movf	0,w
  5459  020B  0081               	movwf	1
  5460  020C  0ACF               	incf	sendPHASE@idx,f
  5461  020D  084F               	movf	sendPHASE@idx,w
  5462  020E  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  5463  020F  0086               	movwf	6
  5464  0210  0008               	return
  5465  0211                     PL9:	
  5466  0211  0081               	movwf	1
  5467  0212  0ACF               	incf	sendPHASE@idx,f
  5468  0213  084F               	movf	sendPHASE@idx,w
  5469  0214  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  5470  0215  0086               	movwf	6
  5471  0216  0008               	return
  5472  0217                     PL10:	
  5473  0217  0085               	movwf	5
  5474  0218  3F00               	moviw [0]fsr0
  5475  0219  00C7               	movwf	??_sendPHASE
  5476  021A  3F01               	moviw [1]fsr0
  5477  021B  00C8               	movwf	??_sendPHASE+1
  5478  021C  3F02               	moviw [2]fsr0
  5479  021D  00C9               	movwf	??_sendPHASE+2
  5480  021E  3F03               	moviw [3]fsr0
  5481  021F  00CA               	movwf	??_sendPHASE+3
  5482  0220  0008               	return
  5483  0221                     PL12:	
  5484  0221  084D               	movf	sendPHASE@pchip2_phase,w
  5485  0222  3E0C               	addlw	12
  5486  0223  0084               	movwf	4
  5487  0224  3000               	movlw	0
  5488  0225  3D4E               	addwfc	sendPHASE@pchip2_phase+1,w
  5489  0226  0008               	return
  5490  0227                     PL13:	
  5491  0227  084B               	movf	sendPHASE@pchip1_phase,w
  5492  0228  3E0C               	addlw	12
  5493  0229  0084               	movwf	4
  5494  022A  3000               	movlw	0
  5495  022B  3D4C               	addwfc	sendPHASE@pchip1_phase+1,w
  5496  022C  0008               	return
  5497  022D                     PL18:	
  5498  022D  3E0E               	addlw	14
  5499  022E  00CB               	movwf	sendPHASE@pchip1_phase
  5500  022F  3021               	movlw	33
  5501  0230  1803               	skipnc
  5502  0231  3022               	movlw	34
  5503  0232  00CC               	movwf	sendPHASE@pchip1_phase+1
  5504  0233  3031               	movlw	49
  5505  0234  3E0E               	addlw	14
  5506  0235  00CD               	movwf	sendPHASE@pchip2_phase
  5507  0236  3021               	movlw	33
  5508  0237  1803               	skipnc
  5509  0238  3022               	movlw	34
  5510  0239  00CE               	movwf	sendPHASE@pchip2_phase+1
  5511  023A  0008               	return
  5512  023B                     PL19:	
  5513  023B  0848               	movf	??_sendPHASE+1,w
  5514  023C  00C7               	movwf	??_sendPHASE
  5515  023D  0849               	movf	??_sendPHASE+2,w
  5516  023E  00C8               	movwf	??_sendPHASE+1
  5517  023F  084A               	movf	??_sendPHASE+3,w
  5518  0240  00C9               	movwf	??_sendPHASE+2
  5519  0241  01CA               	clrf	??_sendPHASE+3
  5520  0242  0847               	movf	??_sendPHASE,w
  5521  0243  0008               	return
  5522  0244                     PL21:	
  5523  0244  0849               	movf	??_sendPHASE+2,w
  5524  0245  00C7               	movwf	??_sendPHASE
  5525  0246  084A               	movf	??_sendPHASE+3,w
  5526  0247  00C8               	movwf	??_sendPHASE+1
  5527  0248  01C9               	clrf	??_sendPHASE+2
  5528  0249  01CA               	clrf	??_sendPHASE+3
  5529  024A  0847               	movf	??_sendPHASE,w
  5530  024B  0008               	return
  5531  024C                     PL27:	
  5532  024C  00C7               	movwf	??_sendPHASE
  5533  024D  01C8               	clrf	??_sendPHASE+1
  5534  024E  01C9               	clrf	??_sendPHASE+2
  5535  024F  01CA               	clrf	??_sendPHASE+3
  5536  0250  0008               	return
  5537                           
  5538                           	psect	text786
  5539  0251                     __ptext786:	
  5540 ;; =============== function __OS_EnterWaitMode ends ============
  5541                           
  5542                           
  5543 ;; *************** function _Initialize *****************
  5544 ;; Defined at:
  5545 ;;		line 40 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\main.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;		None               void
  5552 ;; Registers used:
  5553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 17F/0
  5556 ;;		On exit  : 17F/0
  5557 ;;		Unchanged: FFE80/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5559 ;;      Params:         0       0       0       0       0       0
  5560 ;;      Locals:         0       0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0
  5562 ;;      Totals:         0       0       0       0       0       0
  5563 ;;Total ram usage:        0 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    3
  5566 ;; This function calls:
  5567 ;;		_vmemset
  5568 ;; This function is called by:
  5569 ;;		_main
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572  0251                     _Initialize:	
  5573  0251  3068               	movlw	104
  5574                           
  5575                           ;main.c: 42: GIE=0;
  5576                           
  5577                           ; Regs used in _Initialize: [wreg+fsr1l-status,0+pclath+cstack]
  5578  0252  138B               	bcf	11,7
  5579                           
  5580                           ;main.c: 43: OSCCON = 0x68;
  5581  0253  0021               	movlb	1	; select bank1
  5582  0254  0099               	movwf	25	;volatile
  5583  0255                     l2966:	
  5584                           ;main.c: 45: {; }
  5585                           
  5586  0255  1E1A               	btfss	26,4
  5587  0256  2A55               	goto	l2966
  5588                           
  5589                           ;main.c: 47: ANSELA = 0x10;
  5590  0257  3010               	movlw	16
  5591  0258  0023               	movlb	3	; select bank3
  5592  0259  008C               	movwf	12	;volatile
  5593                           
  5594                           ;main.c: 48: PORTA = 0;
  5595  025A  0020               	movlb	0	; select bank0
  5596  025B  018C               	clrf	12	;volatile
  5597                           
  5598                           ;main.c: 50: TRISA7 = 0;
  5599  025C  0021               	movlb	1	; select bank1
  5600  025D  138C               	bcf	12,7
  5601                           
  5602                           ;main.c: 51: TRISA6 = 0;
  5603  025E  130C               	bcf	12,6
  5604                           
  5605                           ;main.c: 52: TRISA4 = 1;
  5606  025F  160C               	bsf	12,4
  5607                           
  5608                           ;main.c: 53: TRISA3 = 1;
  5609  0260  158C               	bsf	12,3
  5610                           
  5611                           ;main.c: 54: TRISA2 = 1;
  5612  0261  150C               	bsf	12,2
  5613                           
  5614                           ;main.c: 55: TRISA1 = 1;
  5615  0262  148C               	bsf	12,1
  5616                           
  5617                           ;main.c: 56: TRISA0 = 1;
  5618  0263  140C               	bsf	12,0
  5619                           
  5620                           ;main.c: 58: ANSELB = 0x00;
  5621  0264  0023               	movlb	3	; select bank3
  5622  0265  018D               	clrf	13	;volatile
  5623                           
  5624                           ;main.c: 59: TRISB0 = 0;
  5625  0266  0021               	movlb	1	; select bank1
  5626  0267  30FF               	movlw	255
  5627  0268  100D               	bcf	13,0
  5628                           
  5629                           ;main.c: 60: TRISB1 = 1;
  5630  0269  148D               	bsf	13,1
  5631                           
  5632                           ;main.c: 61: TRISB2 = 1;
  5633  026A  150D               	bsf	13,2
  5634                           
  5635                           ;main.c: 62: TRISB3 = 0;
  5636  026B  118D               	bcf	13,3
  5637                           
  5638                           ;main.c: 63: TRISB4 = 0;
  5639  026C  120D               	bcf	13,4
  5640                           
  5641                           ;main.c: 64: TRISB5 = 0;
  5642  026D  128D               	bcf	13,5
  5643                           
  5644                           ;main.c: 65: TRISB6 = 0;
  5645  026E  130D               	bcf	13,6
  5646  026F  178D               	bsf	13,7
  5647                           
  5648                           ;main.c: 67: WPUB = 0B11111111;
  5649  0270  0024               	movlb	4	; select bank4
  5650  0271  008D               	movwf	13	;volatile
  5651                           
  5652                           ;main.c: 70: ADCON1=0xC0;
  5653  0272  30C0               	movlw	192
  5654  0273  0021               	movlb	1	; select bank1
  5655  0274  009E               	movwf	30	;volatile
  5656                           
  5657                           ;main.c: 73: RXDTSEL = 1;
  5658  0275  0022               	movlb	2	; select bank2
  5659  0276  179D               	bsf	29,7
  5660                           
  5661                           ;main.c: 74: TXCKSEL = 1;
  5662  0277  141E               	bsf	30,0
  5663                           
  5664                           ;main.c: 75: SDO1SEL = 1;
  5665  0278  171D               	bsf	29,6
  5666                           
  5667                           ;main.c: 79: SYNC = 0;
  5668  0279  0023               	movlb	3	; select bank3
  5669  027A  121E               	bcf	30,4
  5670                           
  5671                           ;main.c: 80: BRGH = 1;
  5672  027B  151E               	bsf	30,2
  5673                           
  5674                           ;main.c: 81: BRG16 = 1;
  5675  027C  159F               	bsf	31,3
  5676                           
  5677                           ;main.c: 82: SPBRGH = 0X00;
  5678  027D  019C               	clrf	28	;volatile
  5679                           
  5680                           ;main.c: 83: SPBRGL = 0X33;
  5681  027E  3033               	movlw	51
  5682  027F  009B               	movwf	27	;volatile
  5683                           
  5684                           ;main.c: 85: SYNC = 0;
  5685  0280  121E               	bcf	30,4
  5686                           
  5687                           ;main.c: 86: SPEN = 1;
  5688  0281  179D               	bsf	29,7
  5689                           
  5690                           ;main.c: 87: TX9 = 0;
  5691  0282  131E               	bcf	30,6
  5692                           
  5693                           ;main.c: 88: SCKP = 0;
  5694  0283  121F               	bcf	31,4
  5695                           
  5696                           ;main.c: 89: TXEN = 1;
  5697  0284  169E               	bsf	30,5
  5698                           
  5699                           ;main.c: 90: RCIE = 1;
  5700  0285  0021               	movlb	1	; select bank1
  5701  0286  1691               	bsf	17,5
  5702                           
  5703                           ;main.c: 91: RX9 = 0;
  5704  0287  0023               	movlb	3	; select bank3
  5705  0288  3047               	movlw	71
  5706  0289  131D               	bcf	29,6
  5707                           
  5708                           ;main.c: 92: CREN = 1;
  5709  028A  161D               	bsf	29,4
  5710                           
  5711                           ;main.c: 94: OPTION_REG &= 0B01000111;
  5712  028B  0021               	movlb	1	; select bank1
  5713  028C  0595               	andwf	21,f	;volatile
  5714  028D  303D               	movlw	61
  5715                           
  5716                           ;main.c: 95: TMR0IE = 1;
  5717  028E  168B               	bsf	11,5
  5718                           
  5719                           ;main.c: 96: TMR0IF = 0;
  5720  028F  110B               	bcf	11,2
  5721                           
  5722                           ;main.c: 97: TMR0 = 61;
  5723  0290  0020               	movlb	0	; select bank0
  5724  0291  0095               	movwf	21	;volatile
  5725                           
  5726                           ;main.c: 117: WDTCONbits.WDTPS = 0B01010;
  5727  0292  0021               	movlb	1	; select bank1
  5728  0293  0817               	movf	23,w	;volatile
  5729  0294  39C1               	andlw	-63
  5730  0295  3814               	iorlw	20
  5731  0296  0097               	movwf	23	;volatile
  5732  0297  300E               	movlw	14
  5733                           
  5734                           ;main.c: 119: gstSLIPRecv.ucRecingState = SLIP_IDLE;
  5735  0298  01CC               	clrf	(_gstSLIPRecv^(0+128)+1)
  5736                           
  5737                           ;main.c: 120: gstSLIPSend.ucSendingState = SLIP_IDLE;
  5738  0299  01A2               	clrf	(_gstSLIPSend^(0+128)+2)
  5739                           
  5740                           ;main.c: 121: vmemset((void*)ADE7758Data, 0, sizeof(ADE7758Data));
  5741  029A  0020               	movlb	0	; select bank0
  5742  029B  00A0               	movwf	?_vmemset
  5743  029C  3021               	movlw	33
  5744  029D  00A1               	movwf	?_vmemset+1
  5745  029E  3062               	movlw	98
  5746  029F  01A2               	clrf	?_vmemset+2
  5747  02A0  01A3               	clrf	?_vmemset+3
  5748  02A1  00A4               	movwf	?_vmemset+4
  5749  02A2  01A5               	clrf	?_vmemset+5
  5750  02A3  22A7               	fcall	_vmemset
  5751                           
  5752                           ;main.c: 123: PEIE = 1;
  5753  02A4  170B               	bsf	11,6
  5754                           
  5755                           ;main.c: 124: GIE = 1;
  5756  02A5  178B               	bsf	11,7
  5757  02A6  0008               	return
  5758  02A7                     __end_of_Initialize:	
  5759  02A7                     __ptext799:	
  5760 ;; =============== function _SPI_Init ends ============
  5761                           
  5762                           
  5763 ;; *************** function _vmemset *****************
  5764 ;; Defined at:
  5765 ;;		line 30 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\main.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;  p1              2    0[BANK0 ] PTR void 
  5768 ;;		 -> ADE7758Data(98), 
  5769 ;;  c               2    2[BANK0 ] int 
  5770 ;;  n               2    4[BANK0 ] int 
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5773 ;;		 -> ADE7758Data(98), 
  5774 ;; Return value:  Size  Location     Type
  5775 ;;		None               void
  5776 ;; Registers used:
  5777 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5778 ;; Tracked objects:
  5779 ;;		On entry : 17F/0
  5780 ;;		On exit  : 17F/0
  5781 ;;		Unchanged: FFE80/0
  5782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5783 ;;      Params:         0       6       0       0       0       0
  5784 ;;      Locals:         0       2       0       0       0       0
  5785 ;;      Temps:          0       1       0       0       0       0
  5786 ;;      Totals:         0       9       0       0       0       0
  5787 ;;Total ram usage:        9 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    2
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		_Initialize
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796  02A7                     _vmemset:	
  5797                           
  5798                           ;main.c: 31: char *p;
  5799                           ;main.c: 33: p = p1;
  5800                           
  5801                           ; Regs used in _vmemset: [wreg+fsr1l-status,0]
  5802  02A7  0821               	movf	vmemset@p1+1,w
  5803  02A8  00A8               	movwf	vmemset@p+1
  5804  02A9  0820               	movf	vmemset@p1,w
  5805  02AA  00A7               	movwf	vmemset@p
  5806  02AB                     l11408:	
  5807                           ;main.c: 34: while(n--)
  5808                           
  5809  02AB  30FF               	movlw	-1
  5810  02AC  07A4               	addwf	vmemset@n,f
  5811  02AD  1C03               	skipc
  5812  02AE  03A5               	decf	vmemset@n+1,f
  5813  02AF  0A24               	incf	vmemset@n,w
  5814  02B0  1903               	skipnz
  5815  02B1  0A25               	incf	vmemset@n+1,w
  5816  02B2  1903               	btfsc	3,2
  5817  02B3  0008               	return
  5818                           
  5819                           ;main.c: 35: *p++ = c;
  5820  02B4  0822               	movf	vmemset@c,w
  5821  02B5  00A6               	movwf	??_vmemset
  5822  02B6  0827               	movf	vmemset@p,w
  5823  02B7  0086               	movwf	6
  5824  02B8  0828               	movf	vmemset@p+1,w
  5825  02B9  0087               	movwf	7
  5826  02BA  0826               	movf	??_vmemset,w
  5827  02BB  0081               	movwf	1
  5828  02BC  0AA7               	incf	vmemset@p,f
  5829  02BD  1903               	skipnz
  5830  02BE  0AA8               	incf	vmemset@p+1,f
  5831  02BF  2AAB               	goto	l11408
  5832  02C0                     __end_of_vmemset:	
  5833                           
  5834                           	psect	text796
  5835  02EC                     __ptext796:	
  5836 ;; =============== function __OS_Task_Create ends ============
  5837                           
  5838                           
  5839 ;; *************** function _get_address *****************
  5840 ;; Defined at:
  5841 ;;		line 14 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\util.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      unsigned char 
  5848 ;; Registers used:
  5849 ;;		wreg
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: FFFFFFFF/0
  5854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5855 ;;      Params:         0       0       0       0       0       0
  5856 ;;      Locals:         0       0       0       0       0       0
  5857 ;;      Temps:          0       0       0       0       0       0
  5858 ;;      Totals:         0       0       0       0       0       0
  5859 ;;Total ram usage:        0 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    2
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_main
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868  02EC                     _get_address:	
  5869                           
  5870                           ;util.c: 15: return 0x0f;
  5871                           
  5872                           ; Regs used in _get_address: [wreg]
  5873  02EC  340F               	retlw	15
  5874  02ED                     __end_of_get_address:	
  5875                           
  5876                           	psect	intentry
  5877  0004                     __pintentry:	
  5878 ;; =============== function _Delay ends ============
  5879                           
  5880                           
  5881 ;; *************** function _isr *****************
  5882 ;; Defined at:
  5883 ;;		line 149 in file "E:\svn\PDU_FW\PowerSupply\PowerSupply_OSA\myapp\src\main.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;		None
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  data            1    7[COMMON] unsigned char 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;		None               void
  5890 ;; Registers used:
  5891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 1E/0
  5895 ;;		Unchanged: FFFE0/0
  5896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5897 ;;      Params:         0       0       0       0       0       0
  5898 ;;      Locals:         1       0       0       0       0       0
  5899 ;;      Temps:          2       0       0       0       0       0
  5900 ;;      Totals:         3       0       0       0       0       0
  5901 ;;Total ram usage:        3 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:    1
  5904 ;; This function calls:
  5905 ;;		___lwmod
  5906 ;; This function is called by:
  5907 ;;		Interrupt level 1
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910  0004                     _isr:	
  5911                           
  5912                           ; Regs used in _isr: [wreg+fsr1l-status,0+pclath+cstack]
  5913  0004  3180               	pagesel	$
  5914                           
  5915                           ;main.c: 151: ;
  5916                           ;main.c: 164: if(TMR0IF)
  5917  0005  1D0B               	btfss	11,2
  5918  0006  282A               	goto	i1l11446
  5919                           
  5920                           ;main.c: 165: {
  5921                           ;main.c: 166: TMR0 = 61;
  5922  0007  303D               	movlw	61
  5923  0008  0020               	movlb	0	; select bank0
  5924  0009  0095               	movwf	21	;volatile
  5925                           
  5926                           ;main.c: 167: TMR0IF = 0;
  5927  000A  110B               	bcf	11,2
  5928                           
  5929                           ;main.c: 168: gs50msCnt++;
  5930  000B  0AF8               	incf	_gs50msCnt,f
  5931  000C  1903               	skipnz
  5932  000D  0AF9               	incf	_gs50msCnt+1,f
  5933                           
  5934                           ;main.c: 169: if (gs50msCnt%8 == 0)
  5935  000E  0878               	movf	_gs50msCnt,w
  5936  000F  3907               	andlw	7
  5937  0010  1903               	btfsc	3,2
  5938                           
  5939                           ;main.c: 170: {
  5940                           ;main.c: 171: Sample_flag = 1;
  5941  0011  14FB               	bsf	_Sample_flag/(0+8),_Sample_flag& (0+7)
  5942                           
  5943                           ;main.c: 172: }
  5944                           ;main.c: 173: if (gs50msCnt%3600 == 0)
  5945  0012  3010               	movlw	16
  5946  0013  00F0               	movwf	?___lwmod
  5947  0014  300E               	movlw	14
  5948  0015  00F1               	movwf	?___lwmod+1
  5949  0016  0879               	movf	_gs50msCnt+1,w
  5950  0017  00F3               	movwf	?___lwmod+3
  5951  0018  0878               	movf	_gs50msCnt,w
  5952  0019  00F2               	movwf	?___lwmod+2
  5953  001A  3182  22C0  3180   	fcall	___lwmod
  5954  001D  0871               	movf	?___lwmod+1,w
  5955  001E  0470               	iorwf	?___lwmod,w
  5956  001F  1903               	btfsc	3,2
  5957                           
  5958                           ;main.c: 174: {
  5959                           ;main.c: 175: AbnorProcFlag = 1;
  5960  0020  147B               	bsf	_AbnorProcFlag/(0+8),_AbnorProcFlag& (0+7)
  5961                           
  5962                           ;main.c: 176: }
  5963                           ;main.c: 178: if (gs50msCnt >= 3600)
  5964  0021  300E               	movlw	14
  5965  0022  0279               	subwf	_gs50msCnt+1,w
  5966  0023  3010               	movlw	16
  5967  0024  1903               	skipnz
  5968  0025  0278               	subwf	_gs50msCnt,w
  5969  0026  1C03               	skipc
  5970  0027  282A               	goto	i1l11446
  5971                           
  5972                           ;main.c: 179: {
  5973                           ;main.c: 180: gs50msCnt = 0;
  5974  0028  01F8               	clrf	_gs50msCnt
  5975  0029  01F9               	clrf	_gs50msCnt+1
  5976  002A                     i1l11446:	
  5977                           
  5978                           ;main.c: 181: }
  5979                           ;main.c: 182: }
  5980                           ;main.c: 184: if ( OERR || FERR )
  5981  002A  0023               	movlb	3	; select bank3
  5982  002B  189D               	btfsc	29,1
  5983  002C  282F               	goto	i1l2981
  5984  002D  1D1D               	btfss	29,2
  5985  002E  2831               	goto	i1l2979
  5986  002F                     i1l2981:	
  5987                           
  5988                           ;main.c: 185: {
  5989                           ;main.c: 186: CREN = 0 ;
  5990  002F  121D               	bcf	29,4
  5991                           
  5992                           ;main.c: 187: CREN = 1;
  5993  0030  161D               	bsf	29,4
  5994  0031                     i1l2979:	
  5995                           
  5996                           ;main.c: 188: }
  5997                           ;main.c: 190: if( RCIF )
  5998  0031  0020               	movlb	0	; select bank0
  5999  0032  1E91               	btfss	17,5
  6000  0033  2867               	goto	i1l11480
  6001                           
  6002                           ;main.c: 191: {
  6003                           ;main.c: 192: RCIF = 0;
  6004  0034  1291               	bcf	17,5
  6005                           
  6006                           ;main.c: 193: uchar data = RCREG;
  6007  0035  0023               	movlb	3	; select bank3
  6008  0036  0819               	movf	25,w	;volatile
  6009  0037  00F7               	movwf	isr@data
  6010                           
  6011                           ;main.c: 195: if (gstSLIPRecv.ucRecingState != SLIP_DONE)
  6012  0038  0021               	movlb	1	; select bank1
  6013  0039  084C               	movf	(_gstSLIPRecv^(0+128)+1),w
  6014  003A  3A02               	xorlw	2
  6015  003B  1903               	skipnz
  6016  003C  2867               	goto	i1l11480
  6017                           
  6018                           ;main.c: 196: {
  6019                           ;main.c: 197: if (((data == 0xC0) && (gstSLIPRecv.ucRecingState == SLIP_IDLE)) ||
  6020                           ;main.c: 198: ((data == 0xC0) && (gstSLIPRecv.ucRecingState == SLIP_PROCESS) && (gstSLIP
      +                          Recv.ucRecdCnt < 4)))
  6021  003D  0877               	movf	isr@data,w
  6022  003E  3AC0               	xorlw	192
  6023  003F  1903               	btfsc	3,2
  6024  0040  084C               	movf	(_gstSLIPRecv^(0+128)+1),w
  6025  0041  1903               	btfsc	3,2
  6026  0042  284D               	goto	i1l2986
  6027  0043  0877               	movf	isr@data,w
  6028  0044  3AC0               	xorlw	192
  6029  0045  1D03               	skipz
  6030  0046  2851               	goto	i1l11466
  6031  0047  0B4C               	decfsz	(_gstSLIPRecv^(0+128)+1),w
  6032  0048  2851               	goto	i1l11466
  6033  0049  3004               	movlw	4
  6034  004A  024B               	subwf	_gstSLIPRecv^(0+128),w
  6035  004B  1803               	skipnc
  6036  004C  2851               	goto	i1l11466
  6037  004D                     i1l2986:	
  6038                           
  6039                           ;main.c: 199: {
  6040                           ;main.c: 200: gstSLIPRecv.ucRecingState = SLIP_PROCESS;
  6041  004D  01CC               	clrf	(_gstSLIPRecv^(0+128)+1)
  6042  004E  0ACC               	incf	(_gstSLIPRecv^(0+128)+1),f
  6043                           
  6044                           ;main.c: 201: gstSLIPRecv.ucRecdCnt = 0;
  6045  004F  01CB               	clrf	_gstSLIPRecv^(0+128)
  6046                           
  6047                           ;main.c: 202: }
  6048  0050  285D               	goto	i1l11474
  6049  0051                     i1l11466:	
  6050                           
  6051                           ;main.c: 203: else if ((data == 0xC0) && (gstSLIPRecv.ucRecingState == SLIP_PROCESS) && 
      +                          (gstSLIPRecv.ucRecdCnt >= 4))
  6052  0051  0877               	movf	isr@data,w
  6053  0052  3AC0               	xorlw	192
  6054  0053  1D03               	skipz
  6055  0054  285D               	goto	i1l11474
  6056  0055  0B4C               	decfsz	(_gstSLIPRecv^(0+128)+1),w
  6057  0056  285D               	goto	i1l11474
  6058  0057  3004               	movlw	4
  6059  0058  024B               	subwf	_gstSLIPRecv^(0+128),w
  6060  0059  1C03               	skipc
  6061  005A  285D               	goto	i1l11474
  6062                           
  6063                           ;main.c: 204: {
  6064                           ;main.c: 205: gstSLIPRecv.ucRecingState = SLIP_DONE;
  6065  005B  3002               	movlw	2
  6066  005C  00CC               	movwf	(_gstSLIPRecv^(0+128)+1)
  6067  005D                     i1l11474:	
  6068                           
  6069                           ;main.c: 206: }
  6070                           ;main.c: 207: gstSLIPRecv.ucData[gstSLIPRecv.ucRecdCnt] = data;
  6071  005D  084B               	movf	_gstSLIPRecv^(0+128),w
  6072  005E  3ECD               	addlw	(_gstSLIPRecv+2)& (0+255)
  6073  005F  0086               	movwf	6
  6074  0060  0187               	clrf	7
  6075  0061  0877               	movf	isr@data,w
  6076  0062  0081               	movwf	1
  6077                           
  6078                           ;main.c: 209: if (gstSLIPRecv.ucRecdCnt < 20 -1) gstSLIPRecv.ucRecdCnt++;
  6079  0063  3013               	movlw	19
  6080  0064  024B               	subwf	_gstSLIPRecv^(0+128),w
  6081  0065  1C03               	btfss	3,0
  6082  0066  0ACB               	incf	_gstSLIPRecv^(0+128),f
  6083  0067                     i1l11480:	
  6084                           
  6085                           ;main.c: 210: }
  6086                           ;main.c: 211: }
  6087                           ;main.c: 213: if(TXIF)
  6088  0067  0020               	movlb	0	; select bank0
  6089  0068  1E11               	btfss	17,4
  6090  0069  0009               	retfie
  6091                           
  6092                           ;main.c: 214: {
  6093                           ;main.c: 215: TXIF = 0;
  6094  006A  1211               	bcf	17,4
  6095                           
  6096                           ;main.c: 216: if (gstSLIPSend.ucSentCnt < gstSLIPSend.ucSendTolCnt)
  6097  006B  0021               	movlb	1	; select bank1
  6098  006C  0821               	movf	(_gstSLIPSend^(0+128)+1),w
  6099  006D  0220               	subwf	_gstSLIPSend^(0+128),w
  6100  006E  1803               	skipnc
  6101  006F  28AD               	goto	i1l2993
  6102                           
  6103                           ;main.c: 217: {
  6104                           ;main.c: 218: if (gstSLIPSend.ucData[gstSLIPSend.ucSentCnt] == 0xC0
  6105                           ;main.c: 219: && gstSLIPSend.ucSentCnt != 0
  6106                           ;main.c: 220: && gstSLIPSend.ucSentCnt != gstSLIPSend.ucSendTolCnt - 1)
  6107  0070  0820               	movf	_gstSLIPSend^(0+128),w
  6108  0071  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  6109  0072  0086               	movwf	6
  6110  0073  0187               	clrf	7
  6111  0074  0801               	movf	1,w
  6112  0075  3AC0               	xorlw	192
  6113  0076  1D03               	skipz
  6114  0077  2891               	goto	i1l11496
  6115  0078  0820               	movf	_gstSLIPSend^(0+128),w
  6116  0079  1903               	btfsc	3,2
  6117  007A  2891               	goto	i1l11496
  6118  007B  0821               	movf	(_gstSLIPSend^(0+128)+1),w
  6119  007C  3EFF               	addlw	255
  6120  007D  00F5               	movwf	??_isr
  6121  007E  30FF               	movlw	255
  6122  007F  1803               	skipnc
  6123  0080  3000               	movlw	0
  6124  0081  00F6               	movwf	??_isr+1
  6125  0082  0820               	movf	_gstSLIPSend^(0+128),w
  6126  0083  0675               	xorwf	??_isr,w
  6127  0084  0476               	iorwf	??_isr+1,w
  6128  0085  1903               	skipnz
  6129  0086  2891               	goto	i1l11496
  6130                           
  6131                           ;main.c: 221: {
  6132                           ;main.c: 222: TXREG = 0xDB;
  6133  0087  30DB               	movlw	219
  6134  0088  0023               	movlb	3	; select bank3
  6135  0089  009A               	movwf	26	;volatile
  6136                           
  6137                           ;main.c: 223: gstSLIPSend.ucData[gstSLIPSend.ucSentCnt] = 0xDC;
  6138  008A  0021               	movlb	1	; select bank1
  6139  008B  0820               	movf	_gstSLIPSend^(0+128),w
  6140  008C  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  6141  008D  0086               	movwf	6
  6142  008E  30DC               	movlw	220
  6143  008F  0081               	movwf	1
  6144                           
  6145                           ;main.c: 224: }
  6146  0090  0009               	retfie
  6147  0091                     i1l11496:	
  6148                           
  6149                           ;main.c: 225: else if(gstSLIPSend.ucData[gstSLIPSend.ucSentCnt] == 0xDB)
  6150  0091  0820               	movf	_gstSLIPSend^(0+128),w
  6151  0092  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  6152  0093  0086               	movwf	6
  6153  0094  0187               	clrf	7
  6154  0095  0801               	movf	1,w
  6155  0096  3ADB               	xorlw	219
  6156  0097  1D03               	skipz
  6157  0098  28A3               	goto	i1l11502
  6158                           
  6159                           ;main.c: 226: {
  6160                           ;main.c: 227: TXREG = 0xDB;
  6161  0099  30DB               	movlw	219
  6162  009A  0023               	movlb	3	; select bank3
  6163  009B  009A               	movwf	26	;volatile
  6164                           
  6165                           ;main.c: 228: gstSLIPSend.ucData[gstSLIPSend.ucSentCnt] = 0xDD;
  6166  009C  0021               	movlb	1	; select bank1
  6167  009D  0820               	movf	_gstSLIPSend^(0+128),w
  6168  009E  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  6169  009F  0086               	movwf	6
  6170  00A0  30DD               	movlw	221
  6171  00A1  0081               	movwf	1
  6172                           
  6173                           ;main.c: 229: }
  6174  00A2  0009               	retfie
  6175  00A3                     i1l11502:	
  6176                           
  6177                           ;main.c: 230: else
  6178                           ;main.c: 231: {
  6179                           ;main.c: 232: TXREG = gstSLIPSend.ucData[gstSLIPSend.ucSentCnt++];
  6180  00A3  0820               	movf	_gstSLIPSend^(0+128),w
  6181  00A4  3EA3               	addlw	(_gstSLIPSend+3)& (0+255)
  6182  00A5  0086               	movwf	6
  6183  00A6  0187               	clrf	7
  6184  00A7  0801               	movf	1,w
  6185  00A8  0023               	movlb	3	; select bank3
  6186  00A9  009A               	movwf	26	;volatile
  6187  00AA  0021               	movlb	1	; select bank1
  6188  00AB  0AA0               	incf	_gstSLIPSend^(0+128),f
  6189  00AC  0009               	retfie
  6190  00AD                     i1l2993:	
  6191  00AD  3002               	movlw	2
  6192                           
  6193                           ;main.c: 235: else
  6194                           ;main.c: 236: {
  6195                           ;main.c: 237: TXIE = 0;
  6196  00AE  1211               	bcf	17,4
  6197                           
  6198                           ;main.c: 238: gstSLIPSend.ucSendingState = SLIP_DONE;
  6199  00AF  00A2               	movwf	(_gstSLIPSend^(0+128)+2)
  6200  00B0  0009               	retfie
  6201  00B1                     __end_of_isr:	
  6202                           
  6203                           	psect	text803
  6204  02C0                     __ptext803:	
  6205 ;; =============== function _isr ends ============
  6206                           
  6207                           
  6208 ;; *************** function ___lwmod *****************
  6209 ;; Defined at:
  6210 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwmod.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;  divisor         2    0[COMMON] unsigned int 
  6213 ;;  dividend        2    2[COMMON] unsigned int 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  counter         1    4[COMMON] unsigned char 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  2    0[COMMON] unsigned int 
  6218 ;; Registers used:
  6219 ;;		wreg, status,2, status,0
  6220 ;; Tracked objects:
  6221 ;;		On entry : 1F/0
  6222 ;;		On exit  : 1F/0
  6223 ;;		Unchanged: FFFE0/0
  6224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6225 ;;      Params:         4       0       0       0       0       0
  6226 ;;      Locals:         1       0       0       0       0       0
  6227 ;;      Temps:          0       0       0       0       0       0
  6228 ;;      Totals:         5       0       0       0       0       0
  6229 ;;Total ram usage:        5 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; This function calls:
  6232 ;;		Nothing
  6233 ;; This function is called by:
  6234 ;;		_isr
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237  02C0                     ___lwmod:	
  6238                           
  6239                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6240  02C0  0871               	movf	___lwmod@divisor+1,w
  6241  02C1  0470               	iorwf	___lwmod@divisor,w
  6242  02C2  1903               	skipnz
  6243  02C3  2ADB               	goto	i1l11692
  6244  02C4  01F4               	clrf	___lwmod@counter
  6245  02C5                     L4:	
  6246  02C5  0AF4               	incf	___lwmod@counter,f
  6247  02C6  1BF1               	btfsc	___lwmod@divisor+1,7
  6248  02C7  2ACB               	goto	i1l11684
  6249  02C8  35F0               	lslf	___lwmod@divisor,f
  6250  02C9  0DF1               	rlf	___lwmod@divisor+1,f
  6251  02CA  2AC5               	goto	L4
  6252  02CB                     i1l11684:	
  6253  02CB  0871               	movf	___lwmod@divisor+1,w
  6254  02CC  0273               	subwf	___lwmod@dividend+1,w
  6255  02CD  1D03               	skipz
  6256  02CE  2AD1               	goto	u134_25
  6257  02CF  0870               	movf	___lwmod@divisor,w
  6258  02D0  0272               	subwf	___lwmod@dividend,w
  6259  02D1                     u134_25:	
  6260  02D1  1C03               	skipc
  6261  02D2  2AD7               	goto	i1l11688
  6262  02D3  0870               	movf	___lwmod@divisor,w
  6263  02D4  02F2               	subwf	___lwmod@dividend,f
  6264  02D5  0871               	movf	___lwmod@divisor+1,w
  6265  02D6  3BF3               	subwfb	___lwmod@dividend+1,f
  6266  02D7                     i1l11688:	
  6267  02D7  36F1               	lsrf	___lwmod@divisor+1,f
  6268  02D8  0CF0               	rrf	___lwmod@divisor,f
  6269  02D9  0BF4               	decfsz	___lwmod@counter,f
  6270  02DA  2ACB               	goto	i1l11684
  6271  02DB                     i1l11692:	
  6272  02DB  0873               	movf	___lwmod@dividend+1,w
  6273  02DC  00F1               	movwf	?___lwmod+1
  6274  02DD  0872               	movf	___lwmod@dividend,w
  6275  02DE  00F0               	movwf	?___lwmod
  6276  02DF  0008               	return
  6277  02E0                     __end_of___lwmod:	
  6278                           
  6279 ;; =============== function ___lwmod ends ============
  6280  0006                     
  6281                           	psect	functab
  6282  0100                     __pfunctab:	
  6283  0100                     fptable:	
  6284  0100  3181               	movlp	high fptable
  6285  0101  0782               	addwf	2,f
  6286  0102                     fpbase:	
  6287  0102  2902               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  6288  0103                     fp__thread_slip:	
  6289  0103  3188  281F         	ljmp	_thread_slip
  6290  0105                     fp__thread_Sample:	
  6291  0105  3188  282F         	ljmp	_thread_Sample
  6292  0107                     fp__thread_abnormal:	
  6293  0107  3188  2854         	ljmp	_thread_abnormal
  6294  007E                     btemp	set	126	;btemp
  6295  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Fri Dec 05 13:27:04 2014

                                     pc 0002                          ___bmul@product 0021  
                          slip_main@ret 0052                     ??__OS_EnterWaitMode 0020  
              __size_of_thread_abnormal FFFFFFDB                      fp__thread_abnormal 0107  
                       _AD7758_SendData 0EDF                                     _GIE 005F  
                                   _RB0 0068                                     _RB3 006B  
                                   _RA7 0067                                     u915 08BA  
                                   u935 0F07                                     _RX9 0CEE  
                                   _TX9 0CF6                  __end_of__OS_ReturnSave 08FE  
                                   _isr 0004                                     wreg 0009  
                       ??_thread_Sample 0041                                    l3002 082F  
                                  l3011 081F                                    l3016 0854  
                                  l3017 0865                                    l1450 0000  
                                  l3026 0000                                    l1445 08A0  
                                  l1462 0000                                    l1456 0000  
                                  l1465 0000                                    l1474 0C33  
                                  l1476 0C72                                    l1485 0000  
                                  l1478 0CB1                                    l1479 0000  
                                  l6000 0000                                    l4501 0000  
                                  l6030 099D                                    l6008 0000  
                                  l4504 0000                                    l6033 0000  
                                  l4513 01F0                                    l6028 0997  
                                  l4516 0000                                    l4541 0000  
                                  l4519 0000                                    l4538 0975  
                                  l2963 0000                                    l4555 0A56  
                                  l2972 0000                                    l2966 0255  
                                  l4494 0A00                                    l4495 0000  
                                  l2969 0000                                    l4489 09E7  
                                  l4498 0000                                    l7505 08CF  
                                  ?_isr 0070                                    l7519 0000  
                                  l7491 0000                                    l7485 0000  
                                  l7494 0000                                    l7488 0000  
                                  l5997 0000                                    l8847 0000  
                                  _BRGH 0CF2                                    _CREN 0CEC  
                                  _FERR 0CEA                                    u1475 0944  
                                  u1715 09F9                                    u1485 091A  
                                  u1695 09E2                                    _PEIE 005E  
                                  _RCIE 048D                                    _RCIF 008D  
                                  _OERR 0CE9                                    _SCKP 0CFC  
                                  _TMR0 0015                                    _SPEN 0CEF  
                                  _TRMT 0CF1                                    _TXIE 048C  
                                  _TXEN 0CF5                                    _TXIF 008C  
                                  _SYNC 0CF4                                    _WPUB 020D  
             __end_of__OS_EnterWaitMode 08DC                                    _main 0E69  
                                  fsr0h 0005                                    fsr1h 0007  
                                  fsr0l 0004                                    indf0 0000  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                  __end_of_AD7758_GetData 0E3C  
                       ?__OS_JumpToTask 0070                         __end_of_OS_Init 0854  
                 ??__OS_EnterWaitModeTO 0020                                    start 00B1  
                     __end_of_AD7758_CS 08A8                 __end_of_rs485_send_data 0A07  
                     ___bmul@multiplier 0022                         AD7758_GetData@i 0029  
                   calculateCRC8@inData 0021                                   ??_isr 0075  
                                 l12000 0000                                   l12002 088B  
                                 l12020 0000                                   l12012 0000  
                                 l12100 0000                                   l12022 0000  
                                 l12014 0000                                   l12102 0000  
                                 l12110 0000                                   l12030 0000  
                                 l12008 0000                                   l12024 0000  
                                 l12104 0000                                   l12120 0000  
                                 l12112 0000                                   l12200 0116  
                                 l12032 0000                                   l11402 0000  
                                 l11410 0000                                   l12018 084D  
                                 l12042 0000                                   l12106 0000  
                                 l12130 0000                                   l12122 0000  
                                 l12114 0000                                   l12210 0000  
                                 l12202 011B                                   l12034 0000  
                                 l12026 0000                                   l12050 0000  
                                 l11420 0000                                   l11412 0000  
                                 l12044 0000                                   l12060 0000  
                                 l12132 0000                                   l12124 0000  
                                 l12116 0000                                   l12108 0A12  
                                 l12140 0000                                   l12300 0000  
                                 l12220 0000                                   l12212 0000  
                                 l12036 0000                                   l12028 0000  
                                 l12052 0000                                   l11406 0000  
                                 l11422 0000                                   l11414 0000  
                                 l11510 0000                                   l12046 0000  
                                 l12038 0000                                   l12062 0000  
                                 l12126 0000                                   l12118 0000  
                                 l12150 0000                                   l12142 0000  
                                 l12134 0A57                                   l12310 0000  
                                 l12302 0000                                   l12230 0000  
                                 l12222 0000                                   l12214 0000  
                                 l12206 0123                                   l11408 02AB  
                                 l11424 0000                                   l11416 0000  
                                 l11512 0000                                   l11600 0000  
                                 l12080 09EA                                   l12072 09D0  
                                 l12064 0000                                   l12128 0000  
                                 l12160 0000                                   l12152 0000  
                                 l12144 0000                                   l12136 0000  
                                 l12320 0000                                   l12312 0000  
                                 l12304 0000                                   l12240 0000  
                                 l12232 0000                                   l12224 0000  
                                 l12216 0000                                   l12208 0133  
                                 l12400 0000                                   l12048 0000  
                                 l11418 0000                                   l11522 08D4  
                                 l11514 0000                                   l11530 0000  
                                 l11610 0000                                   l11602 0000  
                                 l12074 0000                                   l12066 0000  
                                 l12058 09C5                                   l12090 0000  
                                 l12082 0000                                   l12170 0000  
                                 l12162 0000                                   l12154 0000  
                                 l12146 0000                                   l12138 0000  
                                 l12330 0000                                   l12322 0000  
                                 l12314 0000                                   l12306 0000  
                                 l12250 0000                                   l12242 0000  
                                 l12234 0000                                   l12226 0000  
                                 l12218 0000                                   l12410 0000  
                                 l12402 0000                                   l11516 0000  
                                 l11508 0000                                   l11524 0000  
                                 l11540 0000                                   l11532 0000  
                                 l11612 0000                                   l11604 0000  
                                 l11620 0000                                   l11700 0000  
                                 l12068 0000                                   l12092 0000  
                                 l12084 0000                                   l12180 0000  
                                 l12172 0000                                   l12164 0000  
                                 l12156 0000                                   l12148 0000  
                                 l12340 0000                                   l12332 0000  
                                 l12324 0000                                   l12316 0000  
                                 l12308 0000                                   l12260 0000  
                                 l12252 0000                                   l12244 0000  
                                 l12236 0000                                   l12228 0000  
                                 l12420 0000                                   l12412 0000  
                                 l12404 0000                                   l11382 08AC  
                                 l11542 0000                                   l11534 0FDF  
                                 l11550 0000                                   l11606 0000  
                                 l11630 0000                                   l11622 0000  
                                 l11614 0000                                   l11702 0899  
                                 l11710 0000                                   l12078 09FD  
                                 l12094 0000                                   l12086 0000  
                                 l12190 0000                                   l12182 0000  
                                 l12174 0000                                   l12166 0000  
                                 l12158 0000                                   l12350 0000  
                                 l12342 0000                                   l12334 0000  
                                 l12326 0000                                   l12318 0000  
                                 l12270 0000                                   l12262 0000  
                                 l12254 0000                                   l12246 0000  
                                 l12238 0000                                   l12422 0000  
                                 l12414 0000                                   l12406 0000  
                                 l12430 0000                                   l12502 0000  
                                 l12510 0000                                   l11392 0F10  
                                 l11384 0000                                   l11544 0000  
                                 l11528 0000                                   l11560 0000  
                                 l11552 0000                                   l11608 0000  
                                 l11632 0000                                   l11624 0000  
                                 l11616 0000                                   l11720 0000  
                                 l11800 0000                                   l12096 0000  
                                 l12088 0000                                   l12192 0000  
                                 l12184 0000                                   l12176 0000  
                                 l12168 0000                                   l12360 0000  
                                 l12352 0000                                   l12344 0000  
                                 l12336 0000                                   l12328 0000  
                                 l12280 0000                                   l12272 0000  
                                 l12264 0000                                   l12256 0000  
                                 l12248 0000                                   l12600 0128  
                                 l12416 0000                                   l12408 0000  
                                 l12440 0000                                   l12432 0000  
                                 l12424 0AE3                                   l12504 090D  
                                 l12512 0000                                   l12520 0000  
                                 l11378 08A8                                   l11394 0EF9  
                                 l11386 0000                                   l11538 0000  
                                 l11562 0000                                   l11554 0000  
                                 l11570 0000                                   l11634 0000  
                                 l11626 0000                                   l11618 0000  
                                 l11706 08A2                                   l11714 0000  
                                 l11810 0000                                   l11802 0000  
                                 l11730 0000                                   l12098 0000  
                                 l12194 0000                                   l12186 0000  
                                 l12178 0000                                   l12362 0000  
                                 l12354 0000                                   l12346 0000  
                                 l12338 0000                                   l12290 0000  
                                 l12282 0000                                   l12274 0000  
                                 l12266 0000                                   l12258 0000  
                                 l12418 0000                                   l12450 0000  
                                 l12442 0000                                   l12434 0000  
                                 l12426 0000                                   l12506 0000  
                                 l12514 0000                                   l12530 0000  
                                 l12522 0000                                   l11396 0F13  
                                 l11388 0000                                   l11548 0FF7  
                                 l11556 0000                                   l11580 099E  
                                 l11564 0000                                   l11636 0000  
                                 l11628 0000                                   l11652 0000  
                                 l11644 0000                                   l11716 0E2E  
                                 l11708 0000                                   l11724 0000  
                                 l11812 0000                                   l11804 0000  
                                 l11740 0000                                   l11820 0000  
                                 l11900 0000                                   l12188 0000  
                                 l12364 0000                                   l12356 0000  
                                 l12348 0000                                   l12292 0000  
                                 l12284 0000                                   l12276 0000  
                                 l12268 0000                                   l12196 0109  
                                 l12380 0000                                   l12460 0000  
                                 l12452 0000                                   l12444 0000  
                                 l12436 0000                                   l12428 0000  
                                 l12508 0000                                   l12540 0000  
                                 l12532 0000                                   l12524 0000  
                                 l12516 0000                                   l11398 0000  
                                 l11558 0000                                   l11582 0000  
                                 l11638 0000                                   l11654 0000  
                                 l11646 0E20                                   l11726 0EE4  
                                 l11718 0000                                   l11814 0000  
                                 l11806 0000                                   l11750 0000  
                                 l11742 0000                                   l11734 0000  
                                 l11822 0000                                   l11902 0000  
                                 l11910 0000                                   l12366 0000  
                                 l12358 0000                                   l12294 0000  
                                 l12286 0000                                   l12278 0000  
                                 l12198 010A                                   l12390 0000  
                                 l12382 0000                                   l12374 0A9E  
                                 l12470 0000                                   l12462 0000  
                                 l12454 0000                                   l12446 0000  
                                 l12438 0000                                   l12550 0E98  
                                 l12542 0000                                   l12526 0000  
                                 l12518 0000                                   l11568 0000  
                                 l11592 0000                                   l11816 0000  
                                 l11808 0000                                   l11760 0000  
                                 l11752 0000                                   l11744 0000  
                                 l11736 0000                                   l11728 0000  
                                 l11824 0000                                   l11840 0000  
                                 l11904 0000                                   l11920 0000  
                                 l11912 0000                                   l12368 0000  
                                 l12296 0000                                   l12288 0000  
                                 l12392 0000                                   l12384 0000  
                                 l12376 0000                                   l12472 0000  
                                 l12464 0000                                   l12456 0000  
                                 l12448 0000                                   l12480 0A49  
                                 l12552 0E9A                                   l12544 0E8F  
                                 l12528 0000                                   l11578 0000  
                                 l11586 098C                                   l11594 0000  
                                 l11818 0000                                   l11770 0000  
                                 l11762 0000                                   l11754 0000  
                                 l11746 0000                                   l11738 0000  
                                 l11850 093E                                   l11842 0937  
                                 l11834 0000                                   l11826 0000  
                                 l11906 0000                                   l11930 0000  
                                 l11922 0000                                   l11914 0000  
                                 l12298 0000                                   l12394 0000  
                                 l12386 0000                                   l12378 0000  
                                 l12466 0000                                   l12458 0000  
                                 l12474 0A2C                                   l12554 0000  
                                 l12546 0000                                   l12538 0E7C  
                                 l11588 09A5                                   l11596 0000  
                                 l11780 0000                                   l11772 0000  
                                 l11764 0000                                   l11756 0000  
                                 l11748 0000                                   l11852 0953  
                                 l11836 0929                                   l11828 0000  
                                 l11908 0000                                   l11940 0000  
                                 l11932 0000                                   l11916 0000  
                                 l11924 0BAB                                   l12396 0000  
                                 l12388 0000                                   l12468 0000  
                                 l12484 0000                                   l12476 0A41  
                                 l12564 0EA4                                   l12556 0000  
                                 l11598 0000                                   l11790 0000  
                                 l11782 0000                                   l11774 0000  
                                 l11766 0000                                   l11758 0000  
                                 l11862 095D                                   l11854 0000  
                                 l11950 0C00                                   l11942 0BED  
                                 l11934 0BCD                                   l11918 0000  
                                 l12398 0000                                   l12486 0A54  
                                 l12494 0000                                   l12574 0EA8  
                                 l12566 0000                                   l11696 0000  
                                 l11792 0000                                   l11784 0000  
                                 l11776 0000                                   l11768 0000  
                                 l11872 0979                                   l11864 0000  
                                 l11848 0000                                   l11856 095B  
                                 l11880 0000                                   l11960 0000  
                                 l11952 0000                                   l11928 0000  
                                 l11944 0BF4                                   l12488 0A55  
                                 l12496 0000                                   l12576 0000  
                                 l11698 0000                                   l11794 0000  
                                 l11786 0000                                   l11778 0000  
                                 l11858 0913                                   l11882 0000  
                                 l11890 0000                                   l11970 0000  
                                 l11954 0000                                   l11946 0000  
                                 l11938 0000                                   l12498 0000  
                                 l12578 0000                                   l11796 0000  
                                 l11788 0000                                   l11876 0987  
                                 l11868 0968                                   l11884 0000  
                                 l11892 0000                                   l11980 0000  
                                 l11964 0C3F                                   l11956 0000  
                                 l11798 0000                                   l11894 0000  
                                 l11886 0000                                   l11982 0000  
                                 l11974 0000                                   l11966 0000  
                                 l11990 0000                                   l11896 0000  
                                 l11888 0000                                   l11984 0000  
                                 l11968 0000                                   l11992 0000  
                                 l11898 0000                                   l11978 0C7E  
                                 l11994 0000                                   l11988 0000  
                                 l11996 0000                                   ?_main 0070  
                                 _BRG16 0CFB                                   _INDF0 0000  
                                 _FSR0H 0005                                   _FSR0L 0004  
                       __end_of___lwmod 02E0                                   _RCREG 0199  
                       ?__OS_ReturnSave 0070                                   _PORTA 000C  
                                 _TXREG 019A                                   _Delay 08A8  
                 sendPHASE@pchip1_phase 004B                   sendPHASE@pchip2_phase 004D  
                  Delay@delay_count_max 0020                         __end_of_sendACK 09C5  
                       __end_of_sendDEV 0A9E                         __end_of_sendVER 0B2C  
                                 main@i 0053                                   fpbase 0102  
                      __end_of_SPI_Init 0FDA                          __pbitbssCOMMON 03D8  
           __size_of_processing_slipcmd 0079                         __end_of_run_cmd 0A57  
                       __end_of_vmemset 02C0                                   status 0003  
                                 wtemp0 007E                         ?_AD7758_GetData 0026  
                      ?__OS_Task_Create 0020                            __end_of_main 0EB8  
               __end_of_AD7758_SendData 0EF1                    calculateCRC8@dataLen 0020  
                            _Initialize 0251                                  ??_main 0053  
                                ?_Delay 0020                        ??__OS_CheckEvent 0020  
                     ??_thread_abnormal 002C                                  _ADCON1 009E  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _HFIOFR 04D4                               ??_OS_Init 0021  
                         ??_AD7758_init 002A                                  i1l2981 002F  
                                i1l2993 00AD                                  i1l2986 004D  
                                i1l2979 0031                                  _PCLATH 000A  
                                u134_25 02D1                                  i1l8873 0000  
            __size_of__OS_EnterWaitMode 0005                        ??_Sample_ADE7758 002A  
                                _OSCCON 0099                                  _TMR0IE 005D  
                                _TMR0IF 005A                                  _SPBRGH 019C  
                                _SPBRGL 019B                                  _SSP1IF 008B  
                                _TRISA0 0460                                  _TRISA1 0461  
                                _TRISB0 0468                                  _TRISA2 0462  
                                _TRISB1 0469                                  _TRISA3 0463  
                                _TRISB2 046A                                  _TRISA4 0464  
                                _TRISB3 046B                                  _TRISB4 046C  
                                _TRISA6 0466                                  _TRISB5 046D  
                                _TRISA7 0467                                  _TRISB6 046E  
                                _TRISB7 046F                                  _SSPBUF 0211  
                                _STKPTR 0FED                          fp__thread_slip 0103  
                     Sample_ADE7758@sum 003E                    __size_of_get_address 0001  
                      ?_rs485_send_data 0070                                  ___bmul 0E1E  
                             ??___lwmod 0074                            ?_spiSendByte 0070  
                      __end_of_sendNACK 0A2C                     processing_slipcmd@i 002A  
                   processing_slipcmd@j 0029                                  clrloop 02E1  
                                fptable 0100                                  fptotal 0006  
                             ??_sendACK 0045                               ??_sendDEV 0045  
                             ??_sendVER 0045                            ?_thread_slip 0070  
                           __OS_CurTask 005C                          sendPHASE@phase 0045  
                     _AD7758_check_init 086F                               ??_run_cmd 0050  
                       AD7758_init@chip 002A                               ??_vmemset 0026  
                    ?_AD7758_check_init 0070                           AD7758_CS@chip 0029  
                      AD7758_SendData@i 0029                     ??_AD7758_check_init 002A  
                   __end_of_AD7758_init 0EDF                     ___bmul@multiplicand 0020  
                         __end_of_Delay 08C4                           _AbnorProcFlag 03D8  
                           sendNACK@idx 0045                          __pcstackCOMMON 0070  
                          __pidataBANK0 0000                        ?_AD7758_SendData 0026  
                           ?_Initialize 0070                               ?_SPI_Init 0070  
                     AD7758_GetData@num 0026               __end_of_AD7758_check_init 0891  
                               ??_Delay 0024                        ??__OS_JumpToTask 0020  
                            __pbssBANK0 0054                              __pbssBANK1 00A0  
 __end_of__OS_ClrReadySetClrCanContinue 08F0  __size_of__OS_ClrReadySetClrCanContinue 0014  
         __OS_ClrReadySetClrCanContinue 08DC                      __size_of_sendPHASE 00E8  
                            __pmaintext 0E69                           ?_sample_check 0070  
                               ?___bmul 0020                   __OS_CheckEvent@bEvent 0020  
                  AD7758_check_init@ret 002A                              __pintentry 0004  
                             _AD7758_CS 0891                        ??__OS_ReturnSave 0020  
                        calculateCRC8@i 0023                          calculateCRC8@j 0022  
                            ??_SPI_Init 0020                  __size_of_calculateCRC8 001E  
                               i1l11500 0000                                 i1l11502 00A3  
                               i1l11430 0000                                 i1l11504 0000  
                               i1l11432 0000                                 i1l11506 0000  
                               i1l11434 0000                                 i1l11426 0000  
                               i1l11452 0000                                 i1l11470 0000  
                               i1l11462 0000                                 i1l11446 002A  
                               i1l11464 0000                                 i1l11480 0067  
                               i1l11490 0000                                 i1l11474 005D  
                               i1l11466 0051                                 i1l11484 0000  
                               i1l11476 0000                                 i1l11494 0000  
                               i1l11496 0091                                 i1l11690 0000  
                               i1l11684 02CB                                 i1l11692 02DB  
                               i1l11676 0000                                 i1l11688 02D7  
                           _Sample_flag 03D9                      __size_of_slip_main 000C  
                               _SDO1SEL 08EE                              _gucDevAddr 005F  
                               _SSP1ADD 0212                                 _RXDTSEL 08EF  
                               _TXCKSEL 08F0                   __end_of_thread_Sample 081F  
                      ??_AD7758_GetData 0028             __end_of__OS_EnterWaitModeTO 0904  
                            __stringtab 00B4                                 _OS_Init 0840  
                           _AD7758_init 0EB8                      Sample_ADE7758@chip 0040  
                   __size_of_Initialize 0056                        calculateCRC8@crc 0024  
                             ?_sendNACK 0070                          ??_sample_check 0041  
                       __size_of___bmul 000C                              ?_AD7758_CS 0028  
                               ___lwmod 02C0                         _thread_abnormal 0854  
                  __size_of_spiSendByte 0028                           sendTemper@idx 0046  
                           _ADE7758Data 210E                            __size_of_isr 00AD  
            __size_of_AD7758_check_init 0022                                 _sendACK 09A7  
                               _sendDEV 0A57                                 _sendVER 0AE3  
                     __end_of_sendPHASE 01F1                                 _run_cmd 0A2C  
                               _vmemset 02A7              __end_of_processing_slipcmd 0989  
                  __size_of_thread_slip 00E5                    end_of_initialization 0E67  
                            _sendTemper 0A9E                                 isr@data 0077  
                         _calculateCRC8 0989                              ??_sendNACK 0045  
        ?__OS_ClrReadySetClrCanContinue 0070                       __end_of_slip_main 0910  
              __size_of__OS_Task_Create 0026                          ?_calculateCRC8 0020  
                         ??_get_address 0020                 __end_of_thread_abnormal 082F  
                           ??_AD7758_CS 0029                          __end_of___bmul 0E2A  
                          ??_Initialize 0029                __size_of_rs485_send_data 0042  
                             _FreqPhase 005A                               __OS_Flags 005D  
                          sendPHASE@idx 004F                       __size_of_SPI_Init 0010  
                             __OS_TempH 007A                               __OS_Tasks 0060  
                       run_cmd@wregaddr 0050                     start_initialization 0E3C  
                    AD7758_GetData@addr 0028                      AD7758_GetData@chip 0027  
                  __end_of_sample_check 0A12                        Delay@delay_count 0024  
                           __end_of_isr 00B1                             ?_sendTemper 0070  
                    __end_of_Initialize 02A7                 __size_of__OS_CheckEvent 0013  
                   __end_of_get_address 02ED                                ??___bmul 0021  
               __size_of_Sample_ADE7758 02A5                             __pdataBANK0 006C  
                             _gs50msCnt 0078                              sendACK@idx 0045  
                           __pbssBIGRAM 210E                __size_of_AD7758_SendData 0012  
                     ??__OS_Task_Create 0022                             __pbssCOMMON 0078  
                         __pcstackBANK0 0020                              sendDEV@idx 0046  
                   spiSendByte@spi_data 0020                         ??_calculateCRC8 0021  
                              ?_OS_Init 0070                            ?_AD7758_init 0070  
                            sendVER@idx 0046                       __size_of_sendNACK 001A  
                      ?_thread_abnormal 0070                               __pfunctab 0100  
                             __ptext800 0EF1                               __ptext801 08A8  
                             __ptext803 02C0                               __ptext770 0A2C  
                             __ptext771 0AE3                               __ptext780 086F  
                             __ptext772 0A9E                               __ptext781 0B79  
                             __ptext773 0109                               __ptext790 0E1E  
                             __ptext782 0EB8                               __ptext774 0A57  
                             __ptext766 0854                               __ptext791 08DC  
                             __ptext783 08FE                               __ptext775 0A12  
                             __ptext767 082F                               __ptext792 08F0  
                             __ptext784 0910                               __ptext776 09A7  
                             __ptext768 081F                               __ptext793 0989  
                             __ptext785 08D7                               __ptext777 09C5  
                             __ptext769 0904                               __ptext794 0F19  
                             __ptext786 0251                               __ptext778 0A07  
                             __ptext795 0FDA                               __ptext787 0EDF  
                             __ptext779 0840                               __ptext796 02EC  
                             __ptext788 0E2A                               __ptext797 08C4  
                             __ptext789 0891                               __ptext798 0FCA  
                             __ptext799 02A7                                ?___lwmod 0070  
                 AD7758_check_init@chip 002B                               __pstrings 00B4  
                   __size_of_sendTemper 0045                                ?_sendACK 0070  
                              ?_sendDEV 0070                                ?_sendVER 0070  
                        __size_of_Delay 001C                       ??_rs485_send_data 0041  
                             _fun_array 006C                                ?_run_cmd 0070  
                              ?_vmemset 0020                               _sendPHASE 0109  
                           _get_address 02EC            __size_of__OS_EnterWaitModeTO 0006  
                    _processing_slipcmd 0910                 __size_of__OS_JumpToTask 000A  
                             _slip_main 0904                           ??_spiSendByte 0020  
                __size_of_thread_Sample FFFFFFF0                        fp__thread_Sample 0105  
                   ?_processing_slipcmd 0070                                _SPI_Init 0FCA  
                 __size_of_sample_check 000B                  processing_slipcmd@pend 0028  
       ??__OS_ClrReadySetClrCanContinue 0020                           ??_thread_slip 0053  
                           _gstSLIPRecv 00CB                             _gstSLIPSend 00A0  
               __size_of__OS_ReturnSave 000E                             _gucPowerVer 00B5  
                     ??_AD7758_SendData 0028                                __OS_Temp 005E  
                            ?_sendPHASE 0045                    ??_processing_slipcmd 0025  
                      __size_of_OS_Init 0014                                _ReadData 0054  
                              _SendData 0057                          __OS_CheckEvent 08C4  
               __size_of_AD7758_GetData 0012                            _sample_check 0A07  
                        _Sample_ADE7758 0B79                              ?_slip_main 0070  
                      __size_of___lwmod 0020                      spiSendByte@spi_tmp 0025  
                   __end_of_spiSendByte 0F19                        __size_of_sendACK 001E  
                      __size_of_sendDEV 0047                        __size_of_sendVER 0049  
                         spiSendByte@cc 0021                            _SSP1CON1bits 0215  
                          _SSP2CON1bits 021D                        __size_of_run_cmd 002B  
                      __size_of_vmemset 0019                           _thread_Sample 082F  
                          ??_sendTemper 0045                     __end_of_thread_slip 0904  
                __end_of__OS_CheckEvent 08D7                           __size_of_main 004F  
                  __size_of_AD7758_init 0027                                _sendNACK 0A12  
                              clear_ram 02E0                  __end_of_Sample_ADE7758 0E1E  
                       __OS_Task_Create 0FDA                   processing_slipcmd@ret 0027  
                          _SSP2STATbits 021C                      __end_of_sendTemper 0AE3  
              __OS_Task_Create@TaskAddr 0020                               vmemset@p1 0020  
                     rs485_send_data@cc 0041                          ?_thread_Sample 0070  
                              intlevel1 0100                             ??_sendPHASE 0047  
                       ?__OS_CheckEvent 0070                        ___lwmod@dividend 0072  
                       ?_Sample_ADE7758 0070                    __OS_Task_Create@Task 0023  
                        __OS_JumpToTask 0F19                             ??_slip_main 0052  
                           _spiSendByte 0EF1                         _rs485_send_data 09C5  
                              vmemset@c 0022                                vmemset@n 0024  
                              vmemset@p 0027                              _OPTION_REG 0095  
                       ___lwmod@divisor 0070                      __size_of_AD7758_CS 0017  
                   __OS_EnterWaitModeTO 08FE                         ___lwmod@counter 0074  
                           _thread_slip 081F                          __OS_ReturnSave 08F0  
                            _WDTCONbits 0097                __OS_Task_Create@priority 0022  
                   AD7758_SendData@addr 0028                     AD7758_SendData@chip 0027  
                       AD7758_CS@enable 0028                   __end_of_calculateCRC8 09A7  
                          ?_get_address 0070                  __end_of__OS_JumpToTask 0F23  
               __end_of__OS_Task_Create 1000                       __OS_EnterWaitMode 08D7  
                    AD7758_SendData@num 0026                    ?__OS_EnterWaitModeTO 0070  
                        _AD7758_GetData 0E2A                      ?__OS_EnterWaitMode 0070  
