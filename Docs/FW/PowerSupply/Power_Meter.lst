

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Tue Jan 06 21:15:49 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	intentry,global,class=CODE,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	text523,local,class=CODE,delta=2
    15                           	psect	text540,local,class=CODE,delta=2
    16                           	psect	text541,local,class=CODE,delta=2
    17                           	psect	pa_nodes,global,class=CODE,delta=2
    18                           	dabs	1,0x220,48
    19                           	dabs	1,0x1BE,50
    20                           	dabs	1,0x7E,2
    21  000A                     	;#
    22                           
    23                           	psect	config
    24  8007  D9BC               	dw	55740	;_ADE7758Data
    25                           
    26                           	psect	intentry
    27  0004                     __pintentry:	
    28  000C                     _PORTA	set	12
    29  0018                     _T1CONbits	set	24
    30  0015                     _TMR0	set	21
    31  0017                     _TMR1H	set	23
    32  0016                     _TMR1L	set	22
    33  005F                     _GIE	set	95
    34  005E                     _PEIE	set	94
    35  0067                     _RA7	set	103
    36  0068                     _RB0	set	104
    37  006B                     _RB3	set	107
    38  008D                     _RCIF	set	141
    39  008B                     _SSP1IF	set	139
    40  005D                     _TMR0IE	set	93
    41  005A                     _TMR0IF	set	90
    42  00CF                     _TMR1GE	set	207
    43  0088                     _TMR1IF	set	136
    44  00C0                     _TMR1ON	set	192
    45  008C                     _TXIF	set	140
    46  009E                     _ADCON1	set	158
    47  0095                     _OPTION_REG	set	149
    48  0099                     _OSCCON	set	153
    49  0097                     _WDTCONbits	set	151
    50  04D4                     _HFIOFR	set	1236
    51  048D                     _RCIE	set	1165
    52  0488                     _TMR1IE	set	1160
    53  0460                     _TRISA0	set	1120
    54  0461                     _TRISA1	set	1121
    55  0462                     _TRISA2	set	1122
    56  0463                     _TRISA3	set	1123
    57  0464                     _TRISA4	set	1124
    58  0466                     _TRISA6	set	1126
    59  0467                     _TRISA7	set	1127
    60  0468                     _TRISB0	set	1128
    61  0469                     _TRISB1	set	1129
    62  046A                     _TRISB2	set	1130
    63  046B                     _TRISB3	set	1131
    64  046C                     _TRISB4	set	1132
    65  046D                     _TRISB5	set	1133
    66  046E                     _TRISB6	set	1134
    67  046F                     _TRISB7	set	1135
    68  048C                     _TXIE	set	1164
    69  08EF                     _RXDTSEL	set	2287
    70  08EE                     _SDO1SEL	set	2286
    71  08F0                     _TXCKSEL	set	2288
    72  018C                     _ANSELA	set	396
    73  018D                     _ANSELB	set	397
    74  0199                     _RCREG	set	409
    75  019C                     _SPBRGH	set	412
    76  019B                     _SPBRGL	set	411
    77  019A                     _TXREG	set	410
    78  0CFB                     _BRG16	set	3323
    79  0CF2                     _BRGH	set	3314
    80  0CEC                     _CREN	set	3308
    81  0CEA                     _FERR	set	3306
    82  0CE9                     _OERR	set	3305
    83  0CEE                     _RX9	set	3310
    84  0CFC                     _SCKP	set	3324
    85  0CEF                     _SPEN	set	3311
    86  0CF4                     _SYNC	set	3316
    87  0CF1                     _TRMT	set	3313
    88  0CF6                     _TX9	set	3318
    89  0CF5                     _TXEN	set	3317
    90  0212                     _SSP1ADD	set	530
    91  0215                     _SSP1CON1bits	set	533
    92  021D                     _SSP2CON1bits	set	541
    93  021C                     _SSP2STATbits	set	540
    94  0211                     _SSPBUF	set	529
    95  020D                     _WPUB	set	525
    96                           
    97 ;; =============== function _Delay ends ============
    98 ;; *************** function _isr *****************
    99 ;; Defined at:
   100 ;;		line 132 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\main.c"
   101 ;; Parameters:    Size  Location     Type
   102 ;;		None
   103 ;; Auto vars:     Size  Location     Type
   104 ;;  data            1    5[COMMON] unsigned char 
   105 ;; Return value:  Size  Location     Type
   106 ;;		None               void
   107 ;; Registers used:
   108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   109 ;; Tracked objects:
   110 ;;		On entry : 0/0
   111 ;;		On exit  : 1C/0
   112 ;;		Unchanged: FFFE0/0
   113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   114 ;;      Params:         0       0       0       0       0       0
   115 ;;      Locals:         1       0       0       0       0       0
   116 ;;      Temps:          0       0       0       0       0       0
   117 ;;      Totals:         1       0       0       0       0       0
   118 ;;Total ram usage:        1 bytes
   119 ;; Hardware stack levels used:    1
   120 ;; Hardware stack levels required when called:    1
   121 ;; This function calls:
   122 ;;		___lwmod
   123 ;; This function is called by:
   124 ;;		Interrupt level 1
   125 ;; This function uses a non-reentrant model
   126 ;;
   127  0004                     _isr:	
   128                           
   129                           ; Regs used in _isr: [wreg+fsr1l-status,0+pclath+cstack]
   130  0004  3180               	pagesel	$
   131                           
   132                           ;main.c: 136: if(TMR1IF==1)
   133  0005  0020               	movlb	0	; select bank0
   134  0006  1C11               	btfss	17,0
   135  0007  2825               	goto	i1l9560
   136  0008  30FF               	movlw	255
   137                           
   138                           ;main.c: 137: {
   139                           ;main.c: 139: TMR1IF=0;
   140  0009  1011               	bcf	17,0
   141                           
   142                           ;main.c: 140: TMR1H=0xff;
   143  000A  0097               	movwf	23	;volatile
   144                           
   145                           ;main.c: 141: TMR1L=0xc1;
   146  000B  30C1               	movlw	193
   147  000C  0096               	movwf	22	;volatile
   148                           
   149                           ;main.c: 143: if(rx_timeout < 6)
   150  000D  3006               	movlw	6
   151  000E  0273               	subwf	_rx_timeout,w	;volatile
   152  000F  1803               	skipnc
   153  0010  2813               	goto	i1l9548
   154                           
   155                           ;main.c: 144: {
   156                           ;main.c: 146: rx_timeout ++;
   157  0011  0AF3               	incf	_rx_timeout,f	;volatile
   158                           
   159                           ;main.c: 147: }
   160  0012  281A               	goto	i1l2965
   161  0013                     i1l9548:	
   162                           
   163                           ;main.c: 148: else if(rx_timeout == 6)
   164  0013  0873               	movf	_rx_timeout,w	;volatile
   165  0014  3A06               	xorlw	6
   166  0015  1D03               	skipz
   167  0016  281A               	goto	i1l2965
   168                           
   169                           ;main.c: 149: {
   170                           ;main.c: 151: rx_timeout = 11;
   171  0017  300B               	movlw	11
   172  0018  00F3               	movwf	_rx_timeout	;volatile
   173                           
   174                           ;main.c: 152: rx_data_flag = 1;
   175  0019  157C               	bsf	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
   176  001A                     i1l2965:	
   177                           ;main.c: 153: }
   178                           
   179                           
   180                           ;main.c: 157: }
   181                           ;main.c: 159: if(tx_timeout_flag == 1)
   182  001A  1DFC               	btfss	_tx_timeout_flag/(0+8),_tx_timeout_flag& (0+7)
   183  001B  2825               	goto	i1l9560
   184                           
   185                           ;main.c: 160: {
   186                           ;main.c: 161: if(TRMT == 1)
   187  001C  0023               	movlb	3	; select bank3
   188  001D  1C9E               	btfss	30,1
   189  001E  2825               	goto	i1l9560
   190                           
   191                           ;main.c: 162: {
   192                           ;main.c: 163: tx_timeout_flag = 0;
   193  001F  11FC               	bcf	_tx_timeout_flag/(0+8),_tx_timeout_flag& (0+7)
   194                           
   195                           ;main.c: 164: TXEN=0;
   196  0020  129E               	bcf	30,5
   197                           
   198                           ;main.c: 165: RA7 = 0;
   199  0021  0020               	movlb	0	; select bank0
   200  0022  138C               	bcf	12,7
   201                           
   202                           ;main.c: 166: tx_data_index = 0;
   203  0023  01F4               	clrf	_tx_data_index	;volatile
   204                           
   205                           ;main.c: 167: tx_data_num = 0;
   206  0024  01F5               	clrf	_tx_data_num	;volatile
   207  0025                     i1l9560:	
   208                           
   209                           ;main.c: 168: }
   210                           ;main.c: 169: }
   211                           ;main.c: 170: }
   212                           ;main.c: 172: if(TMR0IF)
   213  0025  1D0B               	btfss	11,2
   214  0026  2854               	goto	i1l9580
   215                           
   216                           ;main.c: 173: {
   217                           ;main.c: 174: TMR0 = 61;
   218  0027  303D               	movlw	61
   219  0028  0020               	movlb	0	; select bank0
   220  0029  0095               	movwf	21	;volatile
   221                           
   222                           ;main.c: 175: TMR0IF = 0;
   223  002A  110B               	bcf	11,2
   224                           
   225                           ;main.c: 176: gs50msCnt++;
   226  002B  0AF0               	incf	_gs50msCnt,f
   227  002C  1903               	skipnz
   228  002D  0AF1               	incf	_gs50msCnt+1,f
   229                           
   230                           ;main.c: 177: if (gs50msCnt%20 == 0)
   231  002E  3014               	movlw	20
   232  002F  00F6               	movwf	?___lwmod
   233  0030  01F7               	clrf	?___lwmod+1
   234  0031  0871               	movf	_gs50msCnt+1,w
   235  0032  00F9               	movwf	?___lwmod+3
   236  0033  0870               	movf	_gs50msCnt,w
   237  0034  00F8               	movwf	?___lwmod+2
   238  0035  318F  27E0  3180   	fcall	___lwmod
   239  0038  0877               	movf	?___lwmod+1,w
   240  0039  0476               	iorwf	?___lwmod,w
   241  003A  1903               	btfsc	3,2
   242                           
   243                           ;main.c: 178: {
   244                           ;main.c: 179: Sample_flag = 1;
   245  003B  14FC               	bsf	_Sample_flag/(0+8),_Sample_flag& (0+7)
   246                           
   247                           ;main.c: 180: }
   248                           ;main.c: 181: if (gs50msCnt%3600 == 0)
   249  003C  3010               	movlw	16
   250  003D  00F6               	movwf	?___lwmod
   251  003E  300E               	movlw	14
   252  003F  00F7               	movwf	?___lwmod+1
   253  0040  0871               	movf	_gs50msCnt+1,w
   254  0041  00F9               	movwf	?___lwmod+3
   255  0042  0870               	movf	_gs50msCnt,w
   256  0043  00F8               	movwf	?___lwmod+2
   257  0044  318F  27E0  3180   	fcall	___lwmod
   258  0047  0877               	movf	?___lwmod+1,w
   259  0048  0476               	iorwf	?___lwmod,w
   260  0049  1903               	btfsc	3,2
   261                           
   262                           ;main.c: 182: {
   263                           ;main.c: 183: AbnorProcFlag = 1;
   264  004A  147C               	bsf	_AbnorProcFlag/(0+8),_AbnorProcFlag& (0+7)
   265                           
   266                           ;main.c: 184: }
   267                           ;main.c: 186: if (gs50msCnt >= 3600)
   268  004B  300E               	movlw	14
   269  004C  0271               	subwf	_gs50msCnt+1,w
   270  004D  3010               	movlw	16
   271  004E  1903               	skipnz
   272  004F  0270               	subwf	_gs50msCnt,w
   273  0050  1C03               	skipc
   274  0051  2854               	goto	i1l9580
   275                           
   276                           ;main.c: 187: {
   277                           ;main.c: 188: gs50msCnt = 0;
   278  0052  01F0               	clrf	_gs50msCnt
   279  0053  01F1               	clrf	_gs50msCnt+1
   280  0054                     i1l9580:	
   281                           
   282                           ;main.c: 189: }
   283                           ;main.c: 190: }
   284                           ;main.c: 192: if ( OERR || FERR )
   285  0054  0023               	movlb	3	; select bank3
   286  0055  189D               	btfsc	29,1
   287  0056  2859               	goto	i1l2976
   288  0057  1D1D               	btfss	29,2
   289  0058  285B               	goto	i1l2974
   290  0059                     i1l2976:	
   291                           
   292                           ;main.c: 193: {
   293                           ;main.c: 194: CREN = 0 ;
   294  0059  121D               	bcf	29,4
   295                           
   296                           ;main.c: 195: CREN = 1;
   297  005A  161D               	bsf	29,4
   298  005B                     i1l2974:	
   299                           
   300                           ;main.c: 196: }
   301                           ;main.c: 199: if(RCIF)
   302  005B  0020               	movlb	0	; select bank0
   303  005C  1E91               	btfss	17,5
   304  005D  2874               	goto	i1l9602
   305                           
   306                           ;main.c: 200: {
   307                           ;main.c: 201: RCIF = 0;
   308  005E  1291               	bcf	17,5
   309                           
   310                           ;main.c: 202: unsigned char data = RCREG;
   311  005F  0023               	movlb	3	; select bank3
   312  0060  0819               	movf	25,w	;volatile
   313  0061  00FB               	movwf	isr@data
   314                           
   315                           ;main.c: 204: if(rx_data_flag == 0)
   316  0062  197C               	btfsc	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
   317  0063  2874               	goto	i1l9602
   318                           
   319                           ;main.c: 205: {
   320                           ;main.c: 207: rx_timeout = 0;
   321  0064  01F3               	clrf	_rx_timeout	;volatile
   322                           
   323                           ;main.c: 208: rx_data[rx_data_counter] = data;
   324  0065  0872               	movf	_rx_data_counter,w
   325  0066  3E20               	addlw	_rx_data& (0+255)
   326  0067  0086               	movwf	6
   327  0068  3001               	movlw	1	; select bank2/3
   328  0069  0087               	movwf	7
   329  006A  087B               	movf	isr@data,w
   330  006B  0081               	movwf	1
   331                           
   332                           ;main.c: 209: rx_data_counter++;
   333  006C  0AF2               	incf	_rx_data_counter,f	;volatile
   334                           
   335                           ;main.c: 211: if(rx_data_counter == 64)
   336  006D  0872               	movf	_rx_data_counter,w	;volatile
   337  006E  3A40               	xorlw	64
   338  006F  1D03               	skipz
   339  0070  2874               	goto	i1l9602
   340  0071  300B               	movlw	11
   341                           
   342                           ;main.c: 212: {
   343                           ;main.c: 213: rx_data_flag = 1;
   344  0072  157C               	bsf	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
   345                           
   346                           ;main.c: 214: rx_timeout = 11;
   347  0073  00F3               	movwf	_rx_timeout	;volatile
   348  0074                     i1l9602:	
   349                           
   350                           ;main.c: 215: }
   351                           ;main.c: 216: }
   352                           ;main.c: 217: }
   353                           ;main.c: 218: if(TXIF)
   354  0074  0020               	movlb	0	; select bank0
   355  0075  1E11               	btfss	17,4
   356  0076  0009               	retfie
   357                           
   358                           ;main.c: 219: {
   359                           ;main.c: 220: TXIF = 0;
   360  0077  1211               	bcf	17,4
   361                           
   362                           ;main.c: 221: if(tx_data_index < tx_data_num)
   363  0078  0875               	movf	_tx_data_num,w	;volatile
   364  0079  0274               	subwf	_tx_data_index,w	;volatile
   365  007A  1803               	skipnc
   366  007B  2885               	goto	i1l2981
   367                           
   368                           ;main.c: 222: {
   369                           ;main.c: 223: TXREG = tx_data[tx_data_index];
   370  007C  0874               	movf	_tx_data_index,w
   371  007D  3EA0               	addlw	_tx_data& (0+255)
   372  007E  0086               	movwf	6
   373  007F  0187               	clrf	7
   374  0080  0801               	movf	1,w
   375  0081  0023               	movlb	3	; select bank3
   376  0082  009A               	movwf	26	;volatile
   377                           
   378                           ;main.c: 224: tx_data_index ++;
   379  0083  0AF4               	incf	_tx_data_index,f	;volatile
   380                           
   381                           ;main.c: 225: }
   382  0084  0009               	retfie
   383  0085                     i1l2981:	
   384                           
   385                           ;main.c: 226: else
   386                           ;main.c: 227: {
   387                           ;main.c: 228: TXIE = 0;
   388  0085  0021               	movlb	1	; select bank1
   389  0086  1211               	bcf	17,4
   390                           
   391                           ;main.c: 229: tx_timeout_flag = 1;
   392  0087  15FC               	bsf	_tx_timeout_flag/(0+8),_tx_timeout_flag& (0+7)
   393  0088  0009               	retfie
   394  0089                     __end_of_isr:	
   395                           
   396                           	psect	bitbssCOMMON
   397  03E0                     __pbitbssCOMMON:	
   398  03E0                     _AbnorProcFlag:	
   399  03E0                     	ds	1
   400  03E1                     _Sample_flag:	
   401  03E1                     	ds	1
   402  03E2                     _rx_data_flag:	
   403  03E2                     	ds	1
   404  03E3                     _tx_timeout_flag:	
   405  03E3                     	ds	1
   406                           
   407                           	psect	bssCOMMON
   408  0070                     __pbssCOMMON:	
   409  0070                     _gs50msCnt:	
   410  0070                     	ds	2
   411  0072                     _rx_data_counter:	
   412  0072                     	ds	1
   413  0073                     _rx_timeout:	
   414  0073                     	ds	1
   415  0074                     _tx_data_index:	
   416  0074                     	ds	1
   417  0075                     _tx_data_num:	
   418  0075                     	ds	1
   419                           
   420                           	psect	bssBANK0
   421  0047                     __pbssBANK0:	
   422  0047                     _ReadData:	
   423  0047                     	ds	3
   424  004A                     _SendData:	
   425  004A                     	ds	3
   426  004D                     _CRC:	
   427  004D                     	ds	2
   428  004F                     _FreqPhase:	
   429  004F                     	ds	2
   430  0051                     _address:	
   431  0051                     	ds	1
   432  0052                     modbus@rx_timeout:	
   433  0052                     	ds	1
   434                           
   435                           	psect	bssBANK1
   436  00A0                     __pbssBANK1:	
   437  00A0                     _tx_data:	
   438  00A0                     	ds	64
   439                           
   440                           	psect	bssBANK2
   441  0120                     __pbssBANK2:	
   442  0120                     _rx_data:	
   443  0120                     	ds	64
   444                           
   445                           	psect	clrtext
   446  0FD4                     clear_ram:	
   447                           ;	Called with FSR0 containing the base address, and
   448                           ;	btemp/btemp+1 has the size to clear
   449                           
   450  0FD4  0064               	clrwdt	;clear the watchdog before getting into this loop
   451  0FD5                     clrloop:	
   452  0FD5  0180               	clrf	0	;clear RAM location pointed to by FSR
   453  0FD6  3101               	addfsr 0,1
   454  0FD7  3001               	movlw	1
   455  0FD8  02FE               	subwf	126,f
   456  0FD9  3000               	movlw	0
   457  0FDA  3BFF               	subwfb	127,f
   458  0FDB  087F               	movf	127,w
   459  0FDC  047E               	iorwf	126,w
   460  0FDD  1903               	btfsc	3,2
   461  0FDE  3400               	retlw	0	;all done for this memory range, return
   462  0FDF  2FD5               	goto	clrloop	;have we reached the end yet?
   463                           
   464                           	psect	cstackCOMMON
   465  0076                     __pcstackCOMMON:	
   466  0076                     ?_modbus_init:	
   467  0076                     ?_modbus_main:	
   468                           ; 0 bytes @ 0x0
   469                           
   470  0076                     ?_AD7758_init:	
   471                           ; 0 bytes @ 0x0
   472                           
   473  0076                     ?_Sample_ADE7758:	
   474                           ; 0 bytes @ 0x0
   475                           
   476  0076                     ?_SPI_Init:	
   477                           ; 0 bytes @ 0x0
   478                           
   479  0076                     ?_Initialize:	
   480                           ; 0 bytes @ 0x0
   481                           
   482  0076                     ?_isr:	
   483                           ; 0 bytes @ 0x0
   484                           
   485  0076                     ?_main:	
   486                           ; 0 bytes @ 0x0
   487                           
   488  0076                     ?_rs485_send_data:	
   489                           ; 0 bytes @ 0x0
   490                           
   491  0076                     ?_sendHAHA:	
   492                           ; 0 bytes @ 0x0
   493                           
   494  0076                     ?_spiSendByte:	
   495                           ; 0 bytes @ 0x0
   496                           
   497  0076                     ?_AD7758_check_init:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0076                     ?___lwmod:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0076                     ___lwmod@divisor:	
   504                           ; 2 bytes @ 0x0
   505                           
   506                           
   507                           ; 2 bytes @ 0x0
   508  0076                     	ds	2
   509  0078                     ___lwmod@dividend:	
   510                           
   511                           ; 2 bytes @ 0x2
   512  0078                     	ds	2
   513  007A                     ??___lwmod:	
   514  007A                     ___lwmod@counter:	
   515                           ; 0 bytes @ 0x4
   516                           
   517                           
   518                           ; 1 bytes @ 0x4
   519  007A                     	ds	1
   520  007B                     ??_isr:	
   521  007B                     isr@data:	
   522                           ; 0 bytes @ 0x5
   523                           
   524                           
   525                           ; 1 bytes @ 0x5
   526  007B                     	ds	1
   527                           
   528                           	psect	cstackBANK0
   529  0020                     __pcstackBANK0:	
   530  0020                     ?_Delay:	
   531  0020                     ??_spiSendByte:	
   532                           ; 0 bytes @ 0x0
   533                           
   534  0020                     ??_modbus_init:	
   535                           ; 0 bytes @ 0x0
   536                           
   537  0020                     ??_SPI_Init:	
   538                           ; 0 bytes @ 0x0
   539                           
   540  0020                     ??_Initialize:	
   541                           ; 0 bytes @ 0x0
   542                           
   543  0020                     ??_rs485_send_data:	
   544                           ; 0 bytes @ 0x0
   545                           
   546  0020                     ?_ModbusCalcCRC:	
   547                           ; 0 bytes @ 0x0
   548                           
   549  0020                     ?___bmul:	
   550                           ; 0 bytes @ 0x0
   551                           
   552  0020                     ?___lmul:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0020                     ?___lldiv:	
   556                           ; 4 bytes @ 0x0
   557                           
   558  0020                     spiSendByte@spi_data:	
   559                           ; 4 bytes @ 0x0
   560                           
   561  0020                     ___bmul@multiplicand:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0020                     ModbusCalcCRC@Frame:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0020                     Delay@delay_count_max:	
   568                           ; 2 bytes @ 0x0
   569                           
   570  0020                     ___lmul@multiplier:	
   571                           ; 4 bytes @ 0x0
   572                           
   573  0020                     ___lldiv@divisor:	
   574                           ; 4 bytes @ 0x0
   575                           
   576                           
   577                           ; 4 bytes @ 0x0
   578  0020                     	ds	1
   579  0021                     ??___bmul:	
   580  0021                     ___bmul@product:	
   581                           ; 0 bytes @ 0x1
   582                           
   583  0021                     spiSendByte@cc:	
   584                           ; 1 bytes @ 0x1
   585                           
   586                           
   587                           ; 4 bytes @ 0x1
   588  0021                     	ds	1
   589  0022                     ModbusCalcCRC@LenFrame:	
   590  0022                     ___bmul@multiplier:	
   591                           ; 1 bytes @ 0x2
   592                           
   593                           
   594                           ; 1 bytes @ 0x2
   595  0022                     	ds	1
   596  0023                     ??_ModbusCalcCRC:	
   597  0023                     ModbusCalcCRC@bitVal:	
   598                           ; 0 bytes @ 0x3
   599                           
   600                           
   601                           ; 1 bytes @ 0x3
   602  0023                     	ds	1
   603  0024                     ??_Delay:	
   604  0024                     ModbusCalcCRC@CntByte:	
   605                           ; 0 bytes @ 0x4
   606                           
   607  0024                     Delay@delay_count:	
   608                           ; 1 bytes @ 0x4
   609                           
   610  0024                     ___lmul@multiplicand:	
   611                           ; 4 bytes @ 0x4
   612                           
   613  0024                     ___lldiv@dividend:	
   614                           ; 4 bytes @ 0x4
   615                           
   616                           
   617                           ; 4 bytes @ 0x4
   618  0024                     	ds	1
   619  0025                     ModbusCalcCRC@j:	
   620  0025                     spiSendByte@spi_tmp:	
   621                           ; 1 bytes @ 0x5
   622                           
   623                           
   624                           ; 1 bytes @ 0x5
   625  0025                     	ds	1
   626  0026                     ?_AD7758_GetData:	
   627  0026                     ?_AD7758_SendData:	
   628                           ; 0 bytes @ 0x6
   629                           
   630  0026                     AD7758_GetData@num:	
   631                           ; 0 bytes @ 0x6
   632                           
   633  0026                     AD7758_SendData@num:	
   634                           ; 1 bytes @ 0x6
   635                           
   636                           
   637                           ; 1 bytes @ 0x6
   638  0026                     	ds	1
   639  0027                     AD7758_GetData@chip:	
   640  0027                     AD7758_SendData@chip:	
   641                           ; 1 bytes @ 0x7
   642                           
   643                           
   644                           ; 1 bytes @ 0x7
   645  0027                     	ds	1
   646  0028                     ?_AD7758_CS:	
   647  0028                     ??_AD7758_GetData:	
   648                           ; 0 bytes @ 0x8
   649                           
   650  0028                     ??_AD7758_SendData:	
   651                           ; 0 bytes @ 0x8
   652                           
   653  0028                     ??___lmul:	
   654                           ; 0 bytes @ 0x8
   655                           
   656  0028                     ??___lldiv:	
   657                           ; 0 bytes @ 0x8
   658                           
   659  0028                     AD7758_CS@enable:	
   660                           ; 0 bytes @ 0x8
   661                           
   662  0028                     AD7758_GetData@addr:	
   663                           ; 1 bytes @ 0x8
   664                           
   665  0028                     AD7758_SendData@addr:	
   666                           ; 1 bytes @ 0x8
   667                           
   668  0028                     ___lmul@product:	
   669                           ; 1 bytes @ 0x8
   670                           
   671  0028                     ___lldiv@quotient:	
   672                           ; 4 bytes @ 0x8
   673                           
   674                           
   675                           ; 4 bytes @ 0x8
   676  0028                     	ds	1
   677  0029                     ??_AD7758_CS:	
   678  0029                     AD7758_CS@chip:	
   679                           ; 0 bytes @ 0x9
   680                           
   681  0029                     AD7758_GetData@i:	
   682                           ; 1 bytes @ 0x9
   683                           
   684  0029                     AD7758_SendData@i:	
   685                           ; 1 bytes @ 0x9
   686                           
   687                           
   688                           ; 1 bytes @ 0x9
   689  0029                     	ds	1
   690  002A                     ??_AD7758_init:	
   691  002A                     ??_Sample_ADE7758:	
   692                           ; 0 bytes @ 0xA
   693                           
   694  002A                     ??_AD7758_check_init:	
   695                           ; 0 bytes @ 0xA
   696                           
   697  002A                     AD7758_init@chip:	
   698                           ; 0 bytes @ 0xA
   699                           
   700  002A                     AD7758_check_init@ret:	
   701                           ; 1 bytes @ 0xA
   702                           
   703                           
   704                           ; 1 bytes @ 0xA
   705  002A                     	ds	1
   706  002B                     AD7758_check_init@chip:	
   707                           
   708                           ; 1 bytes @ 0xB
   709  002B                     	ds	1
   710  002C                     ___lldiv@counter:	
   711                           
   712                           ; 1 bytes @ 0xC
   713  002C                     	ds	1
   714  002D                     ??_sendHAHA:	
   715                           
   716                           ; 0 bytes @ 0xD
   717  002D                     	ds	4
   718  0031                     sendHAHA@cal_temp3:	
   719                           
   720                           ; 4 bytes @ 0x11
   721  0031                     	ds	4
   722  0035                     sendHAHA@idx:	
   723                           
   724                           ; 2 bytes @ 0x15
   725  0035                     	ds	2
   726  0037                     sendHAHA@cal_temp1:	
   727                           
   728                           ; 4 bytes @ 0x17
   729  0037                     	ds	4
   730  003B                     sendHAHA@cal_temp2:	
   731                           
   732                           ; 4 bytes @ 0x1B
   733  003B                     	ds	3
   734  003E                     Sample_ADE7758@sum:	
   735                           
   736                           ; 2 bytes @ 0x1E
   737  003E                     	ds	1
   738  003F                     sendHAHA@cal_temp:	
   739                           
   740                           ; 4 bytes @ 0x1F
   741  003F                     	ds	1
   742  0040                     Sample_ADE7758@chip:	
   743                           
   744                           ; 1 bytes @ 0x20
   745  0040                     	ds	3
   746  0043                     ??_modbus_main:	
   747  0043                     modbus_main@CRC_Temp:	
   748                           ; 0 bytes @ 0x23
   749                           
   750                           
   751                           ; 2 bytes @ 0x23
   752  0043                     	ds	2
   753  0045                     modbus_main@REG_Temp:	
   754                           
   755                           ; 2 bytes @ 0x25
   756  0045                     	ds	2
   757  0047                     ??_main:	
   758                           
   759                           	psect	text523
   760  008C                     __ptext523:	
   761 ;; =============== function _AD7758_check_init ends ============
   762                           
   763                           
   764 ;; *************** function _Sample_ADE7758 *****************
   765 ;; Defined at:
   766 ;;		line 148 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;  chip            1    wreg     unsigned char 
   769 ;; Auto vars:     Size  Location     Type
   770 ;;  chip            1   32[BANK0 ] unsigned char 
   771 ;;  sum             2   30[BANK0 ] unsigned int 
   772 ;; Return value:  Size  Location     Type
   773 ;;		None               void
   774 ;; Registers used:
   775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 1F/0
   779 ;;		Unchanged: FFFE0/0
   780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   781 ;;      Params:         0       0       0       0       0       0
   782 ;;      Locals:         0       3       0       0       0       0
   783 ;;      Temps:          0      20       0       0       0       0
   784 ;;      Totals:         0      23       0       0       0       0
   785 ;;Total ram usage:       23 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; Hardware stack levels required when called:    4
   788 ;; This function calls:
   789 ;;		_AD7758_CS
   790 ;;		_AD7758_GetData
   791 ;;		___bmul
   792 ;;		_AD7758_SendData
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797  008C                     _Sample_ADE7758:	
   798                           
   799                           ; Regs used in _Sample_ADE7758: [wreg+fsr1l-status,0+pclath+cstack]
   800                           ;Sample_ADE7758@chip stored from wreg
   801  008C  0020               	movlb	0	; select bank0
   802  008D  00C0               	movwf	Sample_ADE7758@chip
   803                           
   804                           ;ADE7758.c: 149: uint sum;
   805                           ;ADE7758.c: 152: AD7758_CS(chip, 1);
   806  008E  01A8               	clrf	?_AD7758_CS
   807  008F  0AA8               	incf	?_AD7758_CS,f
   808  0090  240A  3180         	fcall	_AD7758_CS
   809                           
   810                           ;ADE7758.c: 155: AD7758_GetData(0x10, 2, chip);
   811  0092  3002               	movlw	2
   812  0093  00A6               	movwf	?_AD7758_GetData
   813  0094  0840               	movf	Sample_ADE7758@chip,w
   814  0095  00A7               	movwf	?_AD7758_GetData+1
   815  0096  3010               	movlw	16
   816  0097  233D  3180         	fcall	_AD7758_GetData
   817                           
   818                           ;ADE7758.c: 156: if( FreqPhase[chip-1] == 1 )
   819  0099  0840               	movf	Sample_ADE7758@chip,w
   820  009A  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
   821  009B  0086               	movwf	6
   822  009C  0187               	clrf	7
   823  009D  0B01               	decfsz	1,w
   824  009E  28BE               	goto	l10966
   825                           
   826                           ;ADE7758.c: 157: {
   827                           ;ADE7758.c: 158: ADE7758Data[chip-1].PhaseA.Frequency[0]=ReadData[0];
   828  009F  0847               	movf	_ReadData,w
   829  00A0  24A9  3180         	fcall	PL19	;call to abstracted procedure
   830  00A2  2331  3180         	fcall	___bmul
   831  00A4  2491  3180         	fcall	PL9	;call to abstracted procedure
   832  00A6  0086               	movwf	6
   833  00A7  082C               	movf	??_Sample_ADE7758+2,w
   834  00A8  0087               	movwf	7
   835  00A9  082A               	movf	??_Sample_ADE7758,w
   836  00AA  0081               	movwf	1
   837                           
   838                           ;ADE7758.c: 159: ADE7758Data[chip-1].PhaseA.Frequency[1]=ReadData[1];
   839  00AB  0848               	movf	_ReadData+1,w
   840  00AC  24A9  3180         	fcall	PL19	;call to abstracted procedure
   841  00AE  2331  3180         	fcall	___bmul
   842  00B0  2491  3180         	fcall	PL9	;call to abstracted procedure
   843  00B2  3E01               	addlw	1
   844  00B3  243B  3180         	fcall	PL3	;call to abstracted procedure
   845                           
   846                           ;ADE7758.c: 160: FreqPhase[chip-1] = 2;
   847  00B5  0840               	movf	Sample_ADE7758@chip,w
   848  00B6  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
   849  00B7  0086               	movwf	6
   850  00B8  3002               	movlw	2
   851  00B9  0187               	clrf	7
   852  00BA  0081               	movwf	1
   853                           
   854                           ;ADE7758.c: 161: SendData[0] = 0x01;
   855  00BB  01CA               	clrf	_SendData
   856  00BC  0ACA               	incf	_SendData,f
   857  00BD  2900               	goto	l10984
   858  00BE                     l10966:	
   859                           ;ADE7758.c: 163: }
   860                           
   861                           ;ADE7758.c: 162: AD7758_SendData(0x14,1,chip);
   862                           
   863                           
   864                           ;ADE7758.c: 164: else if( FreqPhase[chip-1] == 2 )
   865  00BE  24D6  3180         	fcall	PL25	;call to abstracted procedure
   866  00C0  3A02               	xorlw	2
   867  00C1  1D03               	skipz
   868  00C2  28E0               	goto	l10976
   869                           
   870                           ;ADE7758.c: 165: {
   871                           ;ADE7758.c: 166: ADE7758Data[chip-1].PhaseB.Frequency[0]=ReadData[0];
   872  00C3  0847               	movf	_ReadData,w
   873  00C4  24A9  3180         	fcall	PL19	;call to abstracted procedure
   874  00C6  2331  3180         	fcall	___bmul
   875  00C8  2491  3180         	fcall	PL9	;call to abstracted procedure
   876  00CA  3E10               	addlw	16
   877  00CB  243B  3180         	fcall	PL3	;call to abstracted procedure
   878                           
   879                           ;ADE7758.c: 167: ADE7758Data[chip-1].PhaseB.Frequency[1]=ReadData[1];
   880  00CD  0848               	movf	_ReadData+1,w
   881  00CE  24A9  3180         	fcall	PL19	;call to abstracted procedure
   882  00D0  2331  3180         	fcall	___bmul
   883  00D2  2491  3180         	fcall	PL9	;call to abstracted procedure
   884  00D4  3E11               	addlw	17
   885  00D5  243B  3180         	fcall	PL3	;call to abstracted procedure
   886                           
   887                           ;ADE7758.c: 168: FreqPhase[chip-1] = 3;
   888  00D7  0840               	movf	Sample_ADE7758@chip,w
   889  00D8  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
   890  00D9  0086               	movwf	6
   891  00DA  3003               	movlw	3
   892  00DB  0187               	clrf	7
   893  00DC  0081               	movwf	1
   894                           
   895                           ;ADE7758.c: 169: SendData[0] = 0x02;
   896  00DD  3002               	movlw	2
   897  00DE  00CA               	movwf	_SendData
   898  00DF  2900               	goto	l10984
   899  00E0                     l10976:	
   900                           ;ADE7758.c: 171: }
   901                           
   902                           ;ADE7758.c: 170: AD7758_SendData(0x14,1,chip);
   903                           
   904                           
   905                           ;ADE7758.c: 172: else if( FreqPhase[chip-1] == 3 )
   906  00E0  24D6  3180         	fcall	PL25	;call to abstracted procedure
   907  00E2  3A03               	xorlw	3
   908  00E3  1D03               	skipz
   909  00E4  2907               	goto	l10986
   910                           
   911                           ;ADE7758.c: 173: {
   912                           ;ADE7758.c: 174: ADE7758Data[chip-1].PhaseC.Frequency[0]=ReadData[0];
   913  00E5  0847               	movf	_ReadData,w
   914  00E6  24A9  3180         	fcall	PL19	;call to abstracted procedure
   915  00E8  2331  3180         	fcall	___bmul
   916  00EA  2491  3180         	fcall	PL9	;call to abstracted procedure
   917  00EC  3E20               	addlw	32
   918  00ED  243B  3180         	fcall	PL3	;call to abstracted procedure
   919                           
   920                           ;ADE7758.c: 175: ADE7758Data[chip-1].PhaseC.Frequency[1]=ReadData[1];
   921  00EF  0848               	movf	_ReadData+1,w
   922  00F0  24A9  3180         	fcall	PL19	;call to abstracted procedure
   923  00F2  2331  3180         	fcall	___bmul
   924  00F4  2491  3180         	fcall	PL9	;call to abstracted procedure
   925  00F6  3E21               	addlw	33
   926  00F7  243B  3180         	fcall	PL3	;call to abstracted procedure
   927                           
   928                           ;ADE7758.c: 176: FreqPhase[chip-1] = 1;
   929  00F9  0840               	movf	Sample_ADE7758@chip,w
   930  00FA  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
   931  00FB  0086               	movwf	6
   932  00FC  0187               	clrf	7
   933  00FD  0181               	clrf	1
   934  00FE  0A81               	incf	1,f
   935                           
   936                           ;ADE7758.c: 177: SendData[0] = 0x00;
   937  00FF  01CA               	clrf	_SendData
   938  0100                     l10984:	
   939                           
   940                           ;ADE7758.c: 178: AD7758_SendData(0x14,1,chip);
   941  0100  01A6               	clrf	?_AD7758_SendData
   942  0101  0AA6               	incf	?_AD7758_SendData,f
   943  0102  0840               	movf	Sample_ADE7758@chip,w
   944  0103  00A7               	movwf	?_AD7758_SendData+1
   945  0104  3014               	movlw	20
   946  0105  23D0  3180         	fcall	_AD7758_SendData
   947  0107                     l10986:	
   948                           
   949                           ;ADE7758.c: 179: }
   950                           ;ADE7758.c: 182: AD7758_GetData(0x01, 2, chip);
   951  0107  3002               	movlw	2
   952  0108  00A6               	movwf	?_AD7758_GetData
   953  0109  0840               	movf	Sample_ADE7758@chip,w
   954  010A  00A7               	movwf	?_AD7758_GetData+1
   955  010B  3001               	movlw	1
   956  010C  233D  3180         	fcall	_AD7758_GetData
   957                           
   958                           ;ADE7758.c: 183: if ( ReadData[0]&0x80 )
   959  010E  1FC7               	btfss	_ReadData,7
   960  010F  2913               	goto	l10992
   961                           
   962                           ;ADE7758.c: 184: {
   963                           ;ADE7758.c: 185: ReadData[0] = ~ReadData[0];
   964  0110  30FF               	movlw	255
   965  0111  06C7               	xorwf	_ReadData,f
   966                           
   967                           ;ADE7758.c: 186: ReadData[1] = ~ReadData[1];
   968  0112  06C8               	xorwf	_ReadData+1,f
   969  0113                     l10992:	
   970                           
   971                           ;ADE7758.c: 187: }
   972                           ;ADE7758.c: 189: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseA.Active_
      +                          Power[0]) << 8) +
   973                           ;ADE7758.c: 190: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseA.Active_Power[1])) >> 1
      +                          );
   974  0113  3031               	movlw	49
   975  0114  00A0               	movwf	?___bmul
   976  0115  0840               	movf	Sample_ADE7758@chip,w
   977  0116  2331  3180         	fcall	___bmul
   978  0118  24B6  3180         	fcall	PL21	;call to abstracted procedure
   979  011A  3E08               	addlw	8
   980  011B  2471  3180         	fcall	PL8	;call to abstracted procedure
   981  011D  2331  3180         	fcall	___bmul
   982  011F  24AE  3180         	fcall	PL20	;call to abstracted procedure
   983  0121  3E09               	addlw	9
   984                           
   985                           ;ADE7758.c: 192: ADE7758Data[chip-1].PhaseA.Active_Power[0] = (uchar)(sum>>8);
   986  0122  2446  3180         	fcall	PL5	;call to abstracted procedure
   987  0124  2331  3180         	fcall	___bmul
   988  0126  2491  3180         	fcall	PL9	;call to abstracted procedure
   989  0128  3E08               	addlw	8
   990  0129  243B  3180         	fcall	PL3	;call to abstracted procedure
   991                           
   992                           ;ADE7758.c: 193: ADE7758Data[chip-1].PhaseA.Active_Power[1] = (uchar)sum;
   993  012B  083E               	movf	Sample_ADE7758@sum,w
   994  012C  24A9  3180         	fcall	PL19	;call to abstracted procedure
   995  012E  2331  3180         	fcall	___bmul
   996  0130  2491  3180         	fcall	PL9	;call to abstracted procedure
   997  0132  3E09               	addlw	9
   998  0133  243B  3180         	fcall	PL3	;call to abstracted procedure
   999                           
  1000                           ;ADE7758.c: 194: if (sum > 50 )
  1001  0135  3000               	movlw	0
  1002  0136  023F               	subwf	Sample_ADE7758@sum+1,w
  1003  0137  3033               	movlw	51
  1004  0138  1903               	skipnz
  1005  0139  023E               	subwf	Sample_ADE7758@sum,w
  1006  013A  1C03               	skipc
  1007  013B  2946               	goto	l1474
  1008                           
  1009                           ;ADE7758.c: 195: {
  1010                           ;ADE7758.c: 196: ADE7758Data[chip-1].PhaseA.Energy += sum;
  1011  013C  083E               	movf	Sample_ADE7758@sum,w
  1012  013D  24BE  3180         	fcall	PL22	;call to abstracted procedure
  1013  013F  2331  3180         	fcall	___bmul
  1014  0141  24C7  3180         	fcall	PL23	;call to abstracted procedure
  1015  0143  3E0C               	addlw	12
  1016  0144  2499  3180         	fcall	PL16	;call to abstracted procedure
  1017  0146                     l1474:	
  1018                           
  1019                           ;ADE7758.c: 197: }
  1020                           ;ADE7758.c: 199: AD7758_GetData(0x02, 2, chip);
  1021  0146  3002               	movlw	2
  1022  0147  00A6               	movwf	?_AD7758_GetData
  1023  0148  0840               	movf	Sample_ADE7758@chip,w
  1024  0149  00A7               	movwf	?_AD7758_GetData+1
  1025  014A  3002               	movlw	2
  1026  014B  233D  3180         	fcall	_AD7758_GetData
  1027                           
  1028                           ;ADE7758.c: 200: if ( ReadData[0]&0x80 )
  1029  014D  1FC7               	btfss	_ReadData,7
  1030  014E  2952               	goto	l11006
  1031                           
  1032                           ;ADE7758.c: 201: {
  1033                           ;ADE7758.c: 202: ReadData[0] = ~ReadData[0];
  1034  014F  30FF               	movlw	255
  1035  0150  06C7               	xorwf	_ReadData,f
  1036                           
  1037                           ;ADE7758.c: 203: ReadData[1] = ~ReadData[1];
  1038  0151  06C8               	xorwf	_ReadData+1,f
  1039  0152                     l11006:	
  1040                           
  1041                           ;ADE7758.c: 204: }
  1042                           ;ADE7758.c: 205: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseB.Active_
      +                          Power[0]) << 8) +
  1043                           ;ADE7758.c: 206: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseB.Active_Power[1])) >> 1
      +                          );
  1044  0152  3031               	movlw	49
  1045  0153  00A0               	movwf	?___bmul
  1046  0154  0840               	movf	Sample_ADE7758@chip,w
  1047  0155  2331  3180         	fcall	___bmul
  1048  0157  24B6  3180         	fcall	PL21	;call to abstracted procedure
  1049  0159  3E18               	addlw	24
  1050  015A  2471  3180         	fcall	PL8	;call to abstracted procedure
  1051  015C  2331  3180         	fcall	___bmul
  1052  015E  24AE  3180         	fcall	PL20	;call to abstracted procedure
  1053  0160  3E19               	addlw	25
  1054                           
  1055                           ;ADE7758.c: 208: ADE7758Data[chip-1].PhaseB.Active_Power[0] = (uchar)(sum>>8);
  1056  0161  2446  3180         	fcall	PL5	;call to abstracted procedure
  1057  0163  2331  3180         	fcall	___bmul
  1058  0165  2491  3180         	fcall	PL9	;call to abstracted procedure
  1059  0167  3E18               	addlw	24
  1060  0168  243B  3180         	fcall	PL3	;call to abstracted procedure
  1061                           
  1062                           ;ADE7758.c: 209: ADE7758Data[chip-1].PhaseB.Active_Power[1] = (uchar)sum;
  1063  016A  083E               	movf	Sample_ADE7758@sum,w
  1064  016B  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1065  016D  2331  3180         	fcall	___bmul
  1066  016F  2491  3180         	fcall	PL9	;call to abstracted procedure
  1067  0171  3E19               	addlw	25
  1068  0172  243B  3180         	fcall	PL3	;call to abstracted procedure
  1069                           
  1070                           ;ADE7758.c: 210: if (sum > 50 )
  1071  0174  3000               	movlw	0
  1072  0175  023F               	subwf	Sample_ADE7758@sum+1,w
  1073  0176  3033               	movlw	51
  1074  0177  1903               	skipnz
  1075  0178  023E               	subwf	Sample_ADE7758@sum,w
  1076  0179  1C03               	skipc
  1077  017A  2985               	goto	l1476
  1078                           
  1079                           ;ADE7758.c: 211: {
  1080                           ;ADE7758.c: 212: ADE7758Data[chip-1].PhaseB.Energy += sum;
  1081  017B  083E               	movf	Sample_ADE7758@sum,w
  1082  017C  24BE  3180         	fcall	PL22	;call to abstracted procedure
  1083  017E  2331  3180         	fcall	___bmul
  1084  0180  24C7  3180         	fcall	PL23	;call to abstracted procedure
  1085  0182  3E1C               	addlw	28
  1086  0183  2499  3180         	fcall	PL16	;call to abstracted procedure
  1087  0185                     l1476:	
  1088                           
  1089                           ;ADE7758.c: 213: }
  1090                           ;ADE7758.c: 215: AD7758_GetData(0x03, 2, chip);
  1091  0185  3002               	movlw	2
  1092  0186  00A6               	movwf	?_AD7758_GetData
  1093  0187  0840               	movf	Sample_ADE7758@chip,w
  1094  0188  00A7               	movwf	?_AD7758_GetData+1
  1095  0189  3003               	movlw	3
  1096  018A  233D  3180         	fcall	_AD7758_GetData
  1097                           
  1098                           ;ADE7758.c: 216: if ( ReadData[0]&0x80 )
  1099  018C  1FC7               	btfss	_ReadData,7
  1100  018D  2991               	goto	l11020
  1101                           
  1102                           ;ADE7758.c: 217: {
  1103                           ;ADE7758.c: 218: ReadData[0] = ~ReadData[0];
  1104  018E  30FF               	movlw	255
  1105  018F  06C7               	xorwf	_ReadData,f
  1106                           
  1107                           ;ADE7758.c: 219: ReadData[1] = ~ReadData[1];
  1108  0190  06C8               	xorwf	_ReadData+1,f
  1109  0191                     l11020:	
  1110                           
  1111                           ;ADE7758.c: 220: }
  1112                           ;ADE7758.c: 221: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseC.Active_
      +                          Power[0]) << 8) +
  1113                           ;ADE7758.c: 222: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseC.Active_Power[1])) >> 1
      +                          );
  1114  0191  3031               	movlw	49
  1115  0192  00A0               	movwf	?___bmul
  1116  0193  0840               	movf	Sample_ADE7758@chip,w
  1117  0194  2331  3180         	fcall	___bmul
  1118  0196  24B6  3180         	fcall	PL21	;call to abstracted procedure
  1119  0198  3E28               	addlw	40
  1120  0199  2471  3180         	fcall	PL8	;call to abstracted procedure
  1121  019B  2331  3180         	fcall	___bmul
  1122  019D  24AE  3180         	fcall	PL20	;call to abstracted procedure
  1123  019F  3E29               	addlw	41
  1124                           
  1125                           ;ADE7758.c: 224: ADE7758Data[chip-1].PhaseC.Active_Power[0] = (uchar)(sum>>8);
  1126  01A0  2446  3180         	fcall	PL5	;call to abstracted procedure
  1127  01A2  2331  3180         	fcall	___bmul
  1128  01A4  2491  3180         	fcall	PL9	;call to abstracted procedure
  1129  01A6  3E28               	addlw	40
  1130  01A7  243B  3180         	fcall	PL3	;call to abstracted procedure
  1131                           
  1132                           ;ADE7758.c: 225: ADE7758Data[chip-1].PhaseC.Active_Power[1] = (uchar)sum;
  1133  01A9  083E               	movf	Sample_ADE7758@sum,w
  1134  01AA  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1135  01AC  2331  3180         	fcall	___bmul
  1136  01AE  2491  3180         	fcall	PL9	;call to abstracted procedure
  1137  01B0  3E29               	addlw	41
  1138  01B1  243B  3180         	fcall	PL3	;call to abstracted procedure
  1139                           
  1140                           ;ADE7758.c: 226: if (sum > 50 )
  1141  01B3  3000               	movlw	0
  1142  01B4  023F               	subwf	Sample_ADE7758@sum+1,w
  1143  01B5  3033               	movlw	51
  1144  01B6  1903               	skipnz
  1145  01B7  023E               	subwf	Sample_ADE7758@sum,w
  1146  01B8  1C03               	skipc
  1147  01B9  29C4               	goto	l1478
  1148                           
  1149                           ;ADE7758.c: 227: {
  1150                           ;ADE7758.c: 228: ADE7758Data[chip-1].PhaseC.Energy += sum;
  1151  01BA  083E               	movf	Sample_ADE7758@sum,w
  1152  01BB  24BE  3180         	fcall	PL22	;call to abstracted procedure
  1153  01BD  2331  3180         	fcall	___bmul
  1154  01BF  24C7  3180         	fcall	PL23	;call to abstracted procedure
  1155  01C1  3E2C               	addlw	44
  1156  01C2  2499  3180         	fcall	PL16	;call to abstracted procedure
  1157  01C4                     l1478:	
  1158                           
  1159                           ;ADE7758.c: 229: }
  1160                           ;ADE7758.c: 231: AD7758_GetData(0x0D, 3, chip);
  1161  01C4  3003               	movlw	3
  1162  01C5  00A6               	movwf	?_AD7758_GetData
  1163  01C6  0840               	movf	Sample_ADE7758@chip,w
  1164  01C7  00A7               	movwf	?_AD7758_GetData+1
  1165  01C8  300D               	movlw	13
  1166  01C9  233D  3180         	fcall	_AD7758_GetData
  1167                           
  1168                           ;ADE7758.c: 232: ADE7758Data[chip-1].PhaseA.Voltage[0]=ReadData[0];
  1169  01CB  0847               	movf	_ReadData,w
  1170  01CC  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1171  01CE  2331  3180         	fcall	___bmul
  1172  01D0  2491  3180         	fcall	PL9	;call to abstracted procedure
  1173  01D2  3E02               	addlw	2
  1174  01D3  243B  3180         	fcall	PL3	;call to abstracted procedure
  1175                           
  1176                           ;ADE7758.c: 233: ADE7758Data[chip-1].PhaseA.Voltage[1]=ReadData[1];
  1177  01D5  0848               	movf	_ReadData+1,w
  1178  01D6  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1179  01D8  2331  3180         	fcall	___bmul
  1180  01DA  2491  3180         	fcall	PL9	;call to abstracted procedure
  1181  01DC  3E03               	addlw	3
  1182  01DD  243B  3180         	fcall	PL3	;call to abstracted procedure
  1183                           
  1184                           ;ADE7758.c: 234: ADE7758Data[chip-1].PhaseA.Voltage[2]=ReadData[2];
  1185  01DF  0849               	movf	_ReadData+2,w
  1186  01E0  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1187  01E2  2331  3180         	fcall	___bmul
  1188  01E4  2491  3180         	fcall	PL9	;call to abstracted procedure
  1189  01E6  3E04               	addlw	4
  1190  01E7  243B  3180         	fcall	PL3	;call to abstracted procedure
  1191                           
  1192                           ;ADE7758.c: 236: AD7758_GetData(0x0E, 3, chip);
  1193  01E9  3003               	movlw	3
  1194  01EA  00A6               	movwf	?_AD7758_GetData
  1195  01EB  0840               	movf	Sample_ADE7758@chip,w
  1196  01EC  00A7               	movwf	?_AD7758_GetData+1
  1197  01ED  300E               	movlw	14
  1198  01EE  233D  3180         	fcall	_AD7758_GetData
  1199                           
  1200                           ;ADE7758.c: 237: ADE7758Data[chip-1].PhaseB.Voltage[0]=ReadData[0];
  1201  01F0  0847               	movf	_ReadData,w
  1202  01F1  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1203  01F3  2331  3180         	fcall	___bmul
  1204  01F5  2491  3180         	fcall	PL9	;call to abstracted procedure
  1205  01F7  3E12               	addlw	18
  1206  01F8  243B  3180         	fcall	PL3	;call to abstracted procedure
  1207                           
  1208                           ;ADE7758.c: 238: ADE7758Data[chip-1].PhaseB.Voltage[1]=ReadData[1];
  1209  01FA  0848               	movf	_ReadData+1,w
  1210  01FB  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1211  01FD  2331  3180         	fcall	___bmul
  1212  01FF  2491  3180         	fcall	PL9	;call to abstracted procedure
  1213  0201  3E13               	addlw	19
  1214  0202  243B  3180         	fcall	PL3	;call to abstracted procedure
  1215                           
  1216                           ;ADE7758.c: 239: ADE7758Data[chip-1].PhaseB.Voltage[2]=ReadData[2];
  1217  0204  0849               	movf	_ReadData+2,w
  1218  0205  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1219  0207  2331  3180         	fcall	___bmul
  1220  0209  2491  3180         	fcall	PL9	;call to abstracted procedure
  1221  020B  3E14               	addlw	20
  1222  020C  243B  3180         	fcall	PL3	;call to abstracted procedure
  1223                           
  1224                           ;ADE7758.c: 241: AD7758_GetData(0x0F, 3, chip);
  1225  020E  3003               	movlw	3
  1226  020F  00A6               	movwf	?_AD7758_GetData
  1227  0210  0840               	movf	Sample_ADE7758@chip,w
  1228  0211  00A7               	movwf	?_AD7758_GetData+1
  1229  0212  300F               	movlw	15
  1230  0213  233D  3180         	fcall	_AD7758_GetData
  1231                           
  1232                           ;ADE7758.c: 242: ADE7758Data[chip-1].PhaseC.Voltage[0]=ReadData[0];
  1233  0215  0847               	movf	_ReadData,w
  1234  0216  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1235  0218  2331  3180         	fcall	___bmul
  1236  021A  2491  3180         	fcall	PL9	;call to abstracted procedure
  1237  021C  3E22               	addlw	34
  1238  021D  243B  3180         	fcall	PL3	;call to abstracted procedure
  1239                           
  1240                           ;ADE7758.c: 243: ADE7758Data[chip-1].PhaseC.Voltage[1]=ReadData[1];
  1241  021F  0848               	movf	_ReadData+1,w
  1242  0220  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1243  0222  2331  3180         	fcall	___bmul
  1244  0224  2491  3180         	fcall	PL9	;call to abstracted procedure
  1245  0226  3E23               	addlw	35
  1246  0227  243B  3180         	fcall	PL3	;call to abstracted procedure
  1247                           
  1248                           ;ADE7758.c: 244: ADE7758Data[chip-1].PhaseC.Voltage[2]=ReadData[2];
  1249  0229  0849               	movf	_ReadData+2,w
  1250  022A  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1251  022C  2331  3180         	fcall	___bmul
  1252  022E  2491  3180         	fcall	PL9	;call to abstracted procedure
  1253  0230  3E24               	addlw	36
  1254  0231  243B  3180         	fcall	PL3	;call to abstracted procedure
  1255                           
  1256                           ;ADE7758.c: 246: AD7758_GetData(0x0A, 3, chip);
  1257  0233  3003               	movlw	3
  1258  0234  00A6               	movwf	?_AD7758_GetData
  1259  0235  0840               	movf	Sample_ADE7758@chip,w
  1260  0236  00A7               	movwf	?_AD7758_GetData+1
  1261  0237  300A               	movlw	10
  1262  0238  233D  3180         	fcall	_AD7758_GetData
  1263                           
  1264                           ;ADE7758.c: 247: ADE7758Data[chip-1].PhaseA.Current[0]=ReadData[0];
  1265  023A  0847               	movf	_ReadData,w
  1266  023B  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1267  023D  2331  3180         	fcall	___bmul
  1268  023F  2491  3180         	fcall	PL9	;call to abstracted procedure
  1269  0241  3E05               	addlw	5
  1270  0242  243B  3180         	fcall	PL3	;call to abstracted procedure
  1271                           
  1272                           ;ADE7758.c: 248: ADE7758Data[chip-1].PhaseA.Current[1]=ReadData[1];
  1273  0244  0848               	movf	_ReadData+1,w
  1274  0245  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1275  0247  2331  3180         	fcall	___bmul
  1276  0249  2491  3180         	fcall	PL9	;call to abstracted procedure
  1277  024B  3E06               	addlw	6
  1278  024C  243B  3180         	fcall	PL3	;call to abstracted procedure
  1279                           
  1280                           ;ADE7758.c: 249: ADE7758Data[chip-1].PhaseA.Current[2]=ReadData[2];
  1281  024E  0849               	movf	_ReadData+2,w
  1282  024F  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1283  0251  2331  3180         	fcall	___bmul
  1284  0253  2491  3180         	fcall	PL9	;call to abstracted procedure
  1285  0255  3E07               	addlw	7
  1286  0256  243B  3180         	fcall	PL3	;call to abstracted procedure
  1287                           
  1288                           ;ADE7758.c: 251: AD7758_GetData(0x0B, 3, chip);
  1289  0258  3003               	movlw	3
  1290  0259  00A6               	movwf	?_AD7758_GetData
  1291  025A  0840               	movf	Sample_ADE7758@chip,w
  1292  025B  00A7               	movwf	?_AD7758_GetData+1
  1293  025C  300B               	movlw	11
  1294  025D  233D  3180         	fcall	_AD7758_GetData
  1295                           
  1296                           ;ADE7758.c: 252: ADE7758Data[chip-1].PhaseB.Current[0]=ReadData[0];
  1297  025F  0847               	movf	_ReadData,w
  1298  0260  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1299  0262  2331  3180         	fcall	___bmul
  1300  0264  2491  3180         	fcall	PL9	;call to abstracted procedure
  1301  0266  3E15               	addlw	21
  1302  0267  243B  3180         	fcall	PL3	;call to abstracted procedure
  1303                           
  1304                           ;ADE7758.c: 253: ADE7758Data[chip-1].PhaseB.Current[1]=ReadData[1];
  1305  0269  0848               	movf	_ReadData+1,w
  1306  026A  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1307  026C  2331  3180         	fcall	___bmul
  1308  026E  2491  3180         	fcall	PL9	;call to abstracted procedure
  1309  0270  3E16               	addlw	22
  1310  0271  243B  3180         	fcall	PL3	;call to abstracted procedure
  1311                           
  1312                           ;ADE7758.c: 254: ADE7758Data[chip-1].PhaseB.Current[2]=ReadData[2];
  1313  0273  0849               	movf	_ReadData+2,w
  1314  0274  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1315  0276  2331  3180         	fcall	___bmul
  1316  0278  2491  3180         	fcall	PL9	;call to abstracted procedure
  1317  027A  3E17               	addlw	23
  1318  027B  243B  3180         	fcall	PL3	;call to abstracted procedure
  1319                           
  1320                           ;ADE7758.c: 256: AD7758_GetData(0x0C, 3, chip);
  1321  027D  3003               	movlw	3
  1322  027E  00A6               	movwf	?_AD7758_GetData
  1323  027F  0840               	movf	Sample_ADE7758@chip,w
  1324  0280  00A7               	movwf	?_AD7758_GetData+1
  1325  0281  300C               	movlw	12
  1326  0282  233D  3180         	fcall	_AD7758_GetData
  1327                           
  1328                           ;ADE7758.c: 257: ADE7758Data[chip-1].PhaseC.Current[0]=ReadData[0];
  1329  0284  0847               	movf	_ReadData,w
  1330  0285  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1331  0287  2331  3180         	fcall	___bmul
  1332  0289  2491  3180         	fcall	PL9	;call to abstracted procedure
  1333  028B  3E25               	addlw	37
  1334  028C  243B  3180         	fcall	PL3	;call to abstracted procedure
  1335                           
  1336                           ;ADE7758.c: 258: ADE7758Data[chip-1].PhaseC.Current[1]=ReadData[1];
  1337  028E  0848               	movf	_ReadData+1,w
  1338  028F  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1339  0291  2331  3180         	fcall	___bmul
  1340  0293  2491  3180         	fcall	PL9	;call to abstracted procedure
  1341  0295  3E26               	addlw	38
  1342  0296  243B  3180         	fcall	PL3	;call to abstracted procedure
  1343                           
  1344                           ;ADE7758.c: 259: ADE7758Data[chip-1].PhaseC.Current[2]=ReadData[2];
  1345  0298  0849               	movf	_ReadData+2,w
  1346  0299  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1347  029B  2331  3180         	fcall	___bmul
  1348  029D  2491  3180         	fcall	PL9	;call to abstracted procedure
  1349  029F  3E27               	addlw	39
  1350  02A0  243B  3180         	fcall	PL3	;call to abstracted procedure
  1351                           
  1352                           ;ADE7758.c: 261: AD7758_GetData(0x07, 2, chip);
  1353  02A2  3002               	movlw	2
  1354  02A3  00A6               	movwf	?_AD7758_GetData
  1355  02A4  0840               	movf	Sample_ADE7758@chip,w
  1356  02A5  00A7               	movwf	?_AD7758_GetData+1
  1357  02A6  3007               	movlw	7
  1358  02A7  233D  3180         	fcall	_AD7758_GetData
  1359                           
  1360                           ;ADE7758.c: 262: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseA.Apparen
      +                          t_Power[0]) << 8) +
  1361                           ;ADE7758.c: 263: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseA.Apparent_Power[1])) >>
      +                           1);
  1362  02A9  3031               	movlw	49
  1363  02AA  00A0               	movwf	?___bmul
  1364  02AB  0840               	movf	Sample_ADE7758@chip,w
  1365  02AC  2331  3180         	fcall	___bmul
  1366  02AE  24B6  3180         	fcall	PL21	;call to abstracted procedure
  1367  02B0  3E0A               	addlw	10
  1368  02B1  2471  3180         	fcall	PL8	;call to abstracted procedure
  1369  02B3  2331  3180         	fcall	___bmul
  1370  02B5  24AE  3180         	fcall	PL20	;call to abstracted procedure
  1371  02B7  3E0B               	addlw	11
  1372                           
  1373                           ;ADE7758.c: 264: ADE7758Data[chip-1].PhaseA.Apparent_Power[0] = (uchar)(sum>>8);
  1374  02B8  2446  3180         	fcall	PL5	;call to abstracted procedure
  1375  02BA  2331  3180         	fcall	___bmul
  1376  02BC  2491  3180         	fcall	PL9	;call to abstracted procedure
  1377  02BE  3E0A               	addlw	10
  1378  02BF  243B  3180         	fcall	PL3	;call to abstracted procedure
  1379                           
  1380                           ;ADE7758.c: 265: ADE7758Data[chip-1].PhaseA.Apparent_Power[1] = (uchar)sum;
  1381  02C1  083E               	movf	Sample_ADE7758@sum,w
  1382  02C2  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1383  02C4  2331  3180         	fcall	___bmul
  1384  02C6  2491  3180         	fcall	PL9	;call to abstracted procedure
  1385  02C8  3E0B               	addlw	11
  1386  02C9  243B  3180         	fcall	PL3	;call to abstracted procedure
  1387                           
  1388                           ;ADE7758.c: 267: AD7758_GetData(0x08, 2, chip);
  1389  02CB  3002               	movlw	2
  1390  02CC  00A6               	movwf	?_AD7758_GetData
  1391  02CD  0840               	movf	Sample_ADE7758@chip,w
  1392  02CE  00A7               	movwf	?_AD7758_GetData+1
  1393  02CF  3008               	movlw	8
  1394  02D0  233D  3180         	fcall	_AD7758_GetData
  1395                           
  1396                           ;ADE7758.c: 268: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseB.Apparen
      +                          t_Power[0]) << 8) +
  1397                           ;ADE7758.c: 269: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseB.Apparent_Power[1])) >>
      +                           1);
  1398  02D2  3031               	movlw	49
  1399  02D3  00A0               	movwf	?___bmul
  1400  02D4  0840               	movf	Sample_ADE7758@chip,w
  1401  02D5  2331  3180         	fcall	___bmul
  1402  02D7  24B6  3180         	fcall	PL21	;call to abstracted procedure
  1403  02D9  3E1A               	addlw	26
  1404  02DA  2471  3180         	fcall	PL8	;call to abstracted procedure
  1405  02DC  2331  3180         	fcall	___bmul
  1406  02DE  24AE  3180         	fcall	PL20	;call to abstracted procedure
  1407  02E0  3E1B               	addlw	27
  1408                           
  1409                           ;ADE7758.c: 270: ADE7758Data[chip-1].PhaseB.Apparent_Power[0] = (uchar)(sum>>8);
  1410  02E1  2446  3180         	fcall	PL5	;call to abstracted procedure
  1411  02E3  2331  3180         	fcall	___bmul
  1412  02E5  2491  3180         	fcall	PL9	;call to abstracted procedure
  1413  02E7  3E1A               	addlw	26
  1414  02E8  243B  3180         	fcall	PL3	;call to abstracted procedure
  1415                           
  1416                           ;ADE7758.c: 271: ADE7758Data[chip-1].PhaseB.Apparent_Power[1] = (uchar)sum;
  1417  02EA  083E               	movf	Sample_ADE7758@sum,w
  1418  02EB  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1419  02ED  2331  3180         	fcall	___bmul
  1420  02EF  2491  3180         	fcall	PL9	;call to abstracted procedure
  1421  02F1  3E1B               	addlw	27
  1422  02F2  243B  3180         	fcall	PL3	;call to abstracted procedure
  1423                           
  1424                           ;ADE7758.c: 273: AD7758_GetData(0x09, 2, chip);
  1425  02F4  3002               	movlw	2
  1426  02F5  00A6               	movwf	?_AD7758_GetData
  1427  02F6  0840               	movf	Sample_ADE7758@chip,w
  1428  02F7  00A7               	movwf	?_AD7758_GetData+1
  1429  02F8  3009               	movlw	9
  1430  02F9  233D  3180         	fcall	_AD7758_GetData
  1431                           
  1432                           ;ADE7758.c: 274: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseC.Apparen
      +                          t_Power[0]) << 8) +
  1433                           ;ADE7758.c: 275: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseC.Apparent_Power[1])) >>
      +                           1);
  1434  02FB  3031               	movlw	49
  1435  02FC  00A0               	movwf	?___bmul
  1436  02FD  0840               	movf	Sample_ADE7758@chip,w
  1437  02FE  2331  3180         	fcall	___bmul
  1438  0300  24B6  3180         	fcall	PL21	;call to abstracted procedure
  1439  0302  3E2A               	addlw	42
  1440  0303  2471  3180         	fcall	PL8	;call to abstracted procedure
  1441  0305  2331  3180         	fcall	___bmul
  1442  0307  24AE  3180         	fcall	PL20	;call to abstracted procedure
  1443  0309  3E2B               	addlw	43
  1444                           
  1445                           ;ADE7758.c: 276: ADE7758Data[chip-1].PhaseC.Apparent_Power[0] = (uchar)(sum>>8);
  1446  030A  2446  3180         	fcall	PL5	;call to abstracted procedure
  1447  030C  2331  3180         	fcall	___bmul
  1448  030E  2491  3180         	fcall	PL9	;call to abstracted procedure
  1449  0310  3E2A               	addlw	42
  1450  0311  243B  3180         	fcall	PL3	;call to abstracted procedure
  1451                           
  1452                           ;ADE7758.c: 277: ADE7758Data[chip-1].PhaseC.Apparent_Power[1] = (uchar)sum;
  1453  0313  083E               	movf	Sample_ADE7758@sum,w
  1454  0314  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1455  0316  2331  3180         	fcall	___bmul
  1456  0318  2491  3180         	fcall	PL9	;call to abstracted procedure
  1457  031A  3E2B               	addlw	43
  1458  031B  243B  3180         	fcall	PL3	;call to abstracted procedure
  1459                           
  1460                           ;ADE7758.c: 279: AD7758_GetData(0x11, 1, chip);
  1461  031D  01A6               	clrf	?_AD7758_GetData
  1462  031E  0AA6               	incf	?_AD7758_GetData,f
  1463  031F  0840               	movf	Sample_ADE7758@chip,w
  1464  0320  00A7               	movwf	?_AD7758_GetData+1
  1465  0321  3011               	movlw	17
  1466  0322  233D  3180         	fcall	_AD7758_GetData
  1467                           
  1468                           ;ADE7758.c: 280: ADE7758Data[chip-1].Temper = (schar)ReadData[0];
  1469  0324  0847               	movf	_ReadData,w
  1470  0325  24A9  3180         	fcall	PL19	;call to abstracted procedure
  1471  0327  2331  3180         	fcall	___bmul
  1472  0329  2491  3180         	fcall	PL9	;call to abstracted procedure
  1473  032B  3E30               	addlw	48
  1474  032C  243B  3180         	fcall	PL3	;call to abstracted procedure
  1475                           
  1476                           ;ADE7758.c: 283: AD7758_CS(chip, 0);
  1477  032E  01A8               	clrf	?_AD7758_CS
  1478  032F  0840               	movf	Sample_ADE7758@chip,w
  1479  0330  2C0A               	ljmp	_AD7758_CS
  1480  0331                     __end_of_Sample_ADE7758:	
  1481  0331                     __ptext531:	
  1482 ;; =============== function ___lmul ends ============
  1483                           
  1484                           
  1485 ;; *************** function ___bmul *****************
  1486 ;; Defined at:
  1487 ;;		line 3 in file "d:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\bmul.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  multiplier      1    wreg     unsigned char 
  1490 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  multiplier      1    2[BANK0 ] unsigned char 
  1493 ;;  product         1    1[BANK0 ] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      unsigned char 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0
  1498 ;; Tracked objects:
  1499 ;;		On entry : 1F/0
  1500 ;;		On exit  : 1F/0
  1501 ;;		Unchanged: FFFE0/0
  1502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1503 ;;      Params:         0       1       0       0       0       0
  1504 ;;      Locals:         0       2       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0       0
  1506 ;;      Totals:         0       3       0       0       0       0
  1507 ;;Total ram usage:        3 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    2
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_Sample_ADE7758
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516  0331                     ___bmul:	
  1517                           
  1518                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1519                           ;___bmul@multiplier stored from wreg
  1520  0331  00A2               	movwf	___bmul@multiplier
  1521  0332  01A1               	clrf	___bmul@product
  1522  0333                     l10558:	
  1523  0333  0820               	movf	___bmul@multiplicand,w
  1524  0334  1822               	btfsc	___bmul@multiplier,0
  1525  0335  07A1               	addwf	___bmul@product,f
  1526  0336  35A0               	lslf	___bmul@multiplicand,f
  1527  0337  36A2               	lsrf	___bmul@multiplier,f
  1528  0338  08A2               	movf	___bmul@multiplier,f
  1529  0339  1D03               	skipz
  1530  033A  2B33               	goto	l10558
  1531  033B  0821               	movf	___bmul@product,w
  1532  033C  0008               	return
  1533  033D                     __end_of___bmul:	
  1534  033D                     __ptext527:	
  1535 ;; =============== function _AD7758_SendData ends ============
  1536                           
  1537                           
  1538 ;; *************** function _AD7758_GetData *****************
  1539 ;; Defined at:
  1540 ;;		line 59 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;  addr            1    wreg     unsigned char 
  1543 ;;  num             1    6[BANK0 ] unsigned char 
  1544 ;;  chip            1    7[BANK0 ] unsigned char 
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;  addr            1    8[BANK0 ] unsigned char 
  1547 ;;  i               1    9[BANK0 ] unsigned char 
  1548 ;; Return value:  Size  Location     Type
  1549 ;;		None               void
  1550 ;; Registers used:
  1551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 1F/0
  1554 ;;		On exit  : 1F/0
  1555 ;;		Unchanged: FFFE0/0
  1556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1557 ;;      Params:         0       2       0       0       0       0
  1558 ;;      Locals:         0       2       0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0
  1560 ;;      Totals:         0       4       0       0       0       0
  1561 ;;Total ram usage:        4 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    3
  1564 ;; This function calls:
  1565 ;;		_spiSendByte
  1566 ;; This function is called by:
  1567 ;;		_Sample_ADE7758
  1568 ;;		_AD7758_check_init
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571  033D                     _AD7758_GetData:	
  1572                           
  1573                           ; Regs used in _AD7758_GetData: [wreg+fsr1l-status,0+pclath+cstack]
  1574                           ;AD7758_GetData@addr stored from wreg
  1575  033D  00A8               	movwf	AD7758_GetData@addr
  1576                           
  1577                           ;ADE7758.c: 60: uchar i;
  1578                           ;ADE7758.c: 76: spiSendByte(addr);
  1579  033E  23E2  3180         	fcall	_spiSendByte
  1580                           
  1581                           ;ADE7758.c: 77: for(i=0;i<num;i++)
  1582  0340  01A9               	clrf	AD7758_GetData@i
  1583  0341                     l10630:	
  1584  0341  0826               	movf	AD7758_GetData@num,w
  1585  0342  0229               	subwf	AD7758_GetData@i,w
  1586  0343  1803               	btfsc	3,0
  1587  0344  0008               	return
  1588                           
  1589                           ;ADE7758.c: 78: {
  1590                           ;ADE7758.c: 79: ReadData[i] = spiSendByte (0x00);
  1591  0345  0829               	movf	AD7758_GetData@i,w
  1592  0346  3E47               	addlw	_ReadData& (0+255)
  1593  0347  0086               	movwf	6
  1594  0348  3000               	movlw	0
  1595  0349  0187               	clrf	7
  1596  034A  23E2  3180         	fcall	_spiSendByte
  1597  034C  0081               	movwf	1
  1598  034D  0AA9               	incf	AD7758_GetData@i,f
  1599  034E  2B41               	goto	l10630
  1600  034F                     __end_of_AD7758_GetData:	
  1601  034F                     start_initialization:	
  1602  034F  300E               	movlw	14
  1603  210E                     	;BIGRAM
  1604                           
  1605                           ; Clear objects allocated to BIGRAM
  1606  0350  0084               	movwf	4
  1607  0351  3021               	movlw	33
  1608  0352  0085               	movwf	5
  1609  0353  3062               	movlw	98
  1610  0354  00FE               	movwf	126
  1611  0355  3000               	movlw	0
  1612  0356  01FF               	clrf	127
  1613  0357  318F  27D4  3180   	fcall	clear_ram
  1614  035A  3047               	movlw	low __pbssBANK0
  1615                           
  1616                           ; Clear objects allocated to BITCOMMON
  1617  035B  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  1618                           
  1619                           ; Clear objects allocated to COMMON
  1620  035C  01F0               	clrf	__pbssCOMMON& (0+127)
  1621  035D  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1622  035E  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1623  035F  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1624  0360  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1625  0361  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  1626                           
  1627                           ; Clear objects allocated to BANK0
  1628  0362  0084               	movwf	4
  1629  0363  3000               	movlw	high __pbssBANK0
  1630  0364  0085               	movwf	5
  1631  0365  300C               	movlw	12
  1632  0366  00FE               	movwf	126
  1633  0367  3000               	movlw	0
  1634  0368  00FF               	movwf	127
  1635  0369  318F  27D4  3180   	fcall	clear_ram
  1636                           
  1637                           ; Clear objects allocated to BANK1
  1638  036C  30A0               	movlw	low __pbssBANK1
  1639  036D  0084               	movwf	4
  1640  036E  3000               	movlw	high __pbssBANK1
  1641  036F  0085               	movwf	5
  1642  0370  3040               	movlw	64
  1643  0371  00FE               	movwf	126
  1644  0372  3000               	movlw	0
  1645  0373  00FF               	movwf	127
  1646  0374  318F  27D4  3180   	fcall	clear_ram
  1647                           
  1648                           ; Clear objects allocated to BANK2
  1649  0377  3020               	movlw	low __pbssBANK2
  1650  0378  0084               	movwf	4
  1651  0379  3001               	movlw	high __pbssBANK2
  1652  037A  0085               	movwf	5
  1653  037B  3040               	movlw	64
  1654  037C  00FE               	movwf	126
  1655  037D  3000               	movlw	0
  1656  037E  00FF               	movwf	127
  1657  037F  318F  27D4  3180   	fcall	clear_ram
  1658  0382                     end_of_initialization:	
  1659                           ;End of C runtime variable initialization code
  1660                           
  1661  0382  0020               	movlb	0
  1662  0383  2B84               	ljmp	_main	;jump to C main() function
  1663  0384                     __pmaintext:	
  1664                           ; 0 bytes @ 0x27
  1665 ;;Data sizes: Strings 0, constant 0, data 0, bss 146, persistent 0 stack 0
  1666 ;;Auto spaces:   Size  Autos    Used
  1667 ;; COMMON          14      6      13
  1668 ;; BANK0           80     39      51
  1669 ;; BANK1           80      0      64
  1670 ;; BANK2           80      0      64
  1671 ;; BANK3           30      0       0
  1672 ;; BANK4            0      0       0
  1673 ;;
  1674 ;; Pointer list with targets:
  1675 ;; ?___lmul	unsigned long  size(1) Largest target is 0
  1676 ;;
  1677 ;; ?___lldiv	unsigned long  size(1) Largest target is 0
  1678 ;;
  1679 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
  1680 ;;
  1681 ;; ModbusCalcCRC@Frame	PTR unsigned char  size(2) Largest target is 64
  1682 ;;		 -> tx_data(BANK1[64]), rx_data(BANK2[64]), 
  1683 ;;
  1684 ;;
  1685 ;; Critical Paths under _main in COMMON
  1686 ;;
  1687 ;;   None.
  1688 ;;
  1689 ;; Critical Paths under _isr in COMMON
  1690 ;;
  1691 ;;   _isr->___lwmod
  1692 ;;
  1693 ;; Critical Paths under _main in BANK0
  1694 ;;
  1695 ;;   _main->_modbus_main
  1696 ;;   _modbus_main->_sendHAHA
  1697 ;;   _AD7758_check_init->_AD7758_CS
  1698 ;;   _AD7758_check_init->_AD7758_GetData
  1699 ;;   _Sample_ADE7758->_AD7758_CS
  1700 ;;   _Sample_ADE7758->_AD7758_GetData
  1701 ;;   _Sample_ADE7758->_AD7758_SendData
  1702 ;;   _AD7758_init->_AD7758_CS
  1703 ;;   _AD7758_init->_AD7758_SendData
  1704 ;;   _sendHAHA->___lldiv
  1705 ;;   _AD7758_SendData->_spiSendByte
  1706 ;;   _AD7758_GetData->_spiSendByte
  1707 ;;   _AD7758_CS->_Delay
  1708 ;;
  1709 ;; Critical Paths under _isr in BANK0
  1710 ;;
  1711 ;;   None.
  1712 ;;
  1713 ;; Critical Paths under _main in BANK1
  1714 ;;
  1715 ;;   None.
  1716 ;;
  1717 ;; Critical Paths under _isr in BANK1
  1718 ;;
  1719 ;;   None.
  1720 ;;
  1721 ;; Critical Paths under _main in BANK2
  1722 ;;
  1723 ;;   None.
  1724 ;;
  1725 ;; Critical Paths under _isr in BANK2
  1726 ;;
  1727 ;;   None.
  1728 ;;
  1729 ;; Critical Paths under _main in BANK3
  1730 ;;
  1731 ;;   None.
  1732 ;;
  1733 ;; Critical Paths under _isr in BANK3
  1734 ;;
  1735 ;;   None.
  1736 ;;
  1737 ;; Critical Paths under _main in BANK4
  1738 ;;
  1739 ;;   None.
  1740 ;;
  1741 ;; Critical Paths under _isr in BANK4
  1742 ;;
  1743 ;;   None.
  1744 ;;
  1745 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1746 ;;
  1747 ;;
  1748 ;;Call Graph Tables:
  1749 ;;
  1750 ;; ---------------------------------------------------------------------------------
  1751 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1752 ;; ---------------------------------------------------------------------------------
  1753 ;; (0) _main                                                 0     0      0    9452
  1754 ;;                         _Initialize
  1755 ;;                           _SPI_Init
  1756 ;;                        _AD7758_init
  1757 ;;                        _modbus_init
  1758 ;;                        _modbus_main
  1759 ;;                     _Sample_ADE7758
  1760 ;;                  _AD7758_check_init
  1761 ;; ---------------------------------------------------------------------------------
  1762 ;; (1) _modbus_main                                          4     4      0    4540
  1763 ;;                                             35 BANK0      4     4      0
  1764 ;;                      _ModbusCalcCRC
  1765 ;;                           _sendHAHA
  1766 ;; ---------------------------------------------------------------------------------
  1767 ;; (1) _AD7758_check_init                                    2     2      0     560
  1768 ;;                                             10 BANK0      2     2      0
  1769 ;;                          _AD7758_CS
  1770 ;;                     _AD7758_GetData
  1771 ;; ---------------------------------------------------------------------------------
  1772 ;; (1) _Sample_ADE7758                                      23    23      0    3702
  1773 ;;                                             10 BANK0     23    23      0
  1774 ;;                          _AD7758_CS
  1775 ;;                     _AD7758_GetData
  1776 ;;                             ___bmul
  1777 ;;                    _AD7758_SendData
  1778 ;; ---------------------------------------------------------------------------------
  1779 ;; (1) _AD7758_init                                          1     1      0     650
  1780 ;;                                             10 BANK0      1     1      0
  1781 ;;                          _AD7758_CS
  1782 ;;                    _AD7758_SendData
  1783 ;;                              _Delay
  1784 ;; ---------------------------------------------------------------------------------
  1785 ;; (2) _sendHAHA                                            22    22      0    4306
  1786 ;;                                             13 BANK0     22    22      0
  1787 ;;                            ___lldiv
  1788 ;;                             ___lmul
  1789 ;;                      _ModbusCalcCRC
  1790 ;;                    _rs485_send_data
  1791 ;; ---------------------------------------------------------------------------------
  1792 ;; (2) _AD7758_SendData                                      4     2      2     235
  1793 ;;                                              6 BANK0      4     2      2
  1794 ;;                        _spiSendByte
  1795 ;; ---------------------------------------------------------------------------------
  1796 ;; (2) _AD7758_GetData                                       4     2      2     235
  1797 ;;                                              6 BANK0      4     2      2
  1798 ;;                        _spiSendByte
  1799 ;; ---------------------------------------------------------------------------------
  1800 ;; (2) _AD7758_CS                                            2     1      1     161
  1801 ;;                                              8 BANK0      2     1      1
  1802 ;;                              _Delay
  1803 ;; ---------------------------------------------------------------------------------
  1804 ;; (3) ___lldiv                                             13     5      8     241
  1805 ;;                                              0 BANK0     13     5      8
  1806 ;; ---------------------------------------------------------------------------------
  1807 ;; (3) ___lmul                                              12     4      8     136
  1808 ;;                                              0 BANK0     12     4      8
  1809 ;; ---------------------------------------------------------------------------------
  1810 ;; (2) ___bmul                                               3     2      1     108
  1811 ;;                                              0 BANK0      3     2      1
  1812 ;; ---------------------------------------------------------------------------------
  1813 ;; (3) _ModbusCalcCRC                                        6     3      3     160
  1814 ;;                                              0 BANK0      6     3      3
  1815 ;; ---------------------------------------------------------------------------------
  1816 ;; (3) _rs485_send_data                                      0     0      0       0
  1817 ;; ---------------------------------------------------------------------------------
  1818 ;; (1) _modbus_init                                          0     0      0       0
  1819 ;; ---------------------------------------------------------------------------------
  1820 ;; (1) _Initialize                                           0     0      0       0
  1821 ;; ---------------------------------------------------------------------------------
  1822 ;; (1) _SPI_Init                                             0     0      0       0
  1823 ;; ---------------------------------------------------------------------------------
  1824 ;; (3) _spiSendByte                                          6     6      0     105
  1825 ;;                                              0 BANK0      6     6      0
  1826 ;; ---------------------------------------------------------------------------------
  1827 ;; (3) _Delay                                                8     4      4      68
  1828 ;;                                              0 BANK0      8     4      4
  1829 ;; ---------------------------------------------------------------------------------
  1830 ;; Estimated maximum stack depth 3
  1831 ;; ---------------------------------------------------------------------------------
  1832 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1833 ;; ---------------------------------------------------------------------------------
  1834 ;; (4) _isr                                                  1     1      0     182
  1835 ;;                                              5 COMMON     1     1      0
  1836 ;;                            ___lwmod
  1837 ;; ---------------------------------------------------------------------------------
  1838 ;; (5) ___lwmod                                              5     1      4     159
  1839 ;;                                              0 COMMON     5     1      4
  1840 ;; ---------------------------------------------------------------------------------
  1841 ;; Estimated maximum stack depth 5
  1842 ;; ---------------------------------------------------------------------------------
  1843 ;; Call Graph Graphs:
  1844 ;; _main (ROOT)
  1845 ;;   _Initialize
  1846 ;;   _SPI_Init
  1847 ;;   _AD7758_init
  1848 ;;     _AD7758_CS
  1849 ;;       _Delay
  1850 ;;     _AD7758_SendData
  1851 ;;       _spiSendByte
  1852 ;;     _Delay
  1853 ;;   _modbus_init
  1854 ;;   _modbus_main
  1855 ;;     _ModbusCalcCRC
  1856 ;;     _sendHAHA
  1857 ;;       ___lldiv
  1858 ;;       ___lmul
  1859 ;;       _ModbusCalcCRC
  1860 ;;       _rs485_send_data
  1861 ;;   _Sample_ADE7758
  1862 ;;     _AD7758_CS
  1863 ;;       _Delay
  1864 ;;     _AD7758_GetData
  1865 ;;       _spiSendByte
  1866 ;;     ___bmul
  1867 ;;     _AD7758_SendData
  1868 ;;       _spiSendByte
  1869 ;;   _AD7758_check_init
  1870 ;;     _AD7758_CS
  1871 ;;       _Delay
  1872 ;;     _AD7758_GetData
  1873 ;;       _spiSendByte
  1874 ;;
  1875 ;; _isr (ROOT)
  1876 ;;   ___lwmod
  1877 ;;
  1878 ;; Address spaces:
  1879 ;;Name               Size   Autos  Total    Cost      Usage
  1880 ;;BIGRAM             170      0       0       0        0.0%
  1881 ;;EEDATA             100      0       0       0        0.0%
  1882 ;;NULL                 0      0       0       0        0.0%
  1883 ;;CODE                 0      0       0       0        0.0%
  1884 ;;BITCOMMON            E      0       1       1        7.1%
  1885 ;;BITSFR0              0      0       0       1        0.0%
  1886 ;;SFR0                 0      0       0       1        0.0%
  1887 ;;COMMON               E      6       D       2       92.9%
  1888 ;;BITSFR1              0      0       0       2        0.0%
  1889 ;;SFR1                 0      0       0       2        0.0%
  1890 ;;BITSFR2              0      0       0       3        0.0%
  1891 ;;SFR2                 0      0       0       3        0.0%
  1892 ;;STACK                0      0       7       3        0.0%
  1893 ;;BITSFR3              0      0       0       4        0.0%
  1894 ;;SFR3                 0      0       0       4        0.0%
  1895 ;;ABS                  0      0      C0       4        0.0%
  1896 ;;BITBANK0            50      0       0       5        0.0%
  1897 ;;BITSFR4              0      0       0       5        0.0%
  1898 ;;SFR4                 0      0       0       5        0.0%
  1899 ;;BANK0               50     27      33       6       63.8%
  1900 ;;BITSFR5              0      0       0       6        0.0%
  1901 ;;SFR5                 0      0       0       6        0.0%
  1902 ;;BITBANK1            50      0       0       7        0.0%
  1903 ;;BITSFR6              0      0       0       7        0.0%
  1904 ;;SFR6                 0      0       0       7        0.0%
  1905 ;;BANK1               50      0      40       8       80.0%
  1906 ;;BITSFR7              0      0       0       8        0.0%
  1907 ;;SFR7                 0      0       0       8        0.0%
  1908 ;;BITBANK2            50      0       0       9        0.0%
  1909 ;;BITSFR8              0      0       0       9        0.0%
  1910 ;;SFR8                 0      0       0       9        0.0%
  1911 ;;BANK2               50      0      40      10       80.0%
  1912 ;;BITSFR9              0      0       0      10        0.0%
  1913 ;;SFR9                 0      0       0      10        0.0%
  1914 ;;BITBANK3            50      0       0      11        0.0%
  1915 ;;BITSFR10             0      0       0      11        0.0%
  1916 ;;SFR10                0      0       0      11        0.0%
  1917 ;;BANK3               1E      0       0      12        0.0%
  1918 ;;BITSFR11             0      0       0      12        0.0%
  1919 ;;SFR11                0      0       0      12        0.0%
  1920 ;;BITBANK4            30      0       0      13        0.0%
  1921 ;;BITSFR12             0      0       0      13        0.0%
  1922 ;;SFR12                0      0       0      13        0.0%
  1923 ;;BITSFR13             0      0       0      14        0.0%
  1924 ;;SFR13                0      0       0      14        0.0%
  1925 ;;BANK4                0      0       0      14        0.0%
  1926 ;;BITSFR14             0      0       0      15        0.0%
  1927 ;;SFR14                0      0       0      15        0.0%
  1928 ;;DATA                 0      0      C7      15        0.0%
  1929 ;;BITSFR15             0      0       0      16        0.0%
  1930 ;;SFR15                0      0       0      16        0.0%
  1931 ;;BITSFR16             0      0       0      17        0.0%
  1932 ;;SFR16                0      0       0      17        0.0%
  1933 ;;BITSFR17             0      0       0      18        0.0%
  1934 ;;SFR17                0      0       0      18        0.0%
  1935 ;;BITSFR18             0      0       0      19        0.0%
  1936 ;;SFR18                0      0       0      19        0.0%
  1937 ;;BITSFR19             0      0       0      20        0.0%
  1938 ;;SFR19                0      0       0      20        0.0%
  1939 ;;BITSFR20             0      0       0      21        0.0%
  1940 ;;SFR20                0      0       0      21        0.0%
  1941 ;;BITSFR21             0      0       0      22        0.0%
  1942 ;;SFR21                0      0       0      22        0.0%
  1943 ;;BITSFR22             0      0       0      23        0.0%
  1944 ;;SFR22                0      0       0      23        0.0%
  1945 ;;BITSFR23             0      0       0      24        0.0%
  1946 ;;SFR23                0      0       0      24        0.0%
  1947 ;;BITSFR24             0      0       0      25        0.0%
  1948 ;;SFR24                0      0       0      25        0.0%
  1949 ;;BITSFR25             0      0       0      26        0.0%
  1950 ;;SFR25                0      0       0      26        0.0%
  1951 ;;BITSFR26             0      0       0      27        0.0%
  1952 ;;SFR26                0      0       0      27        0.0%
  1953 ;;BITSFR27             0      0       0      28        0.0%
  1954 ;;SFR27                0      0       0      28        0.0%
  1955 ;;BITSFR28             0      0       0      29        0.0%
  1956 ;;SFR28                0      0       0      29        0.0%
  1957 ;;BITSFR29             0      0       0      30        0.0%
  1958 ;;SFR29                0      0       0      30        0.0%
  1959 ;;BITSFR30             0      0       0      31        0.0%
  1960 ;;SFR30                0      0       0      31        0.0%
  1961 ;;BITSFR31             0      0       0      32        0.0%
  1962 ;;SFR31                0      0       0      32        0.0%
  1963                           
  1964                           
  1965 ;; *************** function _main *****************
  1966 ;; Defined at:
  1967 ;;		line 242 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\main.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;		None
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;		None
  1972 ;; Return value:  Size  Location     Type
  1973 ;;		None               void
  1974 ;; Registers used:
  1975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 17F/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: FFE00/0
  1980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1981 ;;      Params:         0       0       0       0       0       0
  1982 ;;      Locals:         0       0       0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0
  1984 ;;      Totals:         0       0       0       0       0       0
  1985 ;;Total ram usage:        0 bytes
  1986 ;; Hardware stack levels required when called:    5
  1987 ;; This function calls:
  1988 ;;		_Initialize
  1989 ;;		_SPI_Init
  1990 ;;		_AD7758_init
  1991 ;;		_modbus_init
  1992 ;;		_modbus_main
  1993 ;;		_Sample_ADE7758
  1994 ;;		_AD7758_check_init
  1995 ;; This function is called by:
  1996 ;;		Startup code after reset
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999  0384                     _main:	
  2000                           
  2001                           ;main.c: 244: Initialize();
  2002                           
  2003                           ; Regs used in _main: [wreg-status,0+pclath+cstack]
  2004  0384  24FE  3180         	fcall	_Initialize
  2005                           
  2006                           ;main.c: 245: SPI_Init();
  2007  0386  2421  3180         	fcall	_SPI_Init
  2008                           
  2009                           ;main.c: 246: AD7758_init(1);
  2010  0388  3001               	movlw	1
  2011  0389  23A9  3180         	fcall	_AD7758_init
  2012                           
  2013                           ;main.c: 247: RA7 = 0;
  2014  038B  138C               	bcf	12,7
  2015                           
  2016                           ;main.c: 248: modbus_init();
  2017  038C  2431  3180         	fcall	_modbus_init
  2018  038E  0064               	clrwdt	;#
  2019  038F                     l11092:	
  2020                           
  2021                           ;main.c: 252: {
  2022                           ;main.c: 254: if(rx_data_flag == 1)
  2023  038F  1D7C               	btfss	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
  2024  0390  2B93               	goto	l11096
  2025                           
  2026                           ;main.c: 255: {
  2027                           ;main.c: 256: modbus_main();
  2028  0391  2576  3180         	fcall	_modbus_main
  2029  0393                     l11096:	
  2030  0393  0064               	clrwdt	;#
  2031                           
  2032                           ;main.c: 259: if(Sample_flag == 1)
  2033  0394  1CFC               	btfss	_Sample_flag/(0+8),_Sample_flag& (0+7)
  2034  0395  2B9A               	goto	l11104
  2035  0396  3001               	movlw	1
  2036                           
  2037                           ;main.c: 260: {
  2038                           ;main.c: 261: Sample_flag = 0;
  2039  0397  10FC               	bcf	_Sample_flag/(0+8),_Sample_flag& (0+7)
  2040                           
  2041                           ;main.c: 262: Sample_ADE7758( 0x01 );
  2042  0398  208C  3180         	fcall	_Sample_ADE7758
  2043  039A                     l11104:	
  2044  039A  0064               	clrwdt	;#
  2045                           
  2046                           ;main.c: 265: if(AbnorProcFlag == 1)
  2047  039B  1C7C               	btfss	_AbnorProcFlag/(0+8),_AbnorProcFlag& (0+7)
  2048  039C  2BA7               	goto	l11114
  2049  039D  3001               	movlw	1
  2050                           
  2051                           ;main.c: 266: {
  2052                           ;main.c: 267: AbnorProcFlag = 0;
  2053  039E  107C               	bcf	_AbnorProcFlag/(0+8),_AbnorProcFlag& (0+7)
  2054                           
  2055                           ;main.c: 268: if (AD7758_check_init(0x01) == 0 )
  2056  039F  2554  3180         	fcall	_AD7758_check_init
  2057  03A1  3800               	iorlw	0
  2058  03A2  1D03               	skipz
  2059  03A3  2BA7               	goto	l11114
  2060                           
  2061                           ;main.c: 269: {
  2062                           ;main.c: 270: AD7758_init(1);
  2063  03A4  3001               	movlw	1
  2064  03A5  23A9  3180         	fcall	_AD7758_init
  2065  03A7                     l11114:	
  2066  03A7  0064               	clrwdt	;#
  2067  03A8  2B8F               	goto	l11092
  2068  03A9                     __end_of_main:	
  2069  03A9                     __ptext524:	
  2070 ;; =============== function _Sample_ADE7758 ends ============
  2071                           
  2072                           
  2073 ;; *************** function _AD7758_init *****************
  2074 ;; Defined at:
  2075 ;;		line 121 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  chip            1    wreg     unsigned char 
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;  chip            1   10[BANK0 ] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;		None               void
  2082 ;; Registers used:
  2083 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 1F/0
  2086 ;;		On exit  : 1F/0
  2087 ;;		Unchanged: FFFE0/0
  2088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2089 ;;      Params:         0       0       0       0       0       0
  2090 ;;      Locals:         0       1       0       0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0
  2092 ;;      Totals:         0       1       0       0       0       0
  2093 ;;Total ram usage:        1 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    4
  2096 ;; This function calls:
  2097 ;;		_AD7758_CS
  2098 ;;		_AD7758_SendData
  2099 ;;		_Delay
  2100 ;; This function is called by:
  2101 ;;		_main
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104  03A9                     _AD7758_init:	
  2105                           
  2106                           ; Regs used in _AD7758_init: [wreg+fsr1l-status,0+pclath+cstack]
  2107                           ;AD7758_init@chip stored from wreg
  2108  03A9  00AA               	movwf	AD7758_init@chip
  2109                           
  2110                           ;ADE7758.c: 123: AD7758_CS(chip, 1);
  2111  03AA  01A8               	clrf	?_AD7758_CS
  2112  03AB  0AA8               	incf	?_AD7758_CS,f
  2113  03AC  240A  3180         	fcall	_AD7758_CS
  2114                           
  2115                           ;ADE7758.c: 126: SendData[0] = 0x40;
  2116                           
  2117                           ;ADE7758.c: 127: AD7758_SendData(0x13,1,chip);
  2118  03AE  24CF  3180         	fcall	PL24	;call to abstracted procedure
  2119  03B0  3013               	movlw	19
  2120  03B1  23D0  3180         	fcall	_AD7758_SendData
  2121                           
  2122                           ;ADE7758.c: 128: Delay(0x20);
  2123  03B3  3020               	movlw	32
  2124  03B4  00A0               	movwf	?_Delay
  2125  03B5  01A1               	clrf	?_Delay+1
  2126  03B6  01A2               	clrf	?_Delay+2
  2127  03B7  01A3               	clrf	?_Delay+3
  2128  03B8  24E2  3180         	fcall	_Delay
  2129                           
  2130                           ;ADE7758.c: 130: SendData[0] = 0x00;
  2131                           
  2132                           ;ADE7758.c: 131: AD7758_SendData(0x16,1,chip);
  2133  03BA  24DC  3180         	fcall	PL26	;call to abstracted procedure
  2134  03BC  3016               	movlw	22
  2135  03BD  23D0  3180         	fcall	_AD7758_SendData
  2136                           
  2137                           ;ADE7758.c: 133: SendData[0] = 0x40;
  2138                           
  2139                           ;ADE7758.c: 134: AD7758_SendData(0x17,1,chip);
  2140  03BF  24CF  3180         	fcall	PL24	;call to abstracted procedure
  2141  03C1  3017               	movlw	23
  2142  03C2  23D0  3180         	fcall	_AD7758_SendData
  2143                           
  2144                           ;ADE7758.c: 136: SendData[0] = 0x00;
  2145                           
  2146                           ;ADE7758.c: 137: AD7758_SendData(0x14,1,chip);
  2147  03C4  24DC  3180         	fcall	PL26	;call to abstracted procedure
  2148  03C6  3014               	movlw	20
  2149  03C7  23D0  3180         	fcall	_AD7758_SendData
  2150                           
  2151                           ;ADE7758.c: 138: FreqPhase[0] = 1;
  2152  03C9  01CF               	clrf	_FreqPhase
  2153  03CA  0ACF               	incf	_FreqPhase,f
  2154                           
  2155                           ;ADE7758.c: 139: FreqPhase[1] = 1;
  2156  03CB  01D0               	clrf	_FreqPhase+1
  2157  03CC  0AD0               	incf	_FreqPhase+1,f
  2158                           
  2159                           ;ADE7758.c: 142: AD7758_CS(chip, 0);
  2160  03CD  01A8               	clrf	?_AD7758_CS
  2161  03CE  082A               	movf	AD7758_init@chip,w
  2162  03CF  2C0A               	ljmp	_AD7758_CS
  2163  03D0                     __end_of_AD7758_init:	
  2164  03D0                     __ptext526:	
  2165 ;; =============== function _sendHAHA ends ============
  2166                           
  2167                           
  2168 ;; *************** function _AD7758_SendData *****************
  2169 ;; Defined at:
  2170 ;;		line 90 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  addr            1    wreg     unsigned char 
  2173 ;;  num             1    6[BANK0 ] unsigned char 
  2174 ;;  chip            1    7[BANK0 ] unsigned char 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  addr            1    8[BANK0 ] unsigned char 
  2177 ;;  i               1    9[BANK0 ] unsigned char 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;		None               void
  2180 ;; Registers used:
  2181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 1F/0
  2184 ;;		On exit  : 1F/0
  2185 ;;		Unchanged: FFFE0/0
  2186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2187 ;;      Params:         0       2       0       0       0       0
  2188 ;;      Locals:         0       2       0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0       0
  2190 ;;      Totals:         0       4       0       0       0       0
  2191 ;;Total ram usage:        4 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    3
  2194 ;; This function calls:
  2195 ;;		_spiSendByte
  2196 ;; This function is called by:
  2197 ;;		_AD7758_init
  2198 ;;		_Sample_ADE7758
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201  03D0                     _AD7758_SendData:	
  2202                           
  2203                           ; Regs used in _AD7758_SendData: [wreg+fsr1l-status,0+pclath+cstack]
  2204                           ;AD7758_SendData@addr stored from wreg
  2205  03D0  00A8               	movwf	AD7758_SendData@addr
  2206                           
  2207                           ;ADE7758.c: 91: uchar i;
  2208                           ;ADE7758.c: 107: spiSendByte(addr|0x80);
  2209  03D1  3880               	iorlw	128
  2210  03D2  23E2  3180         	fcall	_spiSendByte
  2211                           
  2212                           ;ADE7758.c: 108: for(i=0;i<num;i++)
  2213  03D4  01A9               	clrf	AD7758_SendData@i
  2214  03D5                     l10640:	
  2215  03D5  0826               	movf	AD7758_SendData@num,w
  2216  03D6  0229               	subwf	AD7758_SendData@i,w
  2217  03D7  1803               	btfsc	3,0
  2218  03D8  0008               	return
  2219                           
  2220                           ;ADE7758.c: 109: {
  2221                           ;ADE7758.c: 110: spiSendByte (SendData[i]);
  2222  03D9  0829               	movf	AD7758_SendData@i,w
  2223  03DA  3E4A               	addlw	_SendData& (0+255)
  2224  03DB  0086               	movwf	6
  2225  03DC  0187               	clrf	7
  2226  03DD  0801               	movf	1,w
  2227  03DE  23E2  3180         	fcall	_spiSendByte
  2228  03E0  0AA9               	incf	AD7758_SendData@i,f
  2229  03E1  2BD5               	goto	l10640
  2230  03E2                     __end_of_AD7758_SendData:	
  2231  03E2                     __ptext537:	
  2232 ;; =============== function _SPI_Init ends ============
  2233                           
  2234                           
  2235 ;; *************** function _spiSendByte *****************
  2236 ;; Defined at:
  2237 ;;		line 28 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\util.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  spi_data        1    wreg     unsigned char 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;  spi_data        1    0[BANK0 ] unsigned char 
  2242 ;;  cc              4    1[BANK0 ] unsigned long 
  2243 ;;  spi_tmp         1    5[BANK0 ] unsigned char 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      unsigned char 
  2246 ;; Registers used:
  2247 ;;		wreg, status,2, status,0
  2248 ;; Tracked objects:
  2249 ;;		On entry : 1F/0
  2250 ;;		On exit  : 1F/0
  2251 ;;		Unchanged: FFFE0/0
  2252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2253 ;;      Params:         0       0       0       0       0       0
  2254 ;;      Locals:         0       6       0       0       0       0
  2255 ;;      Temps:          0       0       0       0       0       0
  2256 ;;      Totals:         0       6       0       0       0       0
  2257 ;;Total ram usage:        6 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    2
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_AD7758_GetData
  2264 ;;		_AD7758_SendData
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267  03E2                     _spiSendByte:	
  2268                           
  2269                           ; Regs used in _spiSendByte: [wreg+status,2+status,0]
  2270                           ;spiSendByte@spi_data stored from wreg
  2271  03E2  00A0               	movwf	spiSendByte@spi_data
  2272                           
  2273                           ;util.c: 30: ulong cc = 0;
  2274  03E3  01A1               	clrf	spiSendByte@cc
  2275  03E4  01A2               	clrf	spiSendByte@cc+1
  2276  03E5  01A3               	clrf	spiSendByte@cc+2
  2277  03E6  01A4               	clrf	spiSendByte@cc+3
  2278                           
  2279                           ;util.c: 31: SSPBUF=spi_data;
  2280  03E7  0024               	movlb	4	; select bank4
  2281  03E8  0091               	movwf	17	;volatile
  2282                           
  2283                           ;util.c: 32: while((!SSP1IF)&&(cc < 0x0fffffff))
  2284  03E9  2C01               	goto	l10408
  2285  03EA                     l10410:	
  2286  03EA  300F               	movlw	15
  2287  03EB  0224               	subwf	spiSendByte@cc+3,w
  2288  03EC  1D03               	skipz
  2289  03ED  2BF8               	goto	u1205
  2290  03EE  30FF               	movlw	255
  2291  03EF  0223               	subwf	spiSendByte@cc+2,w
  2292  03F0  1D03               	skipz
  2293  03F1  2BF8               	goto	u1205
  2294  03F2  30FF               	movlw	255
  2295  03F3  0222               	subwf	spiSendByte@cc+1,w
  2296  03F4  1D03               	skipz
  2297  03F5  2BF8               	goto	u1205
  2298  03F6  30FF               	movlw	255
  2299  03F7  0221               	subwf	spiSendByte@cc,w
  2300  03F8                     u1205:	
  2301  03F8  1803               	btfsc	3,0
  2302  03F9  2C04               	goto	l10412
  2303                           
  2304                           ;util.c: 33: {
  2305                           ;util.c: 34: cc++;
  2306  03FA  0AA1               	incf	spiSendByte@cc,f
  2307  03FB  1903               	skipnz
  2308  03FC  0AA2               	incf	spiSendByte@cc+1,f
  2309  03FD  1903               	skipnz
  2310  03FE  0AA3               	incf	spiSendByte@cc+2,f
  2311  03FF  1903               	skipnz
  2312  0400  0AA4               	incf	spiSendByte@cc+3,f
  2313  0401                     l10408:	
  2314  0401  0020               	movlb	0	; select bank0
  2315  0402  1D91               	btfss	17,3
  2316  0403  2BEA               	goto	l10410
  2317  0404                     l10412:	
  2318                           
  2319                           ;util.c: 35: }
  2320                           ;util.c: 36: spi_tmp = SSPBUF;
  2321  0404  0024               	movlb	4	; select bank4
  2322  0405  0811               	movf	17,w	;volatile
  2323  0406  0020               	movlb	0	; select bank0
  2324  0407  00A5               	movwf	spiSendByte@spi_tmp
  2325                           
  2326                           ;util.c: 37: SSP1IF = 0;
  2327  0408  1191               	bcf	17,3
  2328                           
  2329                           ;util.c: 38: return spi_tmp;
  2330  0409  0008               	return
  2331  040A                     __end_of_spiSendByte:	
  2332  040A                     __ptext528:	
  2333 ;; =============== function _AD7758_GetData ends ============
  2334                           
  2335                           
  2336 ;; *************** function _AD7758_CS *****************
  2337 ;; Defined at:
  2338 ;;		line 34 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;  chip            1    wreg     unsigned char 
  2341 ;;  enable          1    8[BANK0 ] unsigned char 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;  chip            1    9[BANK0 ] unsigned char 
  2344 ;; Return value:  Size  Location     Type
  2345 ;;		None               void
  2346 ;; Registers used:
  2347 ;;		wreg, status,2, status,0, pclath, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 1F/0
  2350 ;;		On exit  : 1F/0
  2351 ;;		Unchanged: FFFE0/0
  2352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2353 ;;      Params:         0       1       0       0       0       0
  2354 ;;      Locals:         0       1       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0       0
  2356 ;;      Totals:         0       2       0       0       0       0
  2357 ;;Total ram usage:        2 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    3
  2360 ;; This function calls:
  2361 ;;		_Delay
  2362 ;; This function is called by:
  2363 ;;		_AD7758_init
  2364 ;;		_Sample_ADE7758
  2365 ;;		_AD7758_check_init
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368  040A                     _AD7758_CS:	
  2369                           
  2370                           ; Regs used in _AD7758_CS: [wreg+status,2+status,0+pclath+cstack]
  2371                           ;AD7758_CS@chip stored from wreg
  2372  040A  00A9               	movwf	AD7758_CS@chip
  2373                           
  2374                           ;ADE7758.c: 35: if (enable)
  2375  040B  0828               	movf	AD7758_CS@enable,w
  2376  040C  1903               	btfsc	3,2
  2377  040D  2C19               	goto	l1445
  2378                           
  2379                           ;ADE7758.c: 36: {
  2380                           ;ADE7758.c: 37: if ( 1 == chip )
  2381  040E  0B29               	decfsz	AD7758_CS@chip,w
  2382  040F  2C12               	goto	l10616
  2383                           
  2384                           ;ADE7758.c: 38: {
  2385                           ;ADE7758.c: 39: RB3=0;
  2386  0410  118D               	bcf	13,3
  2387  0411  2C1A               	goto	L1
  2388  0412                     l10616:	
  2389                           ;ADE7758.c: 41: }
  2390                           
  2391                           ;ADE7758.c: 40: RB0=1;
  2392                           
  2393                           
  2394                           ;ADE7758.c: 42: else if ( 2 == chip )
  2395  0412  0829               	movf	AD7758_CS@chip,w
  2396  0413  3A02               	xorlw	2
  2397  0414  1D03               	skipz
  2398  0415  2C1B               	goto	l10620
  2399                           
  2400                           ;ADE7758.c: 43: {
  2401                           ;ADE7758.c: 44: RB0=0;
  2402  0416  100D               	bcf	13,0
  2403                           
  2404                           ;ADE7758.c: 45: RB3=1;
  2405  0417  158D               	bsf	13,3
  2406  0418  2C1B               	goto	l10620
  2407  0419                     l1445:	
  2408                           
  2409                           ;ADE7758.c: 48: else
  2410                           ;ADE7758.c: 49: {
  2411                           ;ADE7758.c: 50: RB3=1;
  2412  0419  158D               	bsf	13,3
  2413  041A                     L1:	
  2414                           
  2415                           ;ADE7758.c: 51: RB0=1;
  2416  041A  140D               	bsf	13,0
  2417  041B                     l10620:	
  2418                           
  2419                           ;ADE7758.c: 52: }
  2420                           ;ADE7758.c: 54: Delay(0x01);
  2421  041B  01A0               	clrf	?_Delay
  2422  041C  0AA0               	incf	?_Delay,f
  2423  041D  01A1               	clrf	?_Delay+1
  2424  041E  01A2               	clrf	?_Delay+2
  2425  041F  01A3               	clrf	?_Delay+3
  2426  0420  2CE2               	ljmp	l10394
  2427  0421                     __end_of_AD7758_CS:	
  2428  0421                     __ptext536:	
  2429 ;; =============== function _Initialize ends ============
  2430                           
  2431                           
  2432 ;; *************** function _SPI_Init *****************
  2433 ;; Defined at:
  2434 ;;		line 20 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\main.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;		None
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;		None
  2439 ;; Return value:  Size  Location     Type
  2440 ;;		None               void
  2441 ;; Registers used:
  2442 ;;		wreg
  2443 ;; Tracked objects:
  2444 ;;		On entry : 17F/1
  2445 ;;		On exit  : 17F/0
  2446 ;;		Unchanged: FFE80/0
  2447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2448 ;;      Params:         0       0       0       0       0       0
  2449 ;;      Locals:         0       0       0       0       0       0
  2450 ;;      Temps:          0       0       0       0       0       0
  2451 ;;      Totals:         0       0       0       0       0       0
  2452 ;;Total ram usage:        0 bytes
  2453 ;; Hardware stack levels used:    1
  2454 ;; Hardware stack levels required when called:    2
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_main
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461  0421                     _SPI_Init:	
  2462                           
  2463                           ;main.c: 22: SSP1CON1bits.SSPEN=0;
  2464                           
  2465                           ; Regs used in _SPI_Init: [wreg]
  2466  0421  0024               	movlb	4	; select bank4
  2467  0422  1295               	bcf	21,5	;volatile
  2468                           
  2469                           ;main.c: 24: SSP1CON1bits.SSPM0 = 0;
  2470  0423  1015               	bcf	21,0	;volatile
  2471                           
  2472                           ;main.c: 25: SSP1CON1bits.SSPM1 = 1;
  2473  0424  1495               	bsf	21,1	;volatile
  2474                           
  2475                           ;main.c: 26: SSP1CON1bits.SSPM2 = 0;
  2476  0425  1115               	bcf	21,2	;volatile
  2477                           
  2478                           ;main.c: 27: SSP1CON1bits.SSPM3 = 1;
  2479  0426  1595               	bsf	21,3	;volatile
  2480                           
  2481                           ;main.c: 28: SSP1ADD = 3;
  2482  0427  3003               	movlw	3
  2483  0428  0092               	movwf	18	;volatile
  2484                           
  2485                           ;main.c: 30: SSP2STATbits.SMP=1;
  2486  0429  179C               	bsf	28,7	;volatile
  2487                           
  2488                           ;main.c: 32: SSP2STATbits.CKE=1;
  2489  042A  171C               	bsf	28,6	;volatile
  2490                           
  2491                           ;main.c: 33: SSP2CON1bits.CKP = 0;
  2492  042B  121D               	bcf	29,4	;volatile
  2493                           
  2494                           ;main.c: 34: SSP1CON1bits.SSPEN=1;
  2495  042C  1695               	bsf	21,5	;volatile
  2496                           
  2497                           ;main.c: 36: RB3=1;
  2498  042D  0020               	movlb	0	; select bank0
  2499  042E  158D               	bsf	13,3
  2500                           
  2501                           ;main.c: 37: RB0=1;
  2502  042F  140D               	bsf	13,0
  2503  0430  0008               	return
  2504  0431                     __end_of_SPI_Init:	
  2505  0431                     __ptext534:	
  2506 ;; =============== function _rs485_send_data ends ============
  2507                           
  2508                           
  2509 ;; *************** function _modbus_init *****************
  2510 ;; Defined at:
  2511 ;;		line 8 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;		None
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;		None
  2516 ;; Return value:  Size  Location     Type
  2517 ;;		None               void
  2518 ;; Registers used:
  2519 ;;		wreg, status,2
  2520 ;; Tracked objects:
  2521 ;;		On entry : 17F/0
  2522 ;;		On exit  : 17F/0
  2523 ;;		Unchanged: FFE80/0
  2524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2525 ;;      Params:         0       0       0       0       0       0
  2526 ;;      Locals:         0       0       0       0       0       0
  2527 ;;      Temps:          0       0       0       0       0       0
  2528 ;;      Totals:         0       0       0       0       0       0
  2529 ;;Total ram usage:        0 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    2
  2532 ;; This function calls:
  2533 ;;		Nothing
  2534 ;; This function is called by:
  2535 ;;		_main
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538  0431                     _modbus_init:	
  2539                           
  2540                           ;modbus.c: 9: rx_timeout = 11;
  2541                           
  2542                           ; Regs used in _modbus_init: [wreg+status,2]
  2543  0431  300B               	movlw	11
  2544  0432  00D2               	movwf	modbus@rx_timeout	;volatile
  2545                           
  2546                           ;modbus.c: 10: rx_data_counter = 0;
  2547  0433  01F2               	clrf	_rx_data_counter	;volatile
  2548                           
  2549                           ;modbus.c: 11: rx_data_flag = 0;
  2550  0434  117C               	bcf	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
  2551                           
  2552                           ;modbus.c: 13: tx_data_num = 0;
  2553  0435  01F5               	clrf	_tx_data_num	;volatile
  2554                           
  2555                           ;modbus.c: 14: tx_data_index = 0;
  2556  0436  01F4               	clrf	_tx_data_index	;volatile
  2557  0437  30C9               	movlw	201
  2558                           
  2559                           ;modbus.c: 15: tx_timeout_flag = 0;
  2560  0438  11FC               	bcf	_tx_timeout_flag/(0+8),_tx_timeout_flag& (0+7)
  2561                           
  2562                           ;modbus.c: 16: address = 0XC9;
  2563  0439  00D1               	movwf	_address	;volatile
  2564  043A  0008               	return
  2565  043B                     __end_of_modbus_init:	
  2566  043B                     PL3:	
  2567  043B  00AD               	movwf	??_Sample_ADE7758+3
  2568  043C  3000               	movlw	0
  2569  043D  3D2C               	addwfc	??_Sample_ADE7758+2,w
  2570  043E  00AE               	movwf	??_Sample_ADE7758+4
  2571  043F  082D               	movf	??_Sample_ADE7758+3,w
  2572  0440  0086               	movwf	6
  2573  0441  082E               	movf	??_Sample_ADE7758+4,w
  2574  0442  0087               	movwf	7
  2575  0443  082A               	movf	??_Sample_ADE7758,w
  2576  0444  0081               	movwf	1
  2577  0445  0008               	return
  2578  0446                     PL5:	
  2579  0446  0086               	movwf	6
  2580  0447  3000               	movlw	0
  2581  0448  3D35               	addwfc	??_Sample_ADE7758+11,w
  2582  0449  0087               	movwf	7
  2583  044A  0801               	movf	1,w
  2584  044B  00B6               	movwf	??_Sample_ADE7758+12
  2585  044C  01B7               	clrf	??_Sample_ADE7758+13
  2586  044D  01B8               	clrf	??_Sample_ADE7758+14
  2587  044E  01B9               	clrf	??_Sample_ADE7758+15
  2588  044F  0848               	movf	_ReadData+1,w
  2589  0450  00BA               	movwf	??_Sample_ADE7758+16
  2590  0451  01BB               	clrf	??_Sample_ADE7758+17
  2591  0452  01BC               	clrf	??_Sample_ADE7758+18
  2592  0453  01BD               	clrf	??_Sample_ADE7758+19
  2593  0454  07B6               	addwf	??_Sample_ADE7758+12,f
  2594  0455  083B               	movf	??_Sample_ADE7758+17,w
  2595  0456  3DB7               	addwfc	??_Sample_ADE7758+13,f
  2596  0457  083C               	movf	??_Sample_ADE7758+18,w
  2597  0458  3DB8               	addwfc	??_Sample_ADE7758+14,f
  2598  0459  083D               	movf	??_Sample_ADE7758+19,w
  2599  045A  3DB9               	addwfc	??_Sample_ADE7758+15,f
  2600  045B  0836               	movf	??_Sample_ADE7758+12,w
  2601  045C  07AC               	addwf	??_Sample_ADE7758+2,f
  2602  045D  0837               	movf	??_Sample_ADE7758+13,w
  2603  045E  3DAD               	addwfc	??_Sample_ADE7758+3,f
  2604  045F  0838               	movf	??_Sample_ADE7758+14,w
  2605  0460  3DAE               	addwfc	??_Sample_ADE7758+4,f
  2606  0461  0839               	movf	??_Sample_ADE7758+15,w
  2607  0462  3DAF               	addwfc	??_Sample_ADE7758+5,f
  2608  0463  36AF               	lsrf	??_Sample_ADE7758+5,f
  2609  0464  0CAE               	rrf	??_Sample_ADE7758+4,f
  2610  0465  0CAD               	rrf	??_Sample_ADE7758+3,f
  2611  0466  0CAC               	rrf	??_Sample_ADE7758+2,f
  2612  0467  082D               	movf	??_Sample_ADE7758+3,w
  2613  0468  00BF               	movwf	Sample_ADE7758@sum+1
  2614  0469  082C               	movf	??_Sample_ADE7758+2,w
  2615  046A  00BE               	movwf	Sample_ADE7758@sum
  2616  046B  083F               	movf	Sample_ADE7758@sum+1,w
  2617  046C  00AA               	movwf	??_Sample_ADE7758
  2618  046D  3031               	movlw	49
  2619  046E  00A0               	movwf	?___bmul
  2620  046F  0840               	movf	Sample_ADE7758@chip,w
  2621  0470  0008               	return
  2622  0471                     PL8:	
  2623  0471  0086               	movwf	6
  2624  0472  3000               	movlw	0
  2625  0473  3D2B               	addwfc	??_Sample_ADE7758+1,w
  2626  0474  0087               	movwf	7
  2627  0475  0801               	movf	1,w
  2628  0476  00AC               	movwf	??_Sample_ADE7758+2
  2629  0477  01AD               	clrf	??_Sample_ADE7758+3
  2630  0478  01AE               	clrf	??_Sample_ADE7758+4
  2631  0479  01AF               	clrf	??_Sample_ADE7758+5
  2632  047A  0847               	movf	_ReadData,w
  2633  047B  00B0               	movwf	??_Sample_ADE7758+6
  2634  047C  01B1               	clrf	??_Sample_ADE7758+7
  2635  047D  01B2               	clrf	??_Sample_ADE7758+8
  2636  047E  01B3               	clrf	??_Sample_ADE7758+9
  2637  047F  07AC               	addwf	??_Sample_ADE7758+2,f
  2638  0480  0831               	movf	??_Sample_ADE7758+7,w
  2639  0481  3DAD               	addwfc	??_Sample_ADE7758+3,f
  2640  0482  0832               	movf	??_Sample_ADE7758+8,w
  2641  0483  3DAE               	addwfc	??_Sample_ADE7758+4,f
  2642  0484  0833               	movf	??_Sample_ADE7758+9,w
  2643  0485  3DAF               	addwfc	??_Sample_ADE7758+5,f
  2644  0486  082E               	movf	??_Sample_ADE7758+4,w
  2645  0487  00AF               	movwf	??_Sample_ADE7758+5
  2646  0488  082D               	movf	??_Sample_ADE7758+3,w
  2647  0489  00AE               	movwf	??_Sample_ADE7758+4
  2648  048A  082C               	movf	??_Sample_ADE7758+2,w
  2649  048B  00AD               	movwf	??_Sample_ADE7758+3
  2650  048C  3031               	movlw	49
  2651  048D  01AC               	clrf	??_Sample_ADE7758+2
  2652  048E  00A0               	movwf	?___bmul
  2653  048F  0840               	movf	Sample_ADE7758@chip,w
  2654  0490  0008               	return
  2655  0491                     PL9:	
  2656  0491  3EDD               	addlw	221
  2657  0492  00AB               	movwf	??_Sample_ADE7758+1
  2658  0493  3020               	movlw	32
  2659  0494  1803               	skipnc
  2660  0495  0A89               	incf	9,f
  2661  0496  00AC               	movwf	??_Sample_ADE7758+2
  2662  0497  082B               	movf	??_Sample_ADE7758+1,w
  2663  0498  0008               	return
  2664  0499                     PL16:	
  2665  0499  0086               	movwf	6
  2666  049A  3000               	movlw	0
  2667  049B  3D2F               	addwfc	??_Sample_ADE7758+5,w
  2668  049C  0087               	movwf	7
  2669  049D  082A               	movf	??_Sample_ADE7758,w
  2670  049E  0781               	addwf	1,f
  2671  049F  3141               	addfsr 1,1
  2672  04A0  082B               	movf	??_Sample_ADE7758+1,w
  2673  04A1  3D81               	addwfc	1,f
  2674  04A2  3141               	addfsr 1,1
  2675  04A3  082C               	movf	??_Sample_ADE7758+2,w
  2676  04A4  3D81               	addwfc	1,f
  2677  04A5  3141               	addfsr 1,1
  2678  04A6  082D               	movf	??_Sample_ADE7758+3,w
  2679  04A7  3D81               	addwfc	1,f
  2680  04A8  0008               	return
  2681  04A9                     PL19:	
  2682  04A9  00AA               	movwf	??_Sample_ADE7758
  2683  04AA  3031               	movlw	49
  2684  04AB  00A0               	movwf	?___bmul
  2685  04AC  0840               	movf	Sample_ADE7758@chip,w
  2686  04AD  0008               	return
  2687  04AE                     PL20:	
  2688  04AE  3EDD               	addlw	221
  2689  04AF  00B4               	movwf	??_Sample_ADE7758+10
  2690  04B0  3020               	movlw	32
  2691  04B1  1803               	skipnc
  2692  04B2  0A89               	incf	9,f
  2693  04B3  00B5               	movwf	??_Sample_ADE7758+11
  2694  04B4  0834               	movf	??_Sample_ADE7758+10,w
  2695  04B5  0008               	return
  2696  04B6                     PL21:	
  2697  04B6  3EDD               	addlw	221
  2698  04B7  00AA               	movwf	??_Sample_ADE7758
  2699  04B8  3020               	movlw	32
  2700  04B9  1803               	skipnc
  2701  04BA  0A89               	incf	9,f
  2702  04BB  00AB               	movwf	??_Sample_ADE7758+1
  2703  04BC  082A               	movf	??_Sample_ADE7758,w
  2704  04BD  0008               	return
  2705  04BE                     PL22:	
  2706  04BE  00AA               	movwf	??_Sample_ADE7758
  2707  04BF  083F               	movf	Sample_ADE7758@sum+1,w
  2708  04C0  00AB               	movwf	??_Sample_ADE7758+1
  2709  04C1  3031               	movlw	49
  2710  04C2  01AC               	clrf	??_Sample_ADE7758+2
  2711  04C3  01AD               	clrf	??_Sample_ADE7758+3
  2712  04C4  00A0               	movwf	?___bmul
  2713  04C5  0840               	movf	Sample_ADE7758@chip,w
  2714  04C6  0008               	return
  2715  04C7                     PL23:	
  2716  04C7  3EDD               	addlw	221
  2717  04C8  00AE               	movwf	??_Sample_ADE7758+4
  2718  04C9  3020               	movlw	32
  2719  04CA  1803               	skipnc
  2720  04CB  0A89               	incf	9,f
  2721  04CC  00AF               	movwf	??_Sample_ADE7758+5
  2722  04CD  082E               	movf	??_Sample_ADE7758+4,w
  2723  04CE  0008               	return
  2724  04CF                     PL24:	
  2725  04CF  3040               	movlw	64
  2726  04D0  00CA               	movwf	_SendData
  2727  04D1  01A6               	clrf	?_AD7758_SendData
  2728  04D2  0AA6               	incf	?_AD7758_SendData,f
  2729  04D3  082A               	movf	AD7758_init@chip,w
  2730  04D4  00A7               	movwf	?_AD7758_SendData+1
  2731  04D5  0008               	return
  2732  04D6                     PL25:	
  2733  04D6  0840               	movf	Sample_ADE7758@chip,w
  2734  04D7  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
  2735  04D8  0086               	movwf	6
  2736  04D9  0187               	clrf	7
  2737  04DA  0801               	movf	1,w
  2738  04DB  0008               	return
  2739  04DC                     PL26:	
  2740  04DC  01CA               	clrf	_SendData
  2741  04DD  01A6               	clrf	?_AD7758_SendData
  2742  04DE  0AA6               	incf	?_AD7758_SendData,f
  2743  04DF  082A               	movf	AD7758_init@chip,w
  2744  04E0  00A7               	movwf	?_AD7758_SendData+1
  2745  04E1  0008               	return
  2746  04E2                     __ptext538:	
  2747 ;; =============== function _spiSendByte ends ============
  2748                           
  2749                           
  2750 ;; *************** function _Delay *****************
  2751 ;; Defined at:
  2752 ;;		line 4 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\util.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;  delay_count_    4    0[BANK0 ] unsigned long 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  delay_count     4    4[BANK0 ] unsigned long 
  2757 ;; Return value:  Size  Location     Type
  2758 ;;		None               void
  2759 ;; Registers used:
  2760 ;;		wreg, status,2, status,0
  2761 ;; Tracked objects:
  2762 ;;		On entry : 1F/0
  2763 ;;		On exit  : 1F/0
  2764 ;;		Unchanged: FFFE0/0
  2765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2766 ;;      Params:         0       4       0       0       0       0
  2767 ;;      Locals:         0       4       0       0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0
  2769 ;;      Totals:         0       8       0       0       0       0
  2770 ;;Total ram usage:        8 bytes
  2771 ;; Hardware stack levels used:    1
  2772 ;; Hardware stack levels required when called:    2
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		_AD7758_CS
  2777 ;;		_AD7758_init
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780  04E2                     _Delay:	
  2781  04E2                     l10394:	
  2782                           ; Regs used in _Delay: [wreg+status,2+status,0]
  2783                           
  2784                           
  2785                           ;util.c: 5: ulong delay_count;
  2786                           ;util.c: 6: for( delay_count = 0 ; delay_count < delay_count_max ; delay_count ++ )
  2787  04E2  01A4               	clrf	Delay@delay_count
  2788  04E3  01A5               	clrf	Delay@delay_count+1
  2789  04E4  01A6               	clrf	Delay@delay_count+2
  2790  04E5  01A7               	clrf	Delay@delay_count+3
  2791  04E6                     l10398:	
  2792  04E6  0823               	movf	Delay@delay_count_max+3,w
  2793  04E7  0227               	subwf	Delay@delay_count+3,w
  2794  04E8  1D03               	skipz
  2795  04E9  2CF4               	goto	u1185
  2796  04EA  0822               	movf	Delay@delay_count_max+2,w
  2797  04EB  0226               	subwf	Delay@delay_count+2,w
  2798  04EC  1D03               	skipz
  2799  04ED  2CF4               	goto	u1185
  2800  04EE  0821               	movf	Delay@delay_count_max+1,w
  2801  04EF  0225               	subwf	Delay@delay_count+1,w
  2802  04F0  1D03               	skipz
  2803  04F1  2CF4               	goto	u1185
  2804  04F2  0820               	movf	Delay@delay_count_max,w
  2805  04F3  0224               	subwf	Delay@delay_count,w
  2806  04F4                     u1185:	
  2807  04F4  1803               	btfsc	3,0
  2808  04F5  0008               	return
  2809                           
  2810                           ;util.c: 7: {
  2811                           ;util.c: 8: ;
  2812  04F6  0AA4               	incf	Delay@delay_count,f
  2813  04F7  1903               	skipnz
  2814  04F8  0AA5               	incf	Delay@delay_count+1,f
  2815  04F9  1903               	skipnz
  2816  04FA  0AA6               	incf	Delay@delay_count+2,f
  2817  04FB  1903               	skipnz
  2818  04FC  0AA7               	incf	Delay@delay_count+3,f
  2819  04FD  2CE6               	goto	l10398
  2820  04FE                     __end_of_Delay:	
  2821  04FE                     __ptext535:	
  2822 ;; =============== function _modbus_init ends ============
  2823                           
  2824                           
  2825 ;; *************** function _Initialize *****************
  2826 ;; Defined at:
  2827 ;;		line 45 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\main.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;		None               void
  2834 ;; Registers used:
  2835 ;;		wreg, status,2, status,0
  2836 ;; Tracked objects:
  2837 ;;		On entry : 17F/0
  2838 ;;		On exit  : 17F/1
  2839 ;;		Unchanged: FFE80/0
  2840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2841 ;;      Params:         0       0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0
  2844 ;;      Totals:         0       0       0       0       0       0
  2845 ;;Total ram usage:        0 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    2
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_main
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854  04FE                     _Initialize:	
  2855  04FE  3068               	movlw	104
  2856                           
  2857                           ;main.c: 47: GIE=0;
  2858                           
  2859                           ; Regs used in _Initialize: [wreg+status,2+status,0]
  2860  04FF  138B               	bcf	11,7
  2861                           
  2862                           ;main.c: 48: OSCCON = 0x68;
  2863  0500  0021               	movlb	1	; select bank1
  2864  0501  0099               	movwf	25	;volatile
  2865  0502                     l2957:	
  2866                           ;main.c: 50: {; }
  2867                           
  2868  0502  1E1A               	btfss	26,4
  2869  0503  2D02               	goto	l2957
  2870                           
  2871                           ;main.c: 52: ANSELA = 0x10;
  2872  0504  3010               	movlw	16
  2873  0505  0023               	movlb	3	; select bank3
  2874  0506  008C               	movwf	12	;volatile
  2875                           
  2876                           ;main.c: 53: PORTA = 0;
  2877  0507  0020               	movlb	0	; select bank0
  2878  0508  018C               	clrf	12	;volatile
  2879                           
  2880                           ;main.c: 55: TRISA7 = 0;
  2881  0509  0021               	movlb	1	; select bank1
  2882  050A  138C               	bcf	12,7
  2883                           
  2884                           ;main.c: 56: TRISA6 = 0;
  2885  050B  130C               	bcf	12,6
  2886                           
  2887                           ;main.c: 57: TRISA4 = 1;
  2888  050C  160C               	bsf	12,4
  2889                           
  2890                           ;main.c: 58: TRISA3 = 1;
  2891  050D  158C               	bsf	12,3
  2892                           
  2893                           ;main.c: 59: TRISA2 = 1;
  2894  050E  150C               	bsf	12,2
  2895                           
  2896                           ;main.c: 60: TRISA1 = 1;
  2897  050F  148C               	bsf	12,1
  2898                           
  2899                           ;main.c: 61: TRISA0 = 1;
  2900  0510  140C               	bsf	12,0
  2901                           
  2902                           ;main.c: 63: ANSELB = 0x00;
  2903  0511  0023               	movlb	3	; select bank3
  2904  0512  018D               	clrf	13	;volatile
  2905                           
  2906                           ;main.c: 64: TRISB0 = 0;
  2907  0513  0021               	movlb	1	; select bank1
  2908  0514  30FF               	movlw	255
  2909  0515  100D               	bcf	13,0
  2910                           
  2911                           ;main.c: 65: TRISB1 = 1;
  2912  0516  148D               	bsf	13,1
  2913                           
  2914                           ;main.c: 66: TRISB2 = 1;
  2915  0517  150D               	bsf	13,2
  2916                           
  2917                           ;main.c: 67: TRISB3 = 0;
  2918  0518  118D               	bcf	13,3
  2919                           
  2920                           ;main.c: 68: TRISB4 = 0;
  2921  0519  120D               	bcf	13,4
  2922                           
  2923                           ;main.c: 69: TRISB5 = 0;
  2924  051A  128D               	bcf	13,5
  2925                           
  2926                           ;main.c: 70: TRISB6 = 0;
  2927  051B  130D               	bcf	13,6
  2928  051C  178D               	bsf	13,7
  2929                           
  2930                           ;main.c: 72: WPUB = 0B11111111;
  2931  051D  0024               	movlb	4	; select bank4
  2932  051E  008D               	movwf	13	;volatile
  2933                           
  2934                           ;main.c: 75: ADCON1=0xC0;
  2935  051F  30C0               	movlw	192
  2936  0520  0021               	movlb	1	; select bank1
  2937  0521  009E               	movwf	30	;volatile
  2938                           
  2939                           ;main.c: 78: RXDTSEL = 1;
  2940  0522  0022               	movlb	2	; select bank2
  2941  0523  179D               	bsf	29,7
  2942                           
  2943                           ;main.c: 79: TXCKSEL = 1;
  2944  0524  141E               	bsf	30,0
  2945                           
  2946                           ;main.c: 80: SDO1SEL = 1;
  2947  0525  171D               	bsf	29,6
  2948                           
  2949                           ;main.c: 84: SYNC = 0;
  2950  0526  0023               	movlb	3	; select bank3
  2951  0527  121E               	bcf	30,4
  2952                           
  2953                           ;main.c: 85: BRGH = 1;
  2954  0528  151E               	bsf	30,2
  2955                           
  2956                           ;main.c: 86: BRG16 = 1;
  2957  0529  159F               	bsf	31,3
  2958                           
  2959                           ;main.c: 87: SPBRGH = 0X00;
  2960  052A  019C               	clrf	28	;volatile
  2961                           
  2962                           ;main.c: 88: SPBRGL = 0X67;
  2963  052B  3067               	movlw	103
  2964  052C  009B               	movwf	27	;volatile
  2965                           
  2966                           ;main.c: 90: SYNC = 0;
  2967  052D  121E               	bcf	30,4
  2968                           
  2969                           ;main.c: 91: SPEN = 1;
  2970  052E  179D               	bsf	29,7
  2971                           
  2972                           ;main.c: 92: TX9 = 0;
  2973  052F  131E               	bcf	30,6
  2974                           
  2975                           ;main.c: 93: SCKP = 0;
  2976  0530  121F               	bcf	31,4
  2977                           
  2978                           ;main.c: 94: TXEN = 1;
  2979  0531  169E               	bsf	30,5
  2980                           
  2981                           ;main.c: 95: RCIE = 1;
  2982  0532  0021               	movlb	1	; select bank1
  2983  0533  1691               	bsf	17,5
  2984                           
  2985                           ;main.c: 96: RX9 = 0;
  2986  0534  0023               	movlb	3	; select bank3
  2987  0535  3047               	movlw	71
  2988  0536  131D               	bcf	29,6
  2989                           
  2990                           ;main.c: 97: CREN = 1;
  2991  0537  161D               	bsf	29,4
  2992                           
  2993                           ;main.c: 99: OPTION_REG &= 0B01000111;
  2994  0538  0021               	movlb	1	; select bank1
  2995  0539  0595               	andwf	21,f	;volatile
  2996  053A  303D               	movlw	61
  2997                           
  2998                           ;main.c: 100: TMR0IE = 1;
  2999  053B  168B               	bsf	11,5
  3000                           
  3001                           ;main.c: 101: TMR0IF = 0;
  3002  053C  110B               	bcf	11,2
  3003                           
  3004                           ;main.c: 102: TMR0 = 61;
  3005  053D  0020               	movlb	0	; select bank0
  3006  053E  0095               	movwf	21	;volatile
  3007                           
  3008                           ;main.c: 108: T1CONbits.TMR1CS = 0;
  3009  053F  303F               	movlw	-193
  3010  0540  0598               	andwf	24,f	;volatile
  3011                           
  3012                           ;main.c: 109: T1CONbits.T1CKPS0 = 1;
  3013  0541  1618               	bsf	24,4	;volatile
  3014                           
  3015                           ;main.c: 110: T1CONbits.T1CKPS1 = 1;
  3016  0542  1698               	bsf	24,5	;volatile
  3017  0543  30FF               	movlw	255
  3018                           
  3019                           ;main.c: 111: TMR1GE = 0;
  3020  0544  1399               	bcf	25,7
  3021                           
  3022                           ;main.c: 112: TMR1H=0xff;
  3023  0545  0097               	movwf	23	;volatile
  3024                           
  3025                           ;main.c: 113: TMR1L=0xc1;
  3026  0546  30C1               	movlw	193
  3027  0547  0096               	movwf	22	;volatile
  3028                           
  3029                           ;main.c: 114: TMR1ON=1;
  3030  0548  1418               	bsf	24,0
  3031                           
  3032                           ;main.c: 115: TMR1IF=0;
  3033  0549  1011               	bcf	17,0
  3034                           
  3035                           ;main.c: 116: TMR1IE=1;
  3036  054A  0021               	movlb	1	; select bank1
  3037  054B  1411               	bsf	17,0
  3038                           
  3039                           ;main.c: 118: TXIE = 0;
  3040  054C  1211               	bcf	17,4
  3041                           
  3042                           ;main.c: 122: WDTCONbits.WDTPS = 0B01010;
  3043  054D  0817               	movf	23,w	;volatile
  3044  054E  39C1               	andlw	-63
  3045  054F  3814               	iorlw	20
  3046  0550  0097               	movwf	23	;volatile
  3047                           
  3048                           ;main.c: 125: PEIE = 1;
  3049  0551  170B               	bsf	11,6
  3050                           
  3051                           ;main.c: 126: GIE = 1;
  3052  0552  178B               	bsf	11,7
  3053  0553  0008               	return
  3054  0554                     __end_of_Initialize:	
  3055  0554                     __ptext522:	
  3056 ;; =============== function _modbus_main ends ============
  3057                           
  3058                           
  3059 ;; *************** function _AD7758_check_init *****************
  3060 ;; Defined at:
  3061 ;;		line 288 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  chip            1    wreg     unsigned char 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  chip            1   11[BANK0 ] unsigned char 
  3066 ;;  ret             1   10[BANK0 ] unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  1    wreg      unsigned char 
  3069 ;; Registers used:
  3070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 1F/0
  3074 ;;		Unchanged: FFFE0/0
  3075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3076 ;;      Params:         0       0       0       0       0       0
  3077 ;;      Locals:         0       2       0       0       0       0
  3078 ;;      Temps:          0       0       0       0       0       0
  3079 ;;      Totals:         0       2       0       0       0       0
  3080 ;;Total ram usage:        2 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    4
  3083 ;; This function calls:
  3084 ;;		_AD7758_CS
  3085 ;;		_AD7758_GetData
  3086 ;; This function is called by:
  3087 ;;		_main
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090  0554                     _AD7758_check_init:	
  3091                           
  3092                           ; Regs used in _AD7758_check_init: [wreg+fsr1l-status,0+pclath+cstack]
  3093                           ;AD7758_check_init@chip stored from wreg
  3094  0554  0020               	movlb	0	; select bank0
  3095  0555  00AB               	movwf	AD7758_check_init@chip
  3096                           
  3097                           ;ADE7758.c: 289: uchar ret = 1;
  3098  0556  01AA               	clrf	AD7758_check_init@ret
  3099  0557  0AAA               	incf	AD7758_check_init@ret,f
  3100                           
  3101                           ;ADE7758.c: 292: AD7758_CS(chip, 1);
  3102  0558  01A8               	clrf	?_AD7758_CS
  3103  0559  0AA8               	incf	?_AD7758_CS,f
  3104  055A  240A  3180         	fcall	_AD7758_CS
  3105                           
  3106                           ;ADE7758.c: 295: AD7758_GetData(0x16,1,chip);
  3107  055C  01A6               	clrf	?_AD7758_GetData
  3108  055D  0AA6               	incf	?_AD7758_GetData,f
  3109  055E  082B               	movf	AD7758_check_init@chip,w
  3110  055F  00A7               	movwf	?_AD7758_GetData+1
  3111  0560  3016               	movlw	22
  3112  0561  233D  3180         	fcall	_AD7758_GetData
  3113                           
  3114                           ;ADE7758.c: 296: if ( 0x00 == ReadData[0])
  3115  0563  08C7               	movf	_ReadData,f
  3116  0564  1D03               	skipz
  3117  0565  2D70               	goto	l11044
  3118                           
  3119                           ;ADE7758.c: 297: {
  3120                           ;ADE7758.c: 298: AD7758_GetData(0x17,1,chip);
  3121  0566  01A6               	clrf	?_AD7758_GetData
  3122  0567  0AA6               	incf	?_AD7758_GetData,f
  3123  0568  082B               	movf	AD7758_check_init@chip,w
  3124  0569  00A7               	movwf	?_AD7758_GetData+1
  3125  056A  3017               	movlw	23
  3126  056B  233D  3180         	fcall	_AD7758_GetData
  3127                           
  3128                           ;ADE7758.c: 299: if ( 0x40 != ReadData[0])
  3129  056D  0847               	movf	_ReadData,w
  3130  056E  3A40               	xorlw	64
  3131  056F  1D03               	btfss	3,2
  3132  0570                     l11044:	
  3133                           
  3134                           ;ADE7758.c: 300: {
  3135                           ;ADE7758.c: 301: ret = 0;
  3136  0570  01AA               	clrf	AD7758_check_init@ret
  3137                           
  3138                           ;ADE7758.c: 307: }
  3139                           ;ADE7758.c: 310: AD7758_CS(chip, 0);
  3140  0571  01A8               	clrf	?_AD7758_CS
  3141  0572  082B               	movf	AD7758_check_init@chip,w
  3142  0573  240A               	fcall	_AD7758_CS
  3143                           
  3144                           ;ADE7758.c: 313: return ret;
  3145  0574  082A               	movf	AD7758_check_init@ret,w
  3146  0575  0008               	return
  3147  0576                     __end_of_AD7758_check_init:	
  3148  0576                     __ptext521:	
  3149 ;; =============== function _main ends ============
  3150                           
  3151                           
  3152 ;; *************** function _modbus_main *****************
  3153 ;; Defined at:
  3154 ;;		line 166 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  REG_Temp        2   37[BANK0 ] unsigned int 
  3159 ;;  CRC_Temp        2   35[BANK0 ] unsigned int 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;		None               void
  3162 ;; Registers used:
  3163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 1E/0
  3167 ;;		Unchanged: FFFE0/0
  3168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3169 ;;      Params:         0       0       0       0       0       0
  3170 ;;      Locals:         0       4       0       0       0       0
  3171 ;;      Temps:          0       0       0       0       0       0
  3172 ;;      Totals:         0       4       0       0       0       0
  3173 ;;Total ram usage:        4 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:    4
  3176 ;; This function calls:
  3177 ;;		_ModbusCalcCRC
  3178 ;;		_sendHAHA
  3179 ;; This function is called by:
  3180 ;;		_main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183  0576                     _modbus_main:	
  3184                           
  3185                           ;modbus.c: 168: unsigned int REG_Temp = 0;
  3186                           
  3187                           ; Regs used in _modbus_main: [wreg-status,0+pclath+cstack]
  3188  0576  0020               	movlb	0	; select bank0
  3189  0577  01C5               	clrf	modbus_main@REG_Temp
  3190  0578  01C6               	clrf	modbus_main@REG_Temp+1
  3191                           
  3192                           ;modbus.c: 169: if(RB0 == 0)
  3193  0579  180D               	btfsc	13,0
  3194  057A  2D7D               	goto	l4466
  3195                           
  3196                           ;modbus.c: 170: RB0 = 1;
  3197  057B  140D               	bsf	13,0
  3198  057C  2D7E               	goto	l11060
  3199  057D                     l4466:	
  3200                           
  3201                           ;modbus.c: 171: else
  3202                           ;modbus.c: 172: RB0=0;
  3203  057D  100D               	bcf	13,0
  3204  057E                     l11060:	
  3205                           
  3206                           ;modbus.c: 174: if(rx_data[0] == address)
  3207  057E  0022               	movlb	2	; select bank2
  3208  057F  0820               	movf	_rx_data^(0+256),w	;volatile
  3209  0580  0020               	movlb	0	; select bank0
  3210  0581  0651               	xorwf	_address,w	;volatile
  3211  0582  1D03               	skipz
  3212  0583  2DB9               	goto	l4468
  3213                           
  3214                           ;modbus.c: 175: {
  3215                           ;modbus.c: 176: ModbusCalcCRC(rx_data,rx_data_counter-2);
  3216  0584  3020               	movlw	_rx_data& (0+255)
  3217  0585  00A0               	movwf	?_ModbusCalcCRC
  3218  0586  3001               	movlw	1
  3219  0587  00A1               	movwf	?_ModbusCalcCRC+1
  3220  0588  0872               	movf	_rx_data_counter,w	;volatile
  3221  0589  3EFE               	addlw	254
  3222  058A  00A2               	movwf	?_ModbusCalcCRC+2
  3223  058B  25BC  3180         	fcall	_ModbusCalcCRC
  3224                           
  3225                           ;modbus.c: 177: CRC_Temp = (rx_data[rx_data_counter-1]<<8)|rx_data[rx_data_counter-2];
  3226  058D  0872               	movf	_rx_data_counter,w
  3227  058E  3E1E               	addlw	(_rx_data+-2)& (0+255)
  3228  058F  0086               	movwf	6
  3229  0590  3001               	movlw	1	; select bank2/3
  3230  0591  0087               	movwf	7
  3231  0592  0872               	movf	_rx_data_counter,w
  3232  0593  3E1F               	addlw	(_rx_data+-1)& (0+255)
  3233  0594  0084               	movwf	4
  3234  0595  3001               	movlw	1	; select bank2/3
  3235  0596  0085               	movwf	5
  3236  0597  0800               	movf	0,w
  3237  0598  00C4               	movwf	modbus_main@CRC_Temp+1
  3238  0599  0801               	movf	1,w
  3239  059A  00C3               	movwf	modbus_main@CRC_Temp
  3240                           
  3241                           ;modbus.c: 178: if(CRC == CRC_Temp)
  3242  059B  0844               	movf	modbus_main@CRC_Temp+1,w
  3243  059C  064E               	xorwf	_CRC+1,w	;volatile
  3244  059D  1D03               	skipz
  3245  059E  2DA1               	goto	u1485
  3246  059F  0843               	movf	modbus_main@CRC_Temp,w
  3247  05A0  064D               	xorwf	_CRC,w	;volatile
  3248  05A1                     u1485:	
  3249  05A1  1D03               	skipz
  3250  05A2  2DB9               	goto	l4468
  3251                           
  3252                           ;modbus.c: 179: {
  3253                           ;modbus.c: 180: REG_Temp = (rx_data[2]<<8)|rx_data[3];
  3254  05A3  0022               	movlb	2	; select bank2
  3255  05A4  0822               	movf	(_rx_data^(0+256)+2),w	;volatile
  3256  05A5  0020               	movlb	0	; select bank0
  3257  05A6  00C6               	movwf	modbus_main@REG_Temp+1
  3258  05A7  0022               	movlb	2	; select bank2
  3259  05A8  0823               	movf	(_rx_data^(0+256)+3),w	;volatile
  3260  05A9  0020               	movlb	0	; select bank0
  3261  05AA  00C5               	movwf	modbus_main@REG_Temp
  3262                           
  3263                           ;modbus.c: 181: switch(REG_Temp)
  3264  05AB  2DAF               	goto	l11074
  3265  05AC                     l11070:	
  3266  05AC  25E1  3180         	fcall	_sendHAHA
  3267  05AE  2DB9               	goto	l4468
  3268  05AF                     l11074:	
  3269                           
  3270                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3271                           ; Switch size 1, requested type "space"
  3272                           ; Number of cases is 1, Range of values is 3 to 3
  3273                           ; switch strategies available:
  3274                           ; Name         Instructions Cycles
  3275                           ; simple_byte            4     3 (average)
  3276                           ; direct_byte           11     9 (fixed)
  3277                           ; jumptable            263     9 (fixed)
  3278                           ;	Chosen strategy is simple_byte
  3279  05AF  0846               	movf	modbus_main@REG_Temp+1,w
  3280  05B0  3A03               	xorlw	3	; case 3
  3281  05B1  1903               	skipnz
  3282  05B2  2DB4               	goto	l11136
  3283  05B3  2DB9               	goto	l4468
  3284  05B4                     l11136:	
  3285                           
  3286                           ; Switch size 1, requested type "space"
  3287                           ; Number of cases is 1, Range of values is 132 to 132
  3288                           ; switch strategies available:
  3289                           ; Name         Instructions Cycles
  3290                           ; simple_byte            4     3 (average)
  3291                           ; direct_byte           11     9 (fixed)
  3292                           ; jumptable            263     9 (fixed)
  3293                           ;	Chosen strategy is simple_byte
  3294  05B4  0845               	movf	modbus_main@REG_Temp,w
  3295  05B5  3A84               	xorlw	132	; case 132
  3296  05B6  1903               	skipnz
  3297  05B7  2DAC               	goto	l11070
  3298  05B8  2DB9               	goto	l4468
  3299  05B9                     l4468:	
  3300                           
  3301                           ;modbus.c: 186: }
  3302                           ;modbus.c: 187: }
  3303                           ;modbus.c: 189: rx_data_flag = 0;
  3304  05B9  117C               	bcf	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
  3305                           
  3306                           ;modbus.c: 190: rx_data_counter = 0;
  3307  05BA  01F2               	clrf	_rx_data_counter	;volatile
  3308  05BB  0008               	return
  3309  05BC                     __end_of_modbus_main:	
  3310  05BC                     __ptext532:	
  3311 ;; =============== function ___bmul ends ============
  3312                           
  3313                           
  3314 ;; *************** function _ModbusCalcCRC *****************
  3315 ;; Defined at:
  3316 ;;		line 28 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  Frame           2    0[BANK0 ] PTR unsigned char 
  3319 ;;		 -> tx_data(64), rx_data(64), 
  3320 ;;  LenFrame        1    2[BANK0 ] unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  j               1    5[BANK0 ] unsigned char 
  3323 ;;  CntByte         1    4[BANK0 ] unsigned char 
  3324 ;;  bitVal          1    3[BANK0 ] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;		None               void
  3327 ;; Registers used:
  3328 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3329 ;; Tracked objects:
  3330 ;;		On entry : 1F/0
  3331 ;;		On exit  : 1F/0
  3332 ;;		Unchanged: FFFE0/0
  3333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3334 ;;      Params:         0       3       0       0       0       0
  3335 ;;      Locals:         0       3       0       0       0       0
  3336 ;;      Temps:          0       0       0       0       0       0
  3337 ;;      Totals:         0       6       0       0       0       0
  3338 ;;Total ram usage:        6 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    2
  3341 ;; This function calls:
  3342 ;;		Nothing
  3343 ;; This function is called by:
  3344 ;;		_sendHAHA
  3345 ;;		_modbus_main
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348  05BC                     _ModbusCalcCRC:	
  3349                           
  3350                           ;modbus.c: 29: unsigned char CntByte;
  3351                           ;modbus.c: 30: unsigned char j;
  3352                           ;modbus.c: 31: unsigned char bitVal;
  3353                           ;modbus.c: 32: CRC = 0xFFFF;
  3354                           
  3355                           ; Regs used in _ModbusCalcCRC: [wreg+fsr1l-status,0]
  3356  05BC  30FF               	movlw	255
  3357  05BD  00CD               	movwf	_CRC	;volatile
  3358  05BE  00CE               	movwf	_CRC+1	;volatile
  3359                           
  3360                           ;modbus.c: 33: for(CntByte=0;CntByte<LenFrame;CntByte++)
  3361  05BF  01A4               	clrf	ModbusCalcCRC@CntByte
  3362  05C0                     l9654:	
  3363  05C0  0822               	movf	ModbusCalcCRC@LenFrame,w
  3364  05C1  0224               	subwf	ModbusCalcCRC@CntByte,w
  3365  05C2  1803               	btfsc	3,0
  3366  05C3  0008               	return
  3367                           
  3368                           ;modbus.c: 34: {
  3369                           ;modbus.c: 35: CRC ^= Frame[CntByte];
  3370  05C4  0824               	movf	ModbusCalcCRC@CntByte,w
  3371  05C5  0720               	addwf	ModbusCalcCRC@Frame,w
  3372  05C6  0086               	movwf	6
  3373  05C7  0821               	movf	ModbusCalcCRC@Frame+1,w
  3374  05C8  1803               	skipnc
  3375  05C9  0A89               	incf	9,f
  3376  05CA  0087               	movwf	7
  3377  05CB  0801               	movf	1,w
  3378  05CC  06CD               	xorwf	_CRC,f	;volatile
  3379                           
  3380                           ;modbus.c: 36: for(j=0;j<8;j++)
  3381  05CD  01A5               	clrf	ModbusCalcCRC@j
  3382  05CE                     l9640:	
  3383                           
  3384                           ;modbus.c: 37: {
  3385                           ;modbus.c: 38: bitVal = CRC & 0x0001;
  3386  05CE  084D               	movf	_CRC,w	;volatile
  3387  05CF  00A3               	movwf	ModbusCalcCRC@bitVal
  3388  05D0  3001               	movlw	1
  3389  05D1  05A3               	andwf	ModbusCalcCRC@bitVal,f
  3390                           
  3391                           ;modbus.c: 39: CRC = CRC >> 1;
  3392  05D2  36CE               	lsrf	_CRC+1,f
  3393  05D3  0CCD               	rrf	_CRC,f	;volatile
  3394                           
  3395                           ;modbus.c: 40: if(bitVal == 1)
  3396  05D4  0B23               	decfsz	ModbusCalcCRC@bitVal,w
  3397  05D5  2DDA               	goto	l9648
  3398                           
  3399                           ;modbus.c: 41: CRC ^= 0xA001;
  3400  05D6  3001               	movlw	1
  3401  05D7  06CD               	xorwf	_CRC,f	;volatile
  3402  05D8  30A0               	movlw	160
  3403  05D9  06CE               	xorwf	_CRC+1,f	;volatile
  3404  05DA                     l9648:	
  3405  05DA  3008               	movlw	8
  3406  05DB  0AA5               	incf	ModbusCalcCRC@j,f
  3407  05DC  0225               	subwf	ModbusCalcCRC@j,w
  3408  05DD  1C03               	skipc
  3409  05DE  2DCE               	goto	l9640
  3410  05DF  0AA4               	incf	ModbusCalcCRC@CntByte,f
  3411  05E0  2DC0               	goto	l9654
  3412  05E1                     __end_of_ModbusCalcCRC:	
  3413  05E1                     __ptext525:	
  3414 ;; =============== function _AD7758_init ends ============
  3415                           
  3416                           
  3417 ;; *************** function _sendHAHA *****************
  3418 ;; Defined at:
  3419 ;;		line 47 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;		None
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;  cal_temp        4   31[BANK0 ] volatile unsigned long 
  3424 ;;  cal_temp2       4   27[BANK0 ] volatile unsigned long 
  3425 ;;  cal_temp1       4   23[BANK0 ] volatile unsigned long 
  3426 ;;  cal_temp3       4   17[BANK0 ] volatile unsigned long 
  3427 ;;  idx             2   21[BANK0 ] int 
  3428 ;; Return value:  Size  Location     Type
  3429 ;;		None               void
  3430 ;; Registers used:
  3431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 1F/1
  3435 ;;		Unchanged: FFFE0/0
  3436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3437 ;;      Params:         0       0       0       0       0       0
  3438 ;;      Locals:         0      18       0       0       0       0
  3439 ;;      Temps:          0       4       0       0       0       0
  3440 ;;      Totals:         0      22       0       0       0       0
  3441 ;;Total ram usage:       22 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    3
  3444 ;; This function calls:
  3445 ;;		___lldiv
  3446 ;;		___lmul
  3447 ;;		_ModbusCalcCRC
  3448 ;;		_rs485_send_data
  3449 ;; This function is called by:
  3450 ;;		_modbus_main
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453  05E1                     _sendHAHA:	
  3454                           
  3455                           ;modbus.c: 48: int idx = 0;
  3456                           
  3457                           ; Regs used in _sendHAHA: [wreg+fsr1l-status,0+pclath+cstack]
  3458  05E1  0020               	movlb	0	; select bank0
  3459  05E2  30C9               	movlw	201
  3460  05E3  01B5               	clrf	sendHAHA@idx
  3461  05E4  01B6               	clrf	sendHAHA@idx+1
  3462                           
  3463                           ;modbus.c: 49: volatile unsigned long cal_temp,cal_temp1,cal_temp2,cal_temp3;
  3464                           ;modbus.c: 51: tx_data[idx++] = 0XC9;
  3465  05E5  0021               	movlb	1	; select bank1
  3466  05E6  00A0               	movwf	_tx_data^(0+128)	;volatile
  3467  05E7  0020               	movlb	0	; select bank0
  3468  05E8  0AB5               	incf	sendHAHA@idx,f
  3469                           
  3470                           ;modbus.c: 52: tx_data[idx++] = 0X03;
  3471  05E9  279B  3180         	fcall	PL7	;call to abstracted procedure
  3472  05EB  3003               	movlw	3
  3473  05EC  0187               	clrf	7
  3474  05ED  0081               	movwf	1
  3475  05EE  0AB5               	incf	sendHAHA@idx,f
  3476                           
  3477                           ;modbus.c: 53: tx_data[idx++] = 36;
  3478  05EF  279B  3180         	fcall	PL7	;call to abstracted procedure
  3479  05F1  3024               	movlw	36
  3480  05F2  0081               	movwf	1
  3481  05F3  0AB5               	incf	sendHAHA@idx,f
  3482  05F4  1903               	skipnz
  3483  05F5  0AB6               	incf	sendHAHA@idx+1,f
  3484                           
  3485                           ;modbus.c: 57: cal_temp1 = ADE7758Data[0].PhaseA.Voltage[0];
  3486  05F6  3002               	movlw	2
  3487  05F7  27A1  3180         	fcall	PL10	;call to abstracted procedure
  3488                           
  3489                           ;modbus.c: 58: cal_temp2 = ADE7758Data[0].PhaseA.Voltage[1];
  3490  05F9  3003               	movlw	3
  3491  05FA  3E0E               	addlw	14
  3492  05FB  27D7  3180         	fcall	PL13	;call to abstracted procedure
  3493                           
  3494                           ;modbus.c: 59: cal_temp3 = ADE7758Data[0].PhaseA.Voltage[2];
  3495  05FD  3004               	movlw	4
  3496  05FE  3E0E               	addlw	14
  3497  05FF  0086               	movwf	6
  3498  0600  3021               	movlw	33
  3499                           
  3500                           ;modbus.c: 60: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3501  0601  2765  3180         	fcall	PL4	;call to abstracted procedure
  3502                           
  3503                           ;modbus.c: 61: cal_temp = cal_temp/359;
  3504  0603  27F6  3180         	fcall	PL18	;call to abstracted procedure
  3505  0605  27E7  3180         	fcall	PL15	;call to abstracted procedure
  3506  0607  26DA  3180         	fcall	___lldiv
  3507  0609  2793  3180         	fcall	PL6	;call to abstracted procedure
  3508                           
  3509                           ;modbus.c: 62: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3510                           
  3511                           ;modbus.c: 63: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3512                           
  3513                           ;modbus.c: 64: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3514                           
  3515                           ;modbus.c: 65: tx_data[idx++] = (unsigned char)(cal_temp);
  3516  060B  2744  3180         	fcall	PL2	;call to abstracted procedure
  3517  060D  1903               	skipnz
  3518  060E  0AB6               	incf	sendHAHA@idx+1,f
  3519                           
  3520                           ;modbus.c: 69: cal_temp1 = ADE7758Data[0].PhaseA.Current[0];
  3521  060F  3005               	movlw	5
  3522  0610  27A1  3180         	fcall	PL10	;call to abstracted procedure
  3523                           
  3524                           ;modbus.c: 70: cal_temp2 = ADE7758Data[0].PhaseA.Current[1];
  3525  0612  3006               	movlw	6
  3526  0613  3E0E               	addlw	14
  3527  0614  27D7  3180         	fcall	PL13	;call to abstracted procedure
  3528                           
  3529                           ;modbus.c: 71: cal_temp3 = ADE7758Data[0].PhaseA.Current[2];
  3530  0616  3007               	movlw	7
  3531  0617  3E0E               	addlw	14
  3532  0618  0086               	movwf	6
  3533  0619  3021               	movlw	33
  3534                           
  3535                           ;modbus.c: 72: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3536  061A  2765  3180         	fcall	PL4	;call to abstracted procedure
  3537                           
  3538                           ;modbus.c: 73: cal_temp = cal_temp/1732;
  3539  061C  27F1  3180         	fcall	PL17	;call to abstracted procedure
  3540  061E  27E7  3180         	fcall	PL15	;call to abstracted procedure
  3541  0620  26DA  3180         	fcall	___lldiv
  3542  0622  2793  3180         	fcall	PL6	;call to abstracted procedure
  3543                           
  3544                           ;modbus.c: 74: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3545                           
  3546                           ;modbus.c: 75: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3547                           
  3548                           ;modbus.c: 76: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3549                           
  3550                           ;modbus.c: 77: tx_data[idx++] = (unsigned char)(cal_temp);
  3551  0624  2744  3180         	fcall	PL2	;call to abstracted procedure
  3552  0626  1903               	skipnz
  3553  0627  0AB6               	incf	sendHAHA@idx+1,f
  3554                           
  3555                           ;modbus.c: 79: cal_temp1 = ADE7758Data[0].PhaseA.Active_Power[0];
  3556  0628  3008               	movlw	8
  3557  0629  27A1  3180         	fcall	PL10	;call to abstracted procedure
  3558                           
  3559                           ;modbus.c: 80: cal_temp2 = ADE7758Data[0].PhaseA.Active_Power[1];
  3560  062B  3009               	movlw	9
  3561  062C  3E0E               	addlw	14
  3562  062D  0086               	movwf	6
  3563  062E  27E2  3180         	fcall	PL14	;call to abstracted procedure
  3564                           
  3565                           ;modbus.c: 81: cal_temp = (unsigned long)((cal_temp1<<8)|(cal_temp2));
  3566                           
  3567                           ;modbus.c: 82: cal_temp = cal_temp*80;
  3568  0630  27B5  3180         	fcall	PL12	;call to abstracted procedure
  3569  0632  2719  3180         	fcall	___lmul
  3570  0634  27AD  3180         	fcall	PL11	;call to abstracted procedure
  3571                           
  3572                           ;modbus.c: 83: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3573                           
  3574                           ;modbus.c: 84: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3575                           
  3576                           ;modbus.c: 85: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3577                           
  3578                           ;modbus.c: 86: tx_data[idx++] = (unsigned char)(cal_temp);
  3579  0636  2744  3180         	fcall	PL2	;call to abstracted procedure
  3580  0638  1903               	skipnz
  3581  0639  0AB6               	incf	sendHAHA@idx+1,f
  3582                           
  3583                           ;modbus.c: 90: cal_temp1 = ADE7758Data[0].PhaseB.Voltage[0];
  3584  063A  3012               	movlw	18
  3585  063B  27A1  3180         	fcall	PL10	;call to abstracted procedure
  3586                           
  3587                           ;modbus.c: 91: cal_temp2 = ADE7758Data[0].PhaseB.Voltage[1];
  3588  063D  3013               	movlw	19
  3589  063E  3E0E               	addlw	14
  3590  063F  27D7  3180         	fcall	PL13	;call to abstracted procedure
  3591                           
  3592                           ;modbus.c: 92: cal_temp3 = ADE7758Data[0].PhaseB.Voltage[2];
  3593  0641  3014               	movlw	20
  3594  0642  3E0E               	addlw	14
  3595  0643  0086               	movwf	6
  3596  0644  3021               	movlw	33
  3597                           
  3598                           ;modbus.c: 93: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3599  0645  2765  3180         	fcall	PL4	;call to abstracted procedure
  3600                           
  3601                           ;modbus.c: 94: cal_temp = cal_temp/359;
  3602  0647  27F6  3180         	fcall	PL18	;call to abstracted procedure
  3603  0649  27E7  3180         	fcall	PL15	;call to abstracted procedure
  3604  064B  26DA  3180         	fcall	___lldiv
  3605  064D  2793  3180         	fcall	PL6	;call to abstracted procedure
  3606                           
  3607                           ;modbus.c: 95: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3608                           
  3609                           ;modbus.c: 96: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3610                           
  3611                           ;modbus.c: 97: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3612                           
  3613                           ;modbus.c: 98: tx_data[idx++] = (unsigned char)(cal_temp);
  3614  064F  2744  3180         	fcall	PL2	;call to abstracted procedure
  3615  0651  1903               	skipnz
  3616  0652  0AB6               	incf	sendHAHA@idx+1,f
  3617                           
  3618                           ;modbus.c: 102: cal_temp1 = ADE7758Data[0].PhaseB.Current[0];
  3619  0653  3015               	movlw	21
  3620  0654  27A1  3180         	fcall	PL10	;call to abstracted procedure
  3621                           
  3622                           ;modbus.c: 103: cal_temp2 = ADE7758Data[0].PhaseB.Current[1];
  3623  0656  3016               	movlw	22
  3624  0657  3E0E               	addlw	14
  3625  0658  27D7  3180         	fcall	PL13	;call to abstracted procedure
  3626                           
  3627                           ;modbus.c: 104: cal_temp3 = ADE7758Data[0].PhaseB.Current[2];
  3628  065A  3017               	movlw	23
  3629  065B  3E0E               	addlw	14
  3630  065C  0086               	movwf	6
  3631  065D  3021               	movlw	33
  3632                           
  3633                           ;modbus.c: 105: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3634  065E  2765  3180         	fcall	PL4	;call to abstracted procedure
  3635                           
  3636                           ;modbus.c: 106: cal_temp = cal_temp/1732;
  3637  0660  27F1  3180         	fcall	PL17	;call to abstracted procedure
  3638  0662  27E7  3180         	fcall	PL15	;call to abstracted procedure
  3639  0664  26DA  3180         	fcall	___lldiv
  3640  0666  2793  3180         	fcall	PL6	;call to abstracted procedure
  3641                           
  3642                           ;modbus.c: 107: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3643                           
  3644                           ;modbus.c: 108: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3645                           
  3646                           ;modbus.c: 109: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3647                           
  3648                           ;modbus.c: 110: tx_data[idx++] = (unsigned char)(cal_temp);
  3649  0668  2744  3180         	fcall	PL2	;call to abstracted procedure
  3650  066A  1903               	skipnz
  3651  066B  0AB6               	incf	sendHAHA@idx+1,f
  3652                           
  3653                           ;modbus.c: 112: cal_temp1 = ADE7758Data[0].PhaseB.Active_Power[0];
  3654  066C  3018               	movlw	24
  3655  066D  27A1  3180         	fcall	PL10	;call to abstracted procedure
  3656                           
  3657                           ;modbus.c: 113: cal_temp2 = ADE7758Data[0].PhaseB.Active_Power[1];
  3658  066F  3019               	movlw	25
  3659  0670  3E0E               	addlw	14
  3660  0671  0086               	movwf	6
  3661  0672  27E2  3180         	fcall	PL14	;call to abstracted procedure
  3662                           
  3663                           ;modbus.c: 114: cal_temp = (unsigned long)((cal_temp1<<8)|(cal_temp2));
  3664                           
  3665                           ;modbus.c: 115: cal_temp = cal_temp*80;
  3666  0674  27B5  3180         	fcall	PL12	;call to abstracted procedure
  3667  0676  2719  3180         	fcall	___lmul
  3668  0678  27AD  3180         	fcall	PL11	;call to abstracted procedure
  3669                           
  3670                           ;modbus.c: 116: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3671                           
  3672                           ;modbus.c: 117: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3673                           
  3674                           ;modbus.c: 118: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3675                           
  3676                           ;modbus.c: 119: tx_data[idx++] = (unsigned char)(cal_temp);
  3677  067A  2744  3180         	fcall	PL2	;call to abstracted procedure
  3678  067C  1903               	skipnz
  3679  067D  0AB6               	incf	sendHAHA@idx+1,f
  3680                           
  3681                           ;modbus.c: 124: cal_temp1 = ADE7758Data[0].PhaseC.Voltage[0];
  3682  067E  3022               	movlw	34
  3683  067F  27A1  3180         	fcall	PL10	;call to abstracted procedure
  3684                           
  3685                           ;modbus.c: 125: cal_temp2 = ADE7758Data[0].PhaseC.Voltage[1];
  3686  0681  3023               	movlw	35
  3687  0682  3E0E               	addlw	14
  3688  0683  27D7  3180         	fcall	PL13	;call to abstracted procedure
  3689                           
  3690                           ;modbus.c: 126: cal_temp3 = ADE7758Data[0].PhaseC.Voltage[2];
  3691  0685  3024               	movlw	36
  3692  0686  3E0E               	addlw	14
  3693  0687  0086               	movwf	6
  3694  0688  3021               	movlw	33
  3695                           
  3696                           ;modbus.c: 127: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3697  0689  2765  3180         	fcall	PL4	;call to abstracted procedure
  3698                           
  3699                           ;modbus.c: 128: cal_temp = cal_temp/359;
  3700  068B  27F6  3180         	fcall	PL18	;call to abstracted procedure
  3701  068D  27E7  3180         	fcall	PL15	;call to abstracted procedure
  3702  068F  26DA  3180         	fcall	___lldiv
  3703  0691  2793  3180         	fcall	PL6	;call to abstracted procedure
  3704                           
  3705                           ;modbus.c: 129: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3706                           
  3707                           ;modbus.c: 130: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3708                           
  3709                           ;modbus.c: 131: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3710                           
  3711                           ;modbus.c: 132: tx_data[idx++] = (unsigned char)(cal_temp);
  3712  0693  2744  3180         	fcall	PL2	;call to abstracted procedure
  3713  0695  1903               	skipnz
  3714  0696  0AB6               	incf	sendHAHA@idx+1,f
  3715                           
  3716                           ;modbus.c: 136: cal_temp1 = ADE7758Data[0].PhaseC.Current[0];
  3717  0697  3025               	movlw	37
  3718  0698  27A1  3180         	fcall	PL10	;call to abstracted procedure
  3719                           
  3720                           ;modbus.c: 137: cal_temp2 = ADE7758Data[0].PhaseC.Current[1];
  3721  069A  3026               	movlw	38
  3722  069B  3E0E               	addlw	14
  3723  069C  27D7  3180         	fcall	PL13	;call to abstracted procedure
  3724                           
  3725                           ;modbus.c: 138: cal_temp3 = ADE7758Data[0].PhaseC.Current[2];
  3726  069E  3027               	movlw	39
  3727  069F  3E0E               	addlw	14
  3728  06A0  0086               	movwf	6
  3729  06A1  3021               	movlw	33
  3730                           
  3731                           ;modbus.c: 139: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3732  06A2  2765  3180         	fcall	PL4	;call to abstracted procedure
  3733                           
  3734                           ;modbus.c: 140: cal_temp = cal_temp/1732;
  3735  06A4  27F1  3180         	fcall	PL17	;call to abstracted procedure
  3736  06A6  27E7  3180         	fcall	PL15	;call to abstracted procedure
  3737  06A8  26DA  3180         	fcall	___lldiv
  3738  06AA  2793  3180         	fcall	PL6	;call to abstracted procedure
  3739                           
  3740                           ;modbus.c: 141: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3741                           
  3742                           ;modbus.c: 142: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3743                           
  3744                           ;modbus.c: 143: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3745                           
  3746                           ;modbus.c: 144: tx_data[idx++] = (unsigned char)(cal_temp);
  3747  06AC  2744  3180         	fcall	PL2	;call to abstracted procedure
  3748  06AE  1903               	skipnz
  3749  06AF  0AB6               	incf	sendHAHA@idx+1,f
  3750                           
  3751                           ;modbus.c: 146: cal_temp1 = ADE7758Data[0].PhaseC.Active_Power[0];
  3752  06B0  3028               	movlw	40
  3753  06B1  27A1  3180         	fcall	PL10	;call to abstracted procedure
  3754                           
  3755                           ;modbus.c: 147: cal_temp2 = ADE7758Data[0].PhaseC.Active_Power[1];
  3756  06B3  3029               	movlw	41
  3757  06B4  3E0E               	addlw	14
  3758  06B5  0086               	movwf	6
  3759  06B6  27E2  3180         	fcall	PL14	;call to abstracted procedure
  3760                           
  3761                           ;modbus.c: 148: cal_temp = (unsigned long)((cal_temp1<<8)|(cal_temp2));
  3762                           
  3763                           ;modbus.c: 149: cal_temp = cal_temp*80;
  3764  06B8  27B5  3180         	fcall	PL12	;call to abstracted procedure
  3765  06BA  2719  3180         	fcall	___lmul
  3766  06BC  27AD  3180         	fcall	PL11	;call to abstracted procedure
  3767                           
  3768                           ;modbus.c: 150: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3769                           
  3770                           ;modbus.c: 151: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3771                           
  3772                           ;modbus.c: 152: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3773                           
  3774                           ;modbus.c: 153: tx_data[idx++] = (unsigned char)(cal_temp);
  3775  06BE  2744  3180         	fcall	PL2	;call to abstracted procedure
  3776  06C0  1903               	skipnz
  3777  06C1  0AB6               	incf	sendHAHA@idx+1,f
  3778                           
  3779                           ;modbus.c: 155: ModbusCalcCRC(tx_data,idx);
  3780  06C2  30A0               	movlw	_tx_data& (0+255)
  3781  06C3  00A0               	movwf	?_ModbusCalcCRC
  3782  06C4  01A1               	clrf	?_ModbusCalcCRC+1
  3783  06C5  0835               	movf	sendHAHA@idx,w
  3784  06C6  00A2               	movwf	?_ModbusCalcCRC+2
  3785  06C7  25BC  3180         	fcall	_ModbusCalcCRC
  3786                           
  3787                           ;modbus.c: 156: tx_data[idx++] = (unsigned char)(CRC);
  3788  06C9  0835               	movf	sendHAHA@idx,w
  3789  06CA  3EA0               	addlw	_tx_data& (0+255)
  3790  06CB  0086               	movwf	6
  3791  06CC  0187               	clrf	7
  3792  06CD  084D               	movf	_CRC,w	;volatile
  3793  06CE  0081               	movwf	1
  3794  06CF  0AB5               	incf	sendHAHA@idx,f
  3795                           
  3796                           ;modbus.c: 157: tx_data[idx++] = (unsigned char)(CRC>>8);
  3797  06D0  279B  3180         	fcall	PL7	;call to abstracted procedure
  3798  06D2  084E               	movf	_CRC+1,w	;volatile
  3799  06D3  0081               	movwf	1
  3800  06D4  0AB5               	incf	sendHAHA@idx,f
  3801  06D5  1903               	skipnz
  3802  06D6  0AB6               	incf	sendHAHA@idx+1,f
  3803                           
  3804                           ;modbus.c: 159: tx_data_num = idx;
  3805  06D7  0835               	movf	sendHAHA@idx,w
  3806  06D8  00F5               	movwf	_tx_data_num	;volatile
  3807                           
  3808                           ;modbus.c: 160: rs485_send_data();
  3809  06D9  2F3E               	ljmp	l10554
  3810  06DA                     __end_of_sendHAHA:	
  3811  06DA                     __ptext529:	
  3812 ;; =============== function _AD7758_CS ends ============
  3813                           
  3814                           
  3815 ;; *************** function ___lldiv *****************
  3816 ;; Defined at:
  3817 ;;		line 5 in file "d:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lldiv.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  divisor         4    0[BANK0 ] unsigned long 
  3820 ;;  dividend        4    4[BANK0 ] unsigned long 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  quotient        4    8[BANK0 ] unsigned long 
  3823 ;;  counter         1   12[BANK0 ] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  4    0[BANK0 ] unsigned long 
  3826 ;; Registers used:
  3827 ;;		wreg, status,2, status,0
  3828 ;; Tracked objects:
  3829 ;;		On entry : 1F/0
  3830 ;;		On exit  : 1F/0
  3831 ;;		Unchanged: FFFE0/0
  3832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3833 ;;      Params:         0       8       0       0       0       0
  3834 ;;      Locals:         0       5       0       0       0       0
  3835 ;;      Temps:          0       0       0       0       0       0
  3836 ;;      Totals:         0      13       0       0       0       0
  3837 ;;Total ram usage:       13 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    2
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_sendHAHA
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846  06DA                     ___lldiv:	
  3847                           
  3848                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3849  06DA  01A8               	clrf	___lldiv@quotient
  3850  06DB  01A9               	clrf	___lldiv@quotient+1
  3851  06DC  01AA               	clrf	___lldiv@quotient+2
  3852  06DD  01AB               	clrf	___lldiv@quotient+3
  3853  06DE  0823               	movf	___lldiv@divisor+3,w
  3854  06DF  0422               	iorwf	___lldiv@divisor+2,w
  3855  06E0  0421               	iorwf	___lldiv@divisor+1,w
  3856  06E1  0420               	iorwf	___lldiv@divisor,w
  3857  06E2  1903               	skipnz
  3858  06E3  2F10               	goto	l10606
  3859  06E4  01AC               	clrf	___lldiv@counter
  3860  06E5                     L2:	
  3861  06E5  0AAC               	incf	___lldiv@counter,f
  3862  06E6  1BA3               	btfsc	___lldiv@divisor+3,7
  3863  06E7  2EED               	goto	l10594
  3864  06E8  35A0               	lslf	___lldiv@divisor,f
  3865  06E9  0DA1               	rlf	___lldiv@divisor+1,f
  3866  06EA  0DA2               	rlf	___lldiv@divisor+2,f
  3867  06EB  0DA3               	rlf	___lldiv@divisor+3,f
  3868  06EC  2EE5               	goto	L2
  3869  06ED                     l10594:	
  3870  06ED  35A8               	lslf	___lldiv@quotient,f
  3871  06EE  0DA9               	rlf	___lldiv@quotient+1,f
  3872  06EF  0DAA               	rlf	___lldiv@quotient+2,f
  3873  06F0  0DAB               	rlf	___lldiv@quotient+3,f
  3874  06F1  0823               	movf	___lldiv@divisor+3,w
  3875  06F2  0227               	subwf	___lldiv@dividend+3,w
  3876  06F3  1D03               	skipz
  3877  06F4  2EFF               	goto	u1285
  3878  06F5  0822               	movf	___lldiv@divisor+2,w
  3879  06F6  0226               	subwf	___lldiv@dividend+2,w
  3880  06F7  1D03               	skipz
  3881  06F8  2EFF               	goto	u1285
  3882  06F9  0821               	movf	___lldiv@divisor+1,w
  3883  06FA  0225               	subwf	___lldiv@dividend+1,w
  3884  06FB  1D03               	skipz
  3885  06FC  2EFF               	goto	u1285
  3886  06FD  0820               	movf	___lldiv@divisor,w
  3887  06FE  0224               	subwf	___lldiv@dividend,w
  3888  06FF                     u1285:	
  3889  06FF  1C03               	skipc
  3890  0700  2F0A               	goto	l10602
  3891  0701  0820               	movf	___lldiv@divisor,w
  3892  0702  02A4               	subwf	___lldiv@dividend,f
  3893  0703  0821               	movf	___lldiv@divisor+1,w
  3894  0704  3BA5               	subwfb	___lldiv@dividend+1,f
  3895  0705  0822               	movf	___lldiv@divisor+2,w
  3896  0706  3BA6               	subwfb	___lldiv@dividend+2,f
  3897  0707  0823               	movf	___lldiv@divisor+3,w
  3898  0708  3BA7               	subwfb	___lldiv@dividend+3,f
  3899  0709  1428               	bsf	___lldiv@quotient,0
  3900  070A                     l10602:	
  3901  070A  36A3               	lsrf	___lldiv@divisor+3,f
  3902  070B  0CA2               	rrf	___lldiv@divisor+2,f
  3903  070C  0CA1               	rrf	___lldiv@divisor+1,f
  3904  070D  0CA0               	rrf	___lldiv@divisor,f
  3905  070E  0BAC               	decfsz	___lldiv@counter,f
  3906  070F  2EED               	goto	l10594
  3907  0710                     l10606:	
  3908  0710  082B               	movf	___lldiv@quotient+3,w
  3909  0711  00A3               	movwf	?___lldiv+3
  3910  0712  082A               	movf	___lldiv@quotient+2,w
  3911  0713  00A2               	movwf	?___lldiv+2
  3912  0714  0829               	movf	___lldiv@quotient+1,w
  3913  0715  00A1               	movwf	?___lldiv+1
  3914  0716  0828               	movf	___lldiv@quotient,w
  3915  0717  00A0               	movwf	?___lldiv
  3916  0718  0008               	return
  3917  0719                     __end_of___lldiv:	
  3918  0719                     __ptext530:	
  3919 ;; =============== function ___lldiv ends ============
  3920                           
  3921                           
  3922 ;; *************** function ___lmul *****************
  3923 ;; Defined at:
  3924 ;;		line 3 in file "d:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lmul.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3927 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  product         4    8[BANK0 ] unsigned long 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  4    0[BANK0 ] unsigned long 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 1F/0
  3936 ;;		On exit  : 1F/0
  3937 ;;		Unchanged: FFFE0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3939 ;;      Params:         0       8       0       0       0       0
  3940 ;;      Locals:         0       4       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0       0
  3942 ;;      Totals:         0      12       0       0       0       0
  3943 ;;Total ram usage:       12 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    2
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_sendHAHA
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952  0719                     ___lmul:	
  3953                           
  3954                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3955  0719  01A8               	clrf	___lmul@product
  3956  071A  01A9               	clrf	___lmul@product+1
  3957  071B  01AA               	clrf	___lmul@product+2
  3958  071C  01AB               	clrf	___lmul@product+3
  3959  071D                     l7349:	
  3960  071D  1C20               	btfss	___lmul@multiplier,0
  3961  071E  2F27               	goto	l10576
  3962  071F  0824               	movf	___lmul@multiplicand,w
  3963  0720  07A8               	addwf	___lmul@product,f
  3964  0721  0825               	movf	___lmul@multiplicand+1,w
  3965  0722  3DA9               	addwfc	___lmul@product+1,f
  3966  0723  0826               	movf	___lmul@multiplicand+2,w
  3967  0724  3DAA               	addwfc	___lmul@product+2,f
  3968  0725  0827               	movf	___lmul@multiplicand+3,w
  3969  0726  3DAB               	addwfc	___lmul@product+3,f
  3970  0727                     l10576:	
  3971  0727  35A4               	lslf	___lmul@multiplicand,f
  3972  0728  0DA5               	rlf	___lmul@multiplicand+1,f
  3973  0729  0DA6               	rlf	___lmul@multiplicand+2,f
  3974  072A  0DA7               	rlf	___lmul@multiplicand+3,f
  3975  072B  36A3               	lsrf	___lmul@multiplier+3,f
  3976  072C  0CA2               	rrf	___lmul@multiplier+2,f
  3977  072D  0CA1               	rrf	___lmul@multiplier+1,f
  3978  072E  0CA0               	rrf	___lmul@multiplier,f
  3979  072F  0823               	movf	___lmul@multiplier+3,w
  3980  0730  0422               	iorwf	___lmul@multiplier+2,w
  3981  0731  0421               	iorwf	___lmul@multiplier+1,w
  3982  0732  0420               	iorwf	___lmul@multiplier,w
  3983  0733  1D03               	skipz
  3984  0734  2F1D               	goto	l7349
  3985  0735  082B               	movf	___lmul@product+3,w
  3986  0736  00A3               	movwf	?___lmul+3
  3987  0737  082A               	movf	___lmul@product+2,w
  3988  0738  00A2               	movwf	?___lmul+2
  3989  0739  0829               	movf	___lmul@product+1,w
  3990  073A  00A1               	movwf	?___lmul+1
  3991  073B  0828               	movf	___lmul@product,w
  3992  073C  00A0               	movwf	?___lmul
  3993  073D  0008               	return
  3994  073E                     __end_of___lmul:	
  3995  073E                     __ptext533:	
  3996 ;; =============== function _ModbusCalcCRC ends ============
  3997                           
  3998                           
  3999 ;; *************** function _rs485_send_data *****************
  4000 ;; Defined at:
  4001 ;;		line 20 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;		None
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;		None
  4006 ;; Return value:  Size  Location     Type
  4007 ;;		None               void
  4008 ;; Registers used:
  4009 ;;		None
  4010 ;; Tracked objects:
  4011 ;;		On entry : 1F/0
  4012 ;;		On exit  : 1F/1
  4013 ;;		Unchanged: FFFE0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4015 ;;      Params:         0       0       0       0       0       0
  4016 ;;      Locals:         0       0       0       0       0       0
  4017 ;;      Temps:          0       0       0       0       0       0
  4018 ;;      Totals:         0       0       0       0       0       0
  4019 ;;Total ram usage:        0 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    2
  4022 ;; This function calls:
  4023 ;;		Nothing
  4024 ;; This function is called by:
  4025 ;;		_sendHAHA
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028  073E                     _rs485_send_data:	
  4029  073E                     l10554:	
  4030                           ; Regs used in _rs485_send_data: []
  4031                           
  4032                           
  4033                           ;modbus.c: 21: RA7 = 1;
  4034  073E  178C               	bsf	12,7
  4035                           
  4036                           ;modbus.c: 22: TXEN=1;
  4037  073F  0023               	movlb	3	; select bank3
  4038  0740  169E               	bsf	30,5
  4039                           
  4040                           ;modbus.c: 23: TXIE = 1;
  4041  0741  0021               	movlb	1	; select bank1
  4042  0742  1611               	bsf	17,4
  4043  0743  0008               	return
  4044  0744                     __end_of_rs485_send_data:	
  4045  0744                     PL2:	
  4046  0744  00BF               	movwf	sendHAHA@cal_temp	;volatile
  4047  0745  0835               	movf	sendHAHA@idx,w
  4048  0746  3EA0               	addlw	_tx_data& (0+255)
  4049  0747  0086               	movwf	6
  4050  0748  0187               	clrf	7
  4051  0749  0842               	movf	sendHAHA@cal_temp+3,w	;volatile
  4052  074A  0081               	movwf	1
  4053  074B  0AB5               	incf	sendHAHA@idx,f
  4054  074C  1903               	skipnz
  4055  074D  0AB6               	incf	sendHAHA@idx+1,f
  4056  074E  0835               	movf	sendHAHA@idx,w
  4057  074F  3EA0               	addlw	_tx_data& (0+255)
  4058  0750  0086               	movwf	6
  4059  0751  0841               	movf	sendHAHA@cal_temp+2,w	;volatile
  4060  0752  0081               	movwf	1
  4061  0753  0AB5               	incf	sendHAHA@idx,f
  4062  0754  1903               	skipnz
  4063  0755  0AB6               	incf	sendHAHA@idx+1,f
  4064  0756  0835               	movf	sendHAHA@idx,w
  4065  0757  3EA0               	addlw	_tx_data& (0+255)
  4066  0758  0086               	movwf	6
  4067  0759  0840               	movf	sendHAHA@cal_temp+1,w	;volatile
  4068  075A  0081               	movwf	1
  4069  075B  0AB5               	incf	sendHAHA@idx,f
  4070  075C  1903               	skipnz
  4071  075D  0AB6               	incf	sendHAHA@idx+1,f
  4072  075E  0835               	movf	sendHAHA@idx,w
  4073  075F  3EA0               	addlw	_tx_data& (0+255)
  4074  0760  0086               	movwf	6
  4075  0761  083F               	movf	sendHAHA@cal_temp,w	;volatile
  4076  0762  0081               	movwf	1
  4077  0763  0AB5               	incf	sendHAHA@idx,f
  4078  0764  0008               	return
  4079  0765                     PL4:	
  4080  0765  1803               	skipnc
  4081  0766  3022               	movlw	34
  4082  0767  0087               	movwf	7
  4083  0768  0801               	movf	1,w
  4084  0769  00B1               	movwf	sendHAHA@cal_temp3	;volatile
  4085  076A  01B2               	clrf	sendHAHA@cal_temp3+1	;volatile
  4086  076B  01B3               	clrf	sendHAHA@cal_temp3+2	;volatile
  4087  076C  01B4               	clrf	sendHAHA@cal_temp3+3	;volatile
  4088  076D  0838               	movf	sendHAHA@cal_temp1+1,w	;volatile
  4089  076E  00C2               	movwf	sendHAHA@cal_temp+3	;volatile
  4090  076F  0837               	movf	sendHAHA@cal_temp1,w	;volatile
  4091  0770  00C1               	movwf	sendHAHA@cal_temp+2	;volatile
  4092  0771  01BF               	clrf	sendHAHA@cal_temp	;volatile
  4093  0772  01C0               	clrf	sendHAHA@cal_temp+1	;volatile
  4094  0773  083B               	movf	sendHAHA@cal_temp2,w	;volatile
  4095  0774  00AD               	movwf	??_sendHAHA
  4096  0775  083C               	movf	sendHAHA@cal_temp2+1,w	;volatile
  4097  0776  00AE               	movwf	??_sendHAHA+1
  4098  0777  083D               	movf	sendHAHA@cal_temp2+2,w	;volatile
  4099  0778  00AF               	movwf	??_sendHAHA+2
  4100  0779  083E               	movf	sendHAHA@cal_temp2+3,w	;volatile
  4101  077A  00B0               	movwf	??_sendHAHA+3
  4102  077B  082F               	movf	??_sendHAHA+2,w
  4103  077C  00B0               	movwf	??_sendHAHA+3
  4104  077D  082E               	movf	??_sendHAHA+1,w
  4105  077E  00AF               	movwf	??_sendHAHA+2
  4106  077F  082D               	movf	??_sendHAHA,w
  4107  0780  00AE               	movwf	??_sendHAHA+1
  4108  0781  01AD               	clrf	??_sendHAHA
  4109  0782  082D               	movf	??_sendHAHA,w
  4110  0783  04BF               	iorwf	sendHAHA@cal_temp,f	;volatile
  4111  0784  082E               	movf	??_sendHAHA+1,w
  4112  0785  04C0               	iorwf	sendHAHA@cal_temp+1,f	;volatile
  4113  0786  082F               	movf	??_sendHAHA+2,w
  4114  0787  04C1               	iorwf	sendHAHA@cal_temp+2,f	;volatile
  4115  0788  0830               	movf	??_sendHAHA+3,w
  4116  0789  04C2               	iorwf	sendHAHA@cal_temp+3,f	;volatile
  4117  078A  0831               	movf	sendHAHA@cal_temp3,w	;volatile
  4118  078B  04BF               	iorwf	sendHAHA@cal_temp,f	;volatile
  4119  078C  0832               	movf	sendHAHA@cal_temp3+1,w	;volatile
  4120  078D  04C0               	iorwf	sendHAHA@cal_temp+1,f	;volatile
  4121  078E  0833               	movf	sendHAHA@cal_temp3+2,w	;volatile
  4122  078F  04C1               	iorwf	sendHAHA@cal_temp+2,f	;volatile
  4123  0790  0834               	movf	sendHAHA@cal_temp3+3,w	;volatile
  4124  0791  04C2               	iorwf	sendHAHA@cal_temp+3,f	;volatile
  4125  0792  0008               	return
  4126  0793                     PL6:	
  4127  0793  0823               	movf	?___lldiv+3,w
  4128  0794  00C2               	movwf	sendHAHA@cal_temp+3	;volatile
  4129  0795  0822               	movf	?___lldiv+2,w
  4130  0796  00C1               	movwf	sendHAHA@cal_temp+2	;volatile
  4131  0797  0821               	movf	?___lldiv+1,w
  4132  0798  00C0               	movwf	sendHAHA@cal_temp+1	;volatile
  4133  0799  0820               	movf	?___lldiv,w
  4134  079A  0008               	return
  4135  079B                     PL7:	
  4136  079B  1903               	skipnz
  4137  079C  0AB6               	incf	sendHAHA@idx+1,f
  4138  079D  0835               	movf	sendHAHA@idx,w
  4139  079E  3EA0               	addlw	_tx_data& (0+255)
  4140  079F  0086               	movwf	6
  4141  07A0  0008               	return
  4142  07A1                     PL10:	
  4143  07A1  3E0E               	addlw	14
  4144  07A2  0086               	movwf	6
  4145  07A3  3021               	movlw	33
  4146  07A4  1803               	skipnc
  4147  07A5  3022               	movlw	34
  4148  07A6  0087               	movwf	7
  4149  07A7  0801               	movf	1,w
  4150  07A8  00B7               	movwf	sendHAHA@cal_temp1	;volatile
  4151  07A9  01B8               	clrf	sendHAHA@cal_temp1+1	;volatile
  4152  07AA  01B9               	clrf	sendHAHA@cal_temp1+2	;volatile
  4153  07AB  01BA               	clrf	sendHAHA@cal_temp1+3	;volatile
  4154  07AC  0008               	return
  4155  07AD                     PL11:	
  4156  07AD  0823               	movf	?___lmul+3,w
  4157  07AE  00C2               	movwf	sendHAHA@cal_temp+3	;volatile
  4158  07AF  0822               	movf	?___lmul+2,w
  4159  07B0  00C1               	movwf	sendHAHA@cal_temp+2	;volatile
  4160  07B1  0821               	movf	?___lmul+1,w
  4161  07B2  00C0               	movwf	sendHAHA@cal_temp+1	;volatile
  4162  07B3  0820               	movf	?___lmul,w
  4163  07B4  0008               	return
  4164  07B5                     PL12:	
  4165  07B5  0801               	movf	1,w
  4166  07B6  00BB               	movwf	sendHAHA@cal_temp2	;volatile
  4167  07B7  01BC               	clrf	sendHAHA@cal_temp2+1	;volatile
  4168  07B8  01BD               	clrf	sendHAHA@cal_temp2+2	;volatile
  4169  07B9  01BE               	clrf	sendHAHA@cal_temp2+3	;volatile
  4170  07BA  0839               	movf	sendHAHA@cal_temp1+2,w	;volatile
  4171  07BB  00C2               	movwf	sendHAHA@cal_temp+3	;volatile
  4172  07BC  0838               	movf	sendHAHA@cal_temp1+1,w	;volatile
  4173  07BD  00C1               	movwf	sendHAHA@cal_temp+2	;volatile
  4174  07BE  0837               	movf	sendHAHA@cal_temp1,w	;volatile
  4175  07BF  00C0               	movwf	sendHAHA@cal_temp+1	;volatile
  4176  07C0  01BF               	clrf	sendHAHA@cal_temp	;volatile
  4177  07C1  083B               	movf	sendHAHA@cal_temp2,w	;volatile
  4178  07C2  04BF               	iorwf	sendHAHA@cal_temp,f	;volatile
  4179  07C3  083C               	movf	sendHAHA@cal_temp2+1,w	;volatile
  4180  07C4  04C0               	iorwf	sendHAHA@cal_temp+1,f	;volatile
  4181  07C5  083D               	movf	sendHAHA@cal_temp2+2,w	;volatile
  4182  07C6  04C1               	iorwf	sendHAHA@cal_temp+2,f	;volatile
  4183  07C7  083E               	movf	sendHAHA@cal_temp2+3,w	;volatile
  4184  07C8  04C2               	iorwf	sendHAHA@cal_temp+3,f	;volatile
  4185  07C9  3050               	movlw	80
  4186  07CA  00A0               	movwf	?___lmul
  4187  07CB  01A1               	clrf	?___lmul+1
  4188  07CC  01A2               	clrf	?___lmul+2
  4189  07CD  01A3               	clrf	?___lmul+3
  4190  07CE  0842               	movf	sendHAHA@cal_temp+3,w	;volatile
  4191  07CF  00A7               	movwf	?___lmul+7
  4192  07D0  0841               	movf	sendHAHA@cal_temp+2,w	;volatile
  4193  07D1  00A6               	movwf	?___lmul+6
  4194  07D2  0840               	movf	sendHAHA@cal_temp+1,w	;volatile
  4195  07D3  00A5               	movwf	?___lmul+5
  4196  07D4  083F               	movf	sendHAHA@cal_temp,w	;volatile
  4197  07D5  00A4               	movwf	?___lmul+4
  4198  07D6  0008               	return
  4199  07D7                     PL13:	
  4200  07D7  0086               	movwf	6
  4201  07D8  3021               	movlw	33
  4202  07D9  1803               	skipnc
  4203  07DA  3022               	movlw	34
  4204  07DB  0087               	movwf	7
  4205  07DC  0801               	movf	1,w
  4206  07DD  00BB               	movwf	sendHAHA@cal_temp2	;volatile
  4207  07DE  01BC               	clrf	sendHAHA@cal_temp2+1	;volatile
  4208  07DF  01BD               	clrf	sendHAHA@cal_temp2+2	;volatile
  4209  07E0  01BE               	clrf	sendHAHA@cal_temp2+3	;volatile
  4210  07E1  0008               	return
  4211  07E2                     PL14:	
  4212  07E2  3021               	movlw	33
  4213  07E3  1803               	skipnc
  4214  07E4  3022               	movlw	34
  4215  07E5  0087               	movwf	7
  4216  07E6  0008               	return
  4217  07E7                     PL15:	
  4218  07E7  00A0               	movwf	?___lldiv
  4219  07E8  0842               	movf	sendHAHA@cal_temp+3,w	;volatile
  4220  07E9  00A7               	movwf	?___lldiv+7
  4221  07EA  0841               	movf	sendHAHA@cal_temp+2,w	;volatile
  4222  07EB  00A6               	movwf	?___lldiv+6
  4223  07EC  0840               	movf	sendHAHA@cal_temp+1,w	;volatile
  4224  07ED  00A5               	movwf	?___lldiv+5
  4225  07EE  083F               	movf	sendHAHA@cal_temp,w	;volatile
  4226  07EF  00A4               	movwf	?___lldiv+4
  4227  07F0  0008               	return
  4228  07F1                     PL17:	
  4229  07F1  3006               	movlw	6
  4230  07F2  01A3               	clrf	?___lldiv+3
  4231  07F3  01A2               	clrf	?___lldiv+2
  4232  07F4  00A1               	movwf	?___lldiv+1
  4233  07F5  34C4               	retlw	196
  4234  07F6                     PL18:	
  4235  07F6  3001               	movlw	1
  4236  07F7  01A3               	clrf	?___lldiv+3
  4237  07F8  01A2               	clrf	?___lldiv+2
  4238  07F9  00A1               	movwf	?___lldiv+1
  4239  07FA  3467               	retlw	103
  4240                           
  4241                           	psect	text540
  4242  0FE0                     __ptext540:	
  4243 ;; =============== function _isr ends ============
  4244                           
  4245                           
  4246 ;; *************** function ___lwmod *****************
  4247 ;; Defined at:
  4248 ;;		line 5 in file "d:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwmod.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  divisor         2    0[COMMON] unsigned int 
  4251 ;;  dividend        2    2[COMMON] unsigned int 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  counter         1    4[COMMON] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  2    0[COMMON] unsigned int 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0
  4258 ;; Tracked objects:
  4259 ;;		On entry : 1F/0
  4260 ;;		On exit  : 1F/0
  4261 ;;		Unchanged: FFFE0/0
  4262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4263 ;;      Params:         4       0       0       0       0       0
  4264 ;;      Locals:         1       0       0       0       0       0
  4265 ;;      Temps:          0       0       0       0       0       0
  4266 ;;      Totals:         5       0       0       0       0       0
  4267 ;;Total ram usage:        5 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		_isr
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275  0FE0                     ___lwmod:	
  4276                           
  4277                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4278  0FE0  0877               	movf	___lwmod@divisor+1,w
  4279  0FE1  0476               	iorwf	___lwmod@divisor,w
  4280  0FE2  1903               	skipnz
  4281  0FE3  2FFB               	goto	i1l9704
  4282  0FE4  01FA               	clrf	___lwmod@counter
  4283  0FE5                     L3:	
  4284  0FE5  0AFA               	incf	___lwmod@counter,f
  4285  0FE6  1BF7               	btfsc	___lwmod@divisor+1,7
  4286  0FE7  2FEB               	goto	i1l9696
  4287  0FE8  35F6               	lslf	___lwmod@divisor,f
  4288  0FE9  0DF7               	rlf	___lwmod@divisor+1,f
  4289  0FEA  2FE5               	goto	L3
  4290  0FEB                     i1l9696:	
  4291  0FEB  0877               	movf	___lwmod@divisor+1,w
  4292  0FEC  0279               	subwf	___lwmod@dividend+1,w
  4293  0FED  1D03               	skipz
  4294  0FEE  2FF1               	goto	u87_25
  4295  0FEF  0876               	movf	___lwmod@divisor,w
  4296  0FF0  0278               	subwf	___lwmod@dividend,w
  4297  0FF1                     u87_25:	
  4298  0FF1  1C03               	skipc
  4299  0FF2  2FF7               	goto	i1l9700
  4300  0FF3  0876               	movf	___lwmod@divisor,w
  4301  0FF4  02F8               	subwf	___lwmod@dividend,f
  4302  0FF5  0877               	movf	___lwmod@divisor+1,w
  4303  0FF6  3BF9               	subwfb	___lwmod@dividend+1,f
  4304  0FF7                     i1l9700:	
  4305  0FF7  36F7               	lsrf	___lwmod@divisor+1,f
  4306  0FF8  0CF6               	rrf	___lwmod@divisor,f
  4307  0FF9  0BFA               	decfsz	___lwmod@counter,f
  4308  0FFA  2FEB               	goto	i1l9696
  4309  0FFB                     i1l9704:	
  4310  0FFB  0879               	movf	___lwmod@dividend+1,w
  4311  0FFC  00F7               	movwf	?___lwmod+1
  4312  0FFD  0878               	movf	___lwmod@dividend,w
  4313  0FFE  00F6               	movwf	?___lwmod
  4314  0FFF  0008               	return
  4315  1000                     __end_of___lwmod:	
  4316                           
  4317                           	psect	text541
  4318  0000                     __ptext541:	
  4319 ;; =============== function ___lwmod ends ============
  4320                           
  4321  007E                     btemp	set	126	;btemp
  4322  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Tue Jan 06 21:15:49 2015

            ___bmul@product 0021             _AD7758_SendData 03D0                         _GIE 005F  
                       _CRC 004D                         _RB0 0068                         _RB3 006B  
                       _RA7 0067                         _RX9 0CEE                         _TX9 0CF6  
               _tx_data_num 0075                         _isr 0004                         wreg 0009  
                      l1450 0000                        l1445 0419                        l1462 0000  
                      l1456 0000                        l1465 0000                        l1474 0146  
                      l1476 0185                        l1485 0000                        l1478 01C4  
                      l1479 0000                        l4451 0000                        l4460 0000  
                      l4463 0000                        l2960 0000                        l4448 0000  
                      l2954 0000                        l4474 0000                        l4466 057D  
                      l4468 05B9                        l2957 0502                        l5910 0000  
                      l7271 0000                        l7352 0000                        l5921 0000  
                      ?_isr 0076                        l7349 071D                        l7453 0000  
                      l9630 0000                        l9640 05CE                        l9650 0000  
                      l9642 0000                        l9634 0000                        l9644 0000  
                      l9628 0000                        l9646 0000                        l9654 05C0  
                      l9648 05DA                        _BRGH 0CF2                        _CREN 0CEC  
                      _FERR 0CEA                        u1205 03F8                        u1185 04F4  
                      u1285 06FF                        u1485 05A1                        _PEIE 005E  
                      _RCIE 048D                        _RCIF 008D                        _OERR 0CE9  
                      _SCKP 0CFC                        _TMR0 0015                        _SPEN 0CEF  
                      _TRMT 0CF1                        _TXIE 048C                        _TXEN 0CF5  
                      _TXIF 008C                        _SYNC 0CF4                        _WPUB 020D  
                      _main 0384                        fsr0h 0005                        fsr1h 0007  
                      fsr0l 0004                        indf0 0000                        indf1 0001  
                      fsr1l 0006                        btemp 007E      __end_of_AD7758_GetData 034F  
                      start 0089           __end_of_AD7758_CS 0421     __end_of_rs485_send_data 0744  
         ___bmul@multiplier 0022             AD7758_GetData@i 0029                       ??_isr 007B  
                     l11010 0000                       l11002 0000                       l11020 0191  
                     l11012 0000                       l11030 0000                       l11022 0000  
                     l11006 0152                       l11110 0000                       l11102 0000  
                     l10400 0000                       l11024 0000                       l11016 0000  
                     l11008 0000                       l11032 0000                       l11104 039A  
                     l10410 03EA                       l10402 0000                       l11026 0000  
                     l11050 0000                       l11042 0000                       l11034 0000  
                     l11114 03A7                       l11106 0000                       l10412 0404  
                     l10404 0000                       l10420 0000                       l10500 0000  
                     l11044 0570                       l11036 0000                       l11060 057E  
                     l10414 0000                       l10430 0000                       l10422 0000  
                     l10510 0000                       l10502 0000                       l11038 0000  
                     l11070 05AC                       l11054 0000                       l10408 0401  
                     l10432 0000                       l10424 0000                       l10520 0000  
                     l10512 0000                       l10504 0000                       l10440 0000  
                     l10600 0000                       l11136 05B4                       l11064 0000  
                     l11056 0000                       l10426 0000                       l10418 0000  
                     l10530 0000                       l10522 0000                       l10514 0000  
                     l10506 0000                       l10450 0000                       l10442 0000  
                     l10434 0000                       l10602 070A                       l10610 0000  
                     l11074 05AF                       l11066 0000                       l11090 0000  
                     l11082 0000                       l10428 0000                       l10532 0000  
                     l10524 0000                       l10516 0000                       l10508 0000  
                     l10460 0000                       l10452 0000                       l10444 0000  
                     l10436 0000                       l10540 0000                       l10604 0000  
                     l10620 041B                       l10612 0000                       l10700 0000  
                     l11076 0000                       l11092 038F                       l11084 0000  
                     l10534 0000                       l10526 0000                       l10518 0000  
                     l10470 0000                       l10462 0000                       l10454 0000  
                     l10446 0000                       l10550 0000                       l10542 0000  
                     l10606 0710                       l10614 0000                       l10630 0341  
                     l10622 0000                       l10710 0000                       l10702 0000  
                     l11086 0000                       l10536 0000                       l10528 0000  
                     l10480 0000                       l10472 0000                       l10464 0000  
                     l10456 0000                       l10448 0000                       l10552 0000  
                     l10544 0000                       l10616 0412                       l10624 0000  
                     l10640 03D5                       l10632 0000                       l10800 0000  
                     l10720 0000                       l10712 0000                       l10704 0000  
                     l11096 0393                       l11088 0000                       l10394 04E2  
                     l10538 0000                       l10490 0000                       l10482 0000  
                     l10474 0000                       l10466 0000                       l10458 0000  
                     l10546 0000                       l10554 073E                       l10634 0000  
                     l10810 0000                       l10802 0000                       l10730 0000  
                     l10722 0000                       l10714 0000                       l10706 0000  
                     l10650 0000                       l10642 0000                       l11098 0000  
                     l10492 0000                       l10484 0000                       l10476 0000  
                     l10468 0000                       l10548 0000                       l10564 0000  
                     l10556 0000                       l10572 0000                       l10628 0000  
                     l10900 0000                       l10820 0000                       l10812 0000  
                     l10804 0000                       l10740 0000                       l10732 0000  
                     l10724 0000                       l10716 0000                       l10708 0000  
                     l10660 0000                       l10652 0000                       l10644 0000  
                     l10398 04E6                       l10494 0000                       l10486 0000  
                     l10478 0000                       l10566 0000                       l10558 0333  
                     l10638 0000                       l10910 0000                       l10902 0000  
                     l10830 0000                       l10822 0000                       l10814 0000  
                     l10806 0000                       l10750 0000                       l10742 0000  
                     l10734 0000                       l10726 0000                       l10718 0000  
                     l10670 0000                       l10662 0000                       l10654 0000  
                     l10646 0000                       l10496 0000                       l10488 0000  
                     l10576 0727                       l10584 0000                       l10920 0000  
                     l10912 0000                       l10904 0000                       l10840 0000  
                     l10832 0000                       l10824 0000                       l10816 0000  
                     l10808 0000                       l10760 0000                       l10752 0000  
                     l10744 0000                       l10736 0000                       l10728 0000  
                     l10680 0000                       l10672 0000                       l10664 0000  
                     l10656 0000                       l10648 0000                       l10498 0000  
                     l10578 0000                       l10594 06ED                       l10586 0000  
                     l10922 0000                       l10914 0000                       l10906 0000  
                     l10850 0000                       l10842 0000                       l10834 0000  
                     l10826 0000                       l10818 0000                       l10770 0000  
                     l10762 0000                       l10754 0000                       l10746 0000  
                     l10738 0000                       l10690 0000                       l10682 0000  
                     l10674 0000                       l10666 0000                       l10658 0000  
                     l10930 0000                       l10596 0000                       l10924 0000  
                     l10916 0000                       l10908 0000                       l10860 0000  
                     l10852 0000                       l10844 0000                       l10836 0000  
                     l10828 0000                       l10780 0000                       l10772 0000  
                     l10764 0000                       l10756 0000                       l10748 0000  
                     l10692 0000                       l10684 0000                       l10676 0000  
                     l10668 0000                       l10940 0000                       l10932 0000  
                     l10926 0000                       l10918 0000                       l10870 0000  
                     l10862 0000                       l10854 0000                       l10846 0000  
                     l10838 0000                       l10790 0000                       l10782 0000  
                     l10774 0000                       l10766 0000                       l10758 0000  
                     l10694 0000                       l10686 0000                       l10678 0000  
                     l10950 0000                       l10942 0000                       l10934 0000  
                     l10880 0000                       l10872 0000                       l10864 0000  
                     l10856 0000                       l10848 0000                       l10792 0000  
                     l10784 0000                       l10776 0000                       l10768 0000  
                     l10696 0000                       l10688 0000                       l10944 0000  
                     l10936 0000                       l10928 0000                       l10960 0000  
                     l10952 0000                       l10890 0000                       l10882 0000  
                     l10874 0000                       l10866 0000                       l10858 0000  
                     l10794 0000                       l10786 0000                       l10778 0000  
                     l10698 0000                       l10946 0000                       l10938 0000  
                     l10970 0000                       l10962 0000                       l10954 0000  
                     l10892 0000                       l10884 0000                       l10876 0000  
                     l10868 0000                       l10796 0000                       l10788 0000  
                     l10948 0000                       l10980 0000                       l10972 0000  
                     l10964 0000                       l10956 0000                       l10894 0000  
                     l10886 0000                       l10878 0000                       l10798 0000  
                     l10982 0000                       l10974 0000                       l10958 0000  
                     l10966 00BE                       l10896 0000                       l10888 0000  
                     l10992 0113                       l10984 0100                       l10976 00E0  
                     l10898 0000                       l10994 0000                       l10986 0107  
                     l10996 0000                       l10988 0000                       l10998 0000  
                     ?_main 0076             _tx_timeout_flag 03E3                       _BRG16 0CFB  
           __end_of___lldiv 0719             __end_of___lwmod 1000                       _RCREG 0199  
                     _TMR1H 0017                       _TMR1L 0016                       _PORTA 000C  
                     u87_25 0FF1                       _TXREG 019A                       _Delay 04E2  
       ___lmul@multiplicand 0024               _tx_data_index 0074        Delay@delay_count_max 0020  
          __end_of_SPI_Init 0431              __pbitbssCOMMON 03E0                       wtemp0 007E  
           ?_AD7758_GetData 0026                ?_modbus_main 0076                ?_modbus_init 0076  
              __end_of_main 03A9     __end_of_AD7758_SendData 03E2                  _Initialize 04FE  
                    ??_main 0047                      ?_Delay 0020            sendHAHA@cal_temp 003F  
                    _ADCON1 009E      __size_of_ModbusCalcCRC 0025                      _ANSELA 018C  
                    _ANSELB 018D                      _HFIOFR 04D4               ??_AD7758_init 002A  
                    i1l2981 0085                      i1l2965 001A                      i1l2974 005B  
                    i1l2976 0059                      i1l7297 0000                      i1l9600 0000  
                    i1l9610 0000                      i1l9602 0074                      i1l9700 0FF7  
                    i1l9540 0000                      i1l9702 0000                      i1l9606 0000  
                    i1l9704 0FFB                      i1l9552 0000                      i1l9544 0000  
                    i1l9560 0025                      i1l9564 0000                      i1l9580 0054  
                    i1l9548 0013                      i1l9566 0000                      i1l9558 0000  
                    i1l9592 0000                      i1l9568 0000                      i1l9594 0000  
                    i1l9586 0000                      i1l9596 0000                      i1l9588 0000  
                    i1l9696 0FEB                      i1l9688 0000            ??_Sample_ADE7758 002A  
                    _OSCCON 0099                      _TMR1GE 00CF                      _TMR0IE 005D  
                    _TMR0IF 005A                      _TMR1IE 0488                      _TMR1IF 0088  
                    _SPBRGH 019C                      _TMR1ON 00C0                      _SPBRGL 019B  
                    _SSP1IF 008B                      _TRISA0 0460                      _TRISA1 0461  
                    _TRISB0 0468                      _TRISA2 0462                      _TRISB1 0469  
                    _TRISA3 0463                      _TRISB2 046A                      _TRISA4 0464  
                    _TRISB3 046B                      _TRISB4 046C                      _TRISA6 0466  
                    _TRISB5 046D                      _TRISA7 0467                      _TRISB6 046E  
                    _TRISB7 046F                      _SSPBUF 0211           Sample_ADE7758@sum 003E  
          ?_rs485_send_data 0076                      ___bmul 0331                      ___lmul 0719  
                 ??___lldiv 0028                   ??___lwmod 007A                ?_spiSendByte 0076  
          __end_of_sendHAHA 06DA                      clrloop 0FD5           _AD7758_check_init 0554  
           AD7758_init@chip 002A          ?_AD7758_check_init 0076               AD7758_CS@chip 0029  
          AD7758_SendData@i 0029                 sendHAHA@idx 0035         ??_AD7758_check_init 002A  
       __end_of_AD7758_init 03D0         ___bmul@multiplicand 0020               __end_of_Delay 04FE  
             _AbnorProcFlag 03E0              __pcstackCOMMON 0076               _ModbusCalcCRC 05BC  
          ?_AD7758_SendData 0026                 ?_Initialize 0076                   ?_SPI_Init 0076  
         AD7758_GetData@num 0026   __end_of_AD7758_check_init 0576                     ??_Delay 0024  
                __pbssBANK0 0047                  __pbssBANK1 00A0                  __pbssBANK2 0120  
                __pmaintext 0384              ?_ModbusCalcCRC 0020                     ?___bmul 0020  
                   ?___lmul 0020           sendHAHA@cal_temp1 0037           sendHAHA@cal_temp2 003B  
         sendHAHA@cal_temp3 0031        AD7758_check_init@ret 002A                  __pintentry 0004  
                 _AD7758_CS 040A        __size_of_modbus_main 0046        __size_of_modbus_init 000A  
            ___lmul@product 0028                  ??_SPI_Init 0020                 _Sample_flag 03E1  
                   _SDO1SEL 08EE                     _SSP1ADD 0212                     _RXDTSEL 08EF  
                   _TXCKSEL 08F0            ??_AD7758_GetData 0028            modbus@rx_timeout 0052  
               _AD7758_init 03A9          Sample_ADE7758@chip 0040         __size_of_Initialize 0056  
                 ?_sendHAHA 0076             __size_of___bmul 000C             __size_of___lmul 0025  
                   ___lldiv 06DA                  ?_AD7758_CS 0028                     ___lwmod 0FE0  
                   _address 0051        __size_of_spiSendByte 0028                   _T1CONbits 0018  
               _ADE7758Data 210E                __size_of_isr 0085  __size_of_AD7758_check_init 0022  
                   _rx_data 0120                     _tx_data 00A0        end_of_initialization 0382  
                   isr@data 007B                  ??_sendHAHA 002D             ??_ModbusCalcCRC 0023  
           ___lldiv@divisor 0020             ___lldiv@counter 002C                  _rx_timeout 0073  
               ??_AD7758_CS 0029              __end_of___bmul 033D              __end_of___lmul 073E  
              ??_Initialize 0020    __size_of_rs485_send_data 0006                   _FreqPhase 004F  
         __size_of_SPI_Init 0010         start_initialization 034F          AD7758_GetData@addr 0028  
        AD7758_GetData@chip 0027            Delay@delay_count 0024                 __end_of_isr 0089  
        __end_of_Initialize 0554                    ??___bmul 0021                    ??___lmul 0028  
   __size_of_Sample_ADE7758 02A5                   _gs50msCnt 0070              ModbusCalcCRC@j 0025  
               __pbssBIGRAM 210E    __size_of_AD7758_SendData 0012                 __pbssCOMMON 0070  
             __pcstackBANK0 0020         spiSendByte@spi_data 0020                ?_AD7758_init 0076  
         __size_of_sendHAHA 00F9               ??_modbus_main 0043               ??_modbus_init 0020  
                 __ptext521 0576                   __ptext530 0719                   __ptext522 0554  
                 __ptext531 0331                   __ptext523 008C                   __ptext540 0FE0  
                 __ptext532 05BC                   __ptext524 03A9                   __ptext541 0000  
                 __ptext533 073E                   __ptext525 05E1                   __ptext534 0431  
                 __ptext526 03D0                   __ptext535 04FE                   __ptext527 033D  
                 __ptext536 0421                   __ptext528 040A                   __ptext537 03E2  
                 __ptext529 06DA                   __ptext538 04E2                    ?___lldiv 0020  
                  ?___lwmod 0076       AD7758_check_init@chip 002B       ModbusCalcCRC@LenFrame 0022  
            __size_of_Delay 001C           ??_rs485_send_data 0020               ??_spiSendByte 0020  
                  _SPI_Init 0421         __end_of_modbus_main 05BC         __end_of_modbus_init 043B  
         ___lmul@multiplier 0020           ??_AD7758_SendData 0028                    _ReadData 0047  
                  _SendData 004A       __end_of_ModbusCalcCRC 05E1     __size_of_AD7758_GetData 0012  
            _Sample_ADE7758 008C            __size_of___lldiv 003F            __size_of___lwmod 0020  
        spiSendByte@spi_tmp 0025         __end_of_spiSendByte 040A               spiSendByte@cc 0021  
              _SSP1CON1bits 0215                _SSP2CON1bits 021D        ModbusCalcCRC@CntByte 0024  
             __size_of_main 0025        __size_of_AD7758_init 0027                    _sendHAHA 05E1  
                  clear_ram 0FD4             _rx_data_counter 0072      __end_of_Sample_ADE7758 0331  
               _modbus_main 0576                 _modbus_init 0431                _SSP2STATbits 021C  
       modbus_main@CRC_Temp 0043                    intlevel1 0000         modbus_main@REG_Temp 0045  
          ___lwmod@dividend 0078            ___lldiv@dividend 0024             ?_Sample_ADE7758 0076  
       ModbusCalcCRC@bitVal 0023                 _spiSendByte 03E2             _rs485_send_data 073E  
                _OPTION_REG 0095            ___lldiv@quotient 0028             ___lwmod@divisor 0076  
        ModbusCalcCRC@Frame 0020          __size_of_AD7758_CS 0017             ___lwmod@counter 007A  
                _WDTCONbits 0097         AD7758_SendData@addr 0028         AD7758_SendData@chip 0027  
           AD7758_CS@enable 0028                _rx_data_flag 03E2          AD7758_SendData@num 0026  
            _AD7758_GetData 033D  
