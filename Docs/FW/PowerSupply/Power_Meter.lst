

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Mon Dec 08 15:54:53 2014

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	intentry,global,class=CODE,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	text523,local,class=CODE,delta=2
    15                           	psect	text540,local,class=CODE,delta=2
    16                           	psect	text541,local,class=CODE,delta=2
    17                           	psect	pa_nodes,global,class=CODE,delta=2
    18                           	dabs	1,0x220,48
    19                           	dabs	1,0x1BE,50
    20                           	dabs	1,0x7E,2
    21  000A                     	;#
    22                           
    23                           	psect	config
    24  8007  D9A4               	dw	55716	;_ADE7758Data
    25                           
    26                           	psect	intentry
    27  0004                     __pintentry:	
    28  000C                     _PORTA	set	12
    29  0018                     _T1CONbits	set	24
    30  0015                     _TMR0	set	21
    31  0017                     _TMR1H	set	23
    32  0016                     _TMR1L	set	22
    33  005F                     _GIE	set	95
    34  005E                     _PEIE	set	94
    35  0067                     _RA7	set	103
    36  0068                     _RB0	set	104
    37  006B                     _RB3	set	107
    38  008D                     _RCIF	set	141
    39  008B                     _SSP1IF	set	139
    40  005D                     _TMR0IE	set	93
    41  005A                     _TMR0IF	set	90
    42  00CF                     _TMR1GE	set	207
    43  0088                     _TMR1IF	set	136
    44  00C0                     _TMR1ON	set	192
    45  008C                     _TXIF	set	140
    46  009E                     _ADCON1	set	158
    47  0095                     _OPTION_REG	set	149
    48  0099                     _OSCCON	set	153
    49  0097                     _WDTCONbits	set	151
    50  04D4                     _HFIOFR	set	1236
    51  048D                     _RCIE	set	1165
    52  0488                     _TMR1IE	set	1160
    53  0460                     _TRISA0	set	1120
    54  0461                     _TRISA1	set	1121
    55  0462                     _TRISA2	set	1122
    56  0463                     _TRISA3	set	1123
    57  0464                     _TRISA4	set	1124
    58  0466                     _TRISA6	set	1126
    59  0467                     _TRISA7	set	1127
    60  0468                     _TRISB0	set	1128
    61  0469                     _TRISB1	set	1129
    62  046A                     _TRISB2	set	1130
    63  046B                     _TRISB3	set	1131
    64  046C                     _TRISB4	set	1132
    65  046D                     _TRISB5	set	1133
    66  046E                     _TRISB6	set	1134
    67  046F                     _TRISB7	set	1135
    68  048C                     _TXIE	set	1164
    69  08EF                     _RXDTSEL	set	2287
    70  08EE                     _SDO1SEL	set	2286
    71  08F0                     _TXCKSEL	set	2288
    72  018C                     _ANSELA	set	396
    73  018D                     _ANSELB	set	397
    74  0199                     _RCREG	set	409
    75  019C                     _SPBRGH	set	412
    76  019B                     _SPBRGL	set	411
    77  019A                     _TXREG	set	410
    78  0CFB                     _BRG16	set	3323
    79  0CF2                     _BRGH	set	3314
    80  0CEC                     _CREN	set	3308
    81  0CEA                     _FERR	set	3306
    82  0CE9                     _OERR	set	3305
    83  0CEE                     _RX9	set	3310
    84  0CFC                     _SCKP	set	3324
    85  0CEF                     _SPEN	set	3311
    86  0CF4                     _SYNC	set	3316
    87  0CF1                     _TRMT	set	3313
    88  0CF6                     _TX9	set	3318
    89  0CF5                     _TXEN	set	3317
    90  0212                     _SSP1ADD	set	530
    91  0215                     _SSP1CON1bits	set	533
    92  021D                     _SSP2CON1bits	set	541
    93  021C                     _SSP2STATbits	set	540
    94  0211                     _SSPBUF	set	529
    95  020D                     _WPUB	set	525
    96                           
    97 ;; =============== function _Delay ends ============
    98 ;; *************** function _isr *****************
    99 ;; Defined at:
   100 ;;		line 132 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\main.c"
   101 ;; Parameters:    Size  Location     Type
   102 ;;		None
   103 ;; Auto vars:     Size  Location     Type
   104 ;;  data            1    5[COMMON] unsigned char 
   105 ;; Return value:  Size  Location     Type
   106 ;;		None               void
   107 ;; Registers used:
   108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   109 ;; Tracked objects:
   110 ;;		On entry : 0/0
   111 ;;		On exit  : 1C/0
   112 ;;		Unchanged: FFFE0/0
   113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   114 ;;      Params:         0       0       0       0       0       0
   115 ;;      Locals:         1       0       0       0       0       0
   116 ;;      Temps:          0       0       0       0       0       0
   117 ;;      Totals:         1       0       0       0       0       0
   118 ;;Total ram usage:        1 bytes
   119 ;; Hardware stack levels used:    1
   120 ;; Hardware stack levels required when called:    1
   121 ;; This function calls:
   122 ;;		___lwmod
   123 ;; This function is called by:
   124 ;;		Interrupt level 1
   125 ;; This function uses a non-reentrant model
   126 ;;
   127  0004                     _isr:	
   128                           
   129                           ; Regs used in _isr: [wreg+fsr1l-status,0+pclath+cstack]
   130  0004  3180               	pagesel	$
   131                           
   132                           ;main.c: 136: if(TMR1IF==1)
   133  0005  0020               	movlb	0	; select bank0
   134  0006  1C11               	btfss	17,0
   135  0007  2825               	goto	i1l9558
   136  0008  30FF               	movlw	255
   137                           
   138                           ;main.c: 137: {
   139                           ;main.c: 139: TMR1IF=0;
   140  0009  1011               	bcf	17,0
   141                           
   142                           ;main.c: 140: TMR1H=0xff;
   143  000A  0097               	movwf	23	;volatile
   144                           
   145                           ;main.c: 141: TMR1L=0xc1;
   146  000B  30C1               	movlw	193
   147  000C  0096               	movwf	22	;volatile
   148                           
   149                           ;main.c: 143: if(rx_timeout < 6)
   150  000D  3006               	movlw	6
   151  000E  0273               	subwf	_rx_timeout,w	;volatile
   152  000F  1803               	skipnc
   153  0010  2813               	goto	i1l9546
   154                           
   155                           ;main.c: 144: {
   156                           ;main.c: 146: rx_timeout ++;
   157  0011  0AF3               	incf	_rx_timeout,f	;volatile
   158                           
   159                           ;main.c: 147: }
   160  0012  281A               	goto	i1l2965
   161  0013                     i1l9546:	
   162                           
   163                           ;main.c: 148: else if(rx_timeout == 6)
   164  0013  0873               	movf	_rx_timeout,w	;volatile
   165  0014  3A06               	xorlw	6
   166  0015  1D03               	skipz
   167  0016  281A               	goto	i1l2965
   168                           
   169                           ;main.c: 149: {
   170                           ;main.c: 151: rx_timeout = 11;
   171  0017  300B               	movlw	11
   172  0018  00F3               	movwf	_rx_timeout	;volatile
   173                           
   174                           ;main.c: 152: rx_data_flag = 1;
   175  0019  157C               	bsf	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
   176  001A                     i1l2965:	
   177                           ;main.c: 153: }
   178                           
   179                           
   180                           ;main.c: 157: }
   181                           ;main.c: 159: if(tx_timeout_flag == 1)
   182  001A  1DFC               	btfss	_tx_timeout_flag/(0+8),_tx_timeout_flag& (0+7)
   183  001B  2825               	goto	i1l9558
   184                           
   185                           ;main.c: 160: {
   186                           ;main.c: 161: if(TRMT == 1)
   187  001C  0023               	movlb	3	; select bank3
   188  001D  1C9E               	btfss	30,1
   189  001E  2825               	goto	i1l9558
   190                           
   191                           ;main.c: 162: {
   192                           ;main.c: 163: tx_timeout_flag = 0;
   193  001F  11FC               	bcf	_tx_timeout_flag/(0+8),_tx_timeout_flag& (0+7)
   194                           
   195                           ;main.c: 164: TXEN=0;
   196  0020  129E               	bcf	30,5
   197                           
   198                           ;main.c: 165: RA7 = 0;
   199  0021  0020               	movlb	0	; select bank0
   200  0022  138C               	bcf	12,7
   201                           
   202                           ;main.c: 166: tx_data_index = 0;
   203  0023  01F4               	clrf	_tx_data_index	;volatile
   204                           
   205                           ;main.c: 167: tx_data_num = 0;
   206  0024  01F5               	clrf	_tx_data_num	;volatile
   207  0025                     i1l9558:	
   208                           
   209                           ;main.c: 168: }
   210                           ;main.c: 169: }
   211                           ;main.c: 170: }
   212                           ;main.c: 172: if(TMR0IF)
   213  0025  1D0B               	btfss	11,2
   214  0026  2854               	goto	i1l9578
   215                           
   216                           ;main.c: 173: {
   217                           ;main.c: 174: TMR0 = 61;
   218  0027  303D               	movlw	61
   219  0028  0020               	movlb	0	; select bank0
   220  0029  0095               	movwf	21	;volatile
   221                           
   222                           ;main.c: 175: TMR0IF = 0;
   223  002A  110B               	bcf	11,2
   224                           
   225                           ;main.c: 176: gs50msCnt++;
   226  002B  0AF0               	incf	_gs50msCnt,f
   227  002C  1903               	skipnz
   228  002D  0AF1               	incf	_gs50msCnt+1,f
   229                           
   230                           ;main.c: 177: if (gs50msCnt%20 == 0)
   231  002E  3014               	movlw	20
   232  002F  00F6               	movwf	?___lwmod
   233  0030  01F7               	clrf	?___lwmod+1
   234  0031  0871               	movf	_gs50msCnt+1,w
   235  0032  00F9               	movwf	?___lwmod+3
   236  0033  0870               	movf	_gs50msCnt,w
   237  0034  00F8               	movwf	?___lwmod+2
   238  0035  318F  27E0  3180   	fcall	___lwmod
   239  0038  0877               	movf	?___lwmod+1,w
   240  0039  0476               	iorwf	?___lwmod,w
   241  003A  1903               	btfsc	3,2
   242                           
   243                           ;main.c: 178: {
   244                           ;main.c: 179: Sample_flag = 1;
   245  003B  14FC               	bsf	_Sample_flag/(0+8),_Sample_flag& (0+7)
   246                           
   247                           ;main.c: 180: }
   248                           ;main.c: 181: if (gs50msCnt%3600 == 0)
   249  003C  3010               	movlw	16
   250  003D  00F6               	movwf	?___lwmod
   251  003E  300E               	movlw	14
   252  003F  00F7               	movwf	?___lwmod+1
   253  0040  0871               	movf	_gs50msCnt+1,w
   254  0041  00F9               	movwf	?___lwmod+3
   255  0042  0870               	movf	_gs50msCnt,w
   256  0043  00F8               	movwf	?___lwmod+2
   257  0044  318F  27E0  3180   	fcall	___lwmod
   258  0047  0877               	movf	?___lwmod+1,w
   259  0048  0476               	iorwf	?___lwmod,w
   260  0049  1903               	btfsc	3,2
   261                           
   262                           ;main.c: 182: {
   263                           ;main.c: 183: AbnorProcFlag = 1;
   264  004A  147C               	bsf	_AbnorProcFlag/(0+8),_AbnorProcFlag& (0+7)
   265                           
   266                           ;main.c: 184: }
   267                           ;main.c: 186: if (gs50msCnt >= 3600)
   268  004B  300E               	movlw	14
   269  004C  0271               	subwf	_gs50msCnt+1,w
   270  004D  3010               	movlw	16
   271  004E  1903               	skipnz
   272  004F  0270               	subwf	_gs50msCnt,w
   273  0050  1C03               	skipc
   274  0051  2854               	goto	i1l9578
   275                           
   276                           ;main.c: 187: {
   277                           ;main.c: 188: gs50msCnt = 0;
   278  0052  01F0               	clrf	_gs50msCnt
   279  0053  01F1               	clrf	_gs50msCnt+1
   280  0054                     i1l9578:	
   281                           
   282                           ;main.c: 189: }
   283                           ;main.c: 190: }
   284                           ;main.c: 192: if ( OERR || FERR )
   285  0054  0023               	movlb	3	; select bank3
   286  0055  189D               	btfsc	29,1
   287  0056  2859               	goto	i1l2976
   288  0057  1D1D               	btfss	29,2
   289  0058  285B               	goto	i1l2974
   290  0059                     i1l2976:	
   291                           
   292                           ;main.c: 193: {
   293                           ;main.c: 194: CREN = 0 ;
   294  0059  121D               	bcf	29,4
   295                           
   296                           ;main.c: 195: CREN = 1;
   297  005A  161D               	bsf	29,4
   298  005B                     i1l2974:	
   299                           
   300                           ;main.c: 196: }
   301                           ;main.c: 199: if(RCIF)
   302  005B  0020               	movlb	0	; select bank0
   303  005C  1E91               	btfss	17,5
   304  005D  2874               	goto	i1l9600
   305                           
   306                           ;main.c: 200: {
   307                           ;main.c: 201: RCIF = 0;
   308  005E  1291               	bcf	17,5
   309                           
   310                           ;main.c: 202: unsigned char data = RCREG;
   311  005F  0023               	movlb	3	; select bank3
   312  0060  0819               	movf	25,w	;volatile
   313  0061  00FB               	movwf	isr@data
   314                           
   315                           ;main.c: 204: if(rx_data_flag == 0)
   316  0062  197C               	btfsc	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
   317  0063  2874               	goto	i1l9600
   318                           
   319                           ;main.c: 205: {
   320                           ;main.c: 207: rx_timeout = 0;
   321  0064  01F3               	clrf	_rx_timeout	;volatile
   322                           
   323                           ;main.c: 208: rx_data[rx_data_counter] = data;
   324  0065  0872               	movf	_rx_data_counter,w
   325  0066  3E20               	addlw	_rx_data& (0+255)
   326  0067  0086               	movwf	6
   327  0068  3001               	movlw	1	; select bank2/3
   328  0069  0087               	movwf	7
   329  006A  087B               	movf	isr@data,w
   330  006B  0081               	movwf	1
   331                           
   332                           ;main.c: 209: rx_data_counter++;
   333  006C  0AF2               	incf	_rx_data_counter,f	;volatile
   334                           
   335                           ;main.c: 211: if(rx_data_counter == 64)
   336  006D  0872               	movf	_rx_data_counter,w	;volatile
   337  006E  3A40               	xorlw	64
   338  006F  1D03               	skipz
   339  0070  2874               	goto	i1l9600
   340  0071  300B               	movlw	11
   341                           
   342                           ;main.c: 212: {
   343                           ;main.c: 213: rx_data_flag = 1;
   344  0072  157C               	bsf	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
   345                           
   346                           ;main.c: 214: rx_timeout = 11;
   347  0073  00F3               	movwf	_rx_timeout	;volatile
   348  0074                     i1l9600:	
   349                           
   350                           ;main.c: 215: }
   351                           ;main.c: 216: }
   352                           ;main.c: 217: }
   353                           ;main.c: 218: if(TXIF)
   354  0074  0020               	movlb	0	; select bank0
   355  0075  1E11               	btfss	17,4
   356  0076  0009               	retfie
   357                           
   358                           ;main.c: 219: {
   359                           ;main.c: 220: TXIF = 0;
   360  0077  1211               	bcf	17,4
   361                           
   362                           ;main.c: 221: if(tx_data_index < tx_data_num)
   363  0078  0875               	movf	_tx_data_num,w	;volatile
   364  0079  0274               	subwf	_tx_data_index,w	;volatile
   365  007A  1803               	skipnc
   366  007B  2885               	goto	i1l2981
   367                           
   368                           ;main.c: 222: {
   369                           ;main.c: 223: TXREG = tx_data[tx_data_index];
   370  007C  0874               	movf	_tx_data_index,w
   371  007D  3EA0               	addlw	_tx_data& (0+255)
   372  007E  0086               	movwf	6
   373  007F  0187               	clrf	7
   374  0080  0801               	movf	1,w
   375  0081  0023               	movlb	3	; select bank3
   376  0082  009A               	movwf	26	;volatile
   377                           
   378                           ;main.c: 224: tx_data_index ++;
   379  0083  0AF4               	incf	_tx_data_index,f	;volatile
   380                           
   381                           ;main.c: 225: }
   382  0084  0009               	retfie
   383  0085                     i1l2981:	
   384                           
   385                           ;main.c: 226: else
   386                           ;main.c: 227: {
   387                           ;main.c: 228: TXIE = 0;
   388  0085  0021               	movlb	1	; select bank1
   389  0086  1211               	bcf	17,4
   390                           
   391                           ;main.c: 229: tx_timeout_flag = 1;
   392  0087  15FC               	bsf	_tx_timeout_flag/(0+8),_tx_timeout_flag& (0+7)
   393  0088  0009               	retfie
   394  0089                     __end_of_isr:	
   395                           
   396                           	psect	bitbssCOMMON
   397  03E0                     __pbitbssCOMMON:	
   398  03E0                     _AbnorProcFlag:	
   399  03E0                     	ds	1
   400  03E1                     _Sample_flag:	
   401  03E1                     	ds	1
   402  03E2                     _rx_data_flag:	
   403  03E2                     	ds	1
   404  03E3                     _tx_timeout_flag:	
   405  03E3                     	ds	1
   406                           
   407                           	psect	bssCOMMON
   408  0070                     __pbssCOMMON:	
   409  0070                     _gs50msCnt:	
   410  0070                     	ds	2
   411  0072                     _rx_data_counter:	
   412  0072                     	ds	1
   413  0073                     _rx_timeout:	
   414  0073                     	ds	1
   415  0074                     _tx_data_index:	
   416  0074                     	ds	1
   417  0075                     _tx_data_num:	
   418  0075                     	ds	1
   419                           
   420                           	psect	bssBANK0
   421  0047                     __pbssBANK0:	
   422  0047                     _ReadData:	
   423  0047                     	ds	3
   424  004A                     _SendData:	
   425  004A                     	ds	3
   426  004D                     _CRC:	
   427  004D                     	ds	2
   428  004F                     _FreqPhase:	
   429  004F                     	ds	2
   430  0051                     _address:	
   431  0051                     	ds	1
   432  0052                     modbus@rx_timeout:	
   433  0052                     	ds	1
   434                           
   435                           	psect	bssBANK1
   436  00A0                     __pbssBANK1:	
   437  00A0                     _tx_data:	
   438  00A0                     	ds	64
   439                           
   440                           	psect	bssBANK2
   441  0120                     __pbssBANK2:	
   442  0120                     _rx_data:	
   443  0120                     	ds	64
   444                           
   445                           	psect	clrtext
   446  0FD4                     clear_ram:	
   447                           ;	Called with FSR0 containing the base address, and
   448                           ;	btemp/btemp+1 has the size to clear
   449                           
   450  0FD4  0064               	clrwdt	;clear the watchdog before getting into this loop
   451  0FD5                     clrloop:	
   452  0FD5  0180               	clrf	0	;clear RAM location pointed to by FSR
   453  0FD6  3101               	addfsr 0,1
   454  0FD7  3001               	movlw	1
   455  0FD8  02FE               	subwf	126,f
   456  0FD9  3000               	movlw	0
   457  0FDA  3BFF               	subwfb	127,f
   458  0FDB  087F               	movf	127,w
   459  0FDC  047E               	iorwf	126,w
   460  0FDD  1903               	btfsc	3,2
   461  0FDE  3400               	retlw	0	;all done for this memory range, return
   462  0FDF  2FD5               	goto	clrloop	;have we reached the end yet?
   463                           
   464                           	psect	cstackCOMMON
   465  0076                     __pcstackCOMMON:	
   466  0076                     ?_modbus_init:	
   467  0076                     ?_modbus_main:	
   468                           ; 0 bytes @ 0x0
   469                           
   470  0076                     ?_AD7758_init:	
   471                           ; 0 bytes @ 0x0
   472                           
   473  0076                     ?_Sample_ADE7758:	
   474                           ; 0 bytes @ 0x0
   475                           
   476  0076                     ?_SPI_Init:	
   477                           ; 0 bytes @ 0x0
   478                           
   479  0076                     ?_Initialize:	
   480                           ; 0 bytes @ 0x0
   481                           
   482  0076                     ?_isr:	
   483                           ; 0 bytes @ 0x0
   484                           
   485  0076                     ?_main:	
   486                           ; 0 bytes @ 0x0
   487                           
   488  0076                     ?_rs485_send_data:	
   489                           ; 0 bytes @ 0x0
   490                           
   491  0076                     ?_sendHAHA:	
   492                           ; 0 bytes @ 0x0
   493                           
   494  0076                     ?_spiSendByte:	
   495                           ; 0 bytes @ 0x0
   496                           
   497  0076                     ?_AD7758_check_init:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0076                     ?___lwmod:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0076                     ___lwmod@divisor:	
   504                           ; 2 bytes @ 0x0
   505                           
   506                           
   507                           ; 2 bytes @ 0x0
   508  0076                     	ds	2
   509  0078                     ___lwmod@dividend:	
   510                           
   511                           ; 2 bytes @ 0x2
   512  0078                     	ds	2
   513  007A                     ??___lwmod:	
   514  007A                     ___lwmod@counter:	
   515                           ; 0 bytes @ 0x4
   516                           
   517                           
   518                           ; 1 bytes @ 0x4
   519  007A                     	ds	1
   520  007B                     ??_isr:	
   521  007B                     isr@data:	
   522                           ; 0 bytes @ 0x5
   523                           
   524                           
   525                           ; 1 bytes @ 0x5
   526  007B                     	ds	1
   527                           
   528                           	psect	cstackBANK0
   529  0020                     __pcstackBANK0:	
   530  0020                     ?_Delay:	
   531  0020                     ??_spiSendByte:	
   532                           ; 0 bytes @ 0x0
   533                           
   534  0020                     ??_modbus_init:	
   535                           ; 0 bytes @ 0x0
   536                           
   537  0020                     ??_SPI_Init:	
   538                           ; 0 bytes @ 0x0
   539                           
   540  0020                     ??_Initialize:	
   541                           ; 0 bytes @ 0x0
   542                           
   543  0020                     ??_rs485_send_data:	
   544                           ; 0 bytes @ 0x0
   545                           
   546  0020                     ?_ModbusCalcCRC:	
   547                           ; 0 bytes @ 0x0
   548                           
   549  0020                     ?___bmul:	
   550                           ; 0 bytes @ 0x0
   551                           
   552  0020                     ?___lmul:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0020                     ?___lldiv:	
   556                           ; 4 bytes @ 0x0
   557                           
   558  0020                     spiSendByte@spi_data:	
   559                           ; 4 bytes @ 0x0
   560                           
   561  0020                     ___bmul@multiplicand:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0020                     ModbusCalcCRC@Frame:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0020                     Delay@delay_count_max:	
   568                           ; 2 bytes @ 0x0
   569                           
   570  0020                     ___lmul@multiplier:	
   571                           ; 4 bytes @ 0x0
   572                           
   573  0020                     ___lldiv@divisor:	
   574                           ; 4 bytes @ 0x0
   575                           
   576                           
   577                           ; 4 bytes @ 0x0
   578  0020                     	ds	1
   579  0021                     ??___bmul:	
   580  0021                     ___bmul@product:	
   581                           ; 0 bytes @ 0x1
   582                           
   583  0021                     spiSendByte@cc:	
   584                           ; 1 bytes @ 0x1
   585                           
   586                           
   587                           ; 4 bytes @ 0x1
   588  0021                     	ds	1
   589  0022                     ModbusCalcCRC@LenFrame:	
   590  0022                     ___bmul@multiplier:	
   591                           ; 1 bytes @ 0x2
   592                           
   593                           
   594                           ; 1 bytes @ 0x2
   595  0022                     	ds	1
   596  0023                     ??_ModbusCalcCRC:	
   597  0023                     ModbusCalcCRC@bitVal:	
   598                           ; 0 bytes @ 0x3
   599                           
   600                           
   601                           ; 1 bytes @ 0x3
   602  0023                     	ds	1
   603  0024                     ??_Delay:	
   604  0024                     ModbusCalcCRC@CntByte:	
   605                           ; 0 bytes @ 0x4
   606                           
   607  0024                     Delay@delay_count:	
   608                           ; 1 bytes @ 0x4
   609                           
   610  0024                     ___lmul@multiplicand:	
   611                           ; 4 bytes @ 0x4
   612                           
   613  0024                     ___lldiv@dividend:	
   614                           ; 4 bytes @ 0x4
   615                           
   616                           
   617                           ; 4 bytes @ 0x4
   618  0024                     	ds	1
   619  0025                     ModbusCalcCRC@j:	
   620  0025                     spiSendByte@spi_tmp:	
   621                           ; 1 bytes @ 0x5
   622                           
   623                           
   624                           ; 1 bytes @ 0x5
   625  0025                     	ds	1
   626  0026                     ?_AD7758_GetData:	
   627  0026                     ?_AD7758_SendData:	
   628                           ; 0 bytes @ 0x6
   629                           
   630  0026                     AD7758_GetData@num:	
   631                           ; 0 bytes @ 0x6
   632                           
   633  0026                     AD7758_SendData@num:	
   634                           ; 1 bytes @ 0x6
   635                           
   636                           
   637                           ; 1 bytes @ 0x6
   638  0026                     	ds	1
   639  0027                     AD7758_GetData@chip:	
   640  0027                     AD7758_SendData@chip:	
   641                           ; 1 bytes @ 0x7
   642                           
   643                           
   644                           ; 1 bytes @ 0x7
   645  0027                     	ds	1
   646  0028                     ?_AD7758_CS:	
   647  0028                     ??_AD7758_GetData:	
   648                           ; 0 bytes @ 0x8
   649                           
   650  0028                     ??_AD7758_SendData:	
   651                           ; 0 bytes @ 0x8
   652                           
   653  0028                     ??___lmul:	
   654                           ; 0 bytes @ 0x8
   655                           
   656  0028                     ??___lldiv:	
   657                           ; 0 bytes @ 0x8
   658                           
   659  0028                     AD7758_CS@enable:	
   660                           ; 0 bytes @ 0x8
   661                           
   662  0028                     AD7758_GetData@addr:	
   663                           ; 1 bytes @ 0x8
   664                           
   665  0028                     AD7758_SendData@addr:	
   666                           ; 1 bytes @ 0x8
   667                           
   668  0028                     ___lmul@product:	
   669                           ; 1 bytes @ 0x8
   670                           
   671  0028                     ___lldiv@quotient:	
   672                           ; 4 bytes @ 0x8
   673                           
   674                           
   675                           ; 4 bytes @ 0x8
   676  0028                     	ds	1
   677  0029                     ??_AD7758_CS:	
   678  0029                     AD7758_CS@chip:	
   679                           ; 0 bytes @ 0x9
   680                           
   681  0029                     AD7758_GetData@i:	
   682                           ; 1 bytes @ 0x9
   683                           
   684  0029                     AD7758_SendData@i:	
   685                           ; 1 bytes @ 0x9
   686                           
   687                           
   688                           ; 1 bytes @ 0x9
   689  0029                     	ds	1
   690  002A                     ??_AD7758_init:	
   691  002A                     ??_Sample_ADE7758:	
   692                           ; 0 bytes @ 0xA
   693                           
   694  002A                     ??_AD7758_check_init:	
   695                           ; 0 bytes @ 0xA
   696                           
   697  002A                     AD7758_init@chip:	
   698                           ; 0 bytes @ 0xA
   699                           
   700  002A                     AD7758_check_init@ret:	
   701                           ; 1 bytes @ 0xA
   702                           
   703                           
   704                           ; 1 bytes @ 0xA
   705  002A                     	ds	1
   706  002B                     AD7758_check_init@chip:	
   707                           
   708                           ; 1 bytes @ 0xB
   709  002B                     	ds	1
   710  002C                     ___lldiv@counter:	
   711                           
   712                           ; 1 bytes @ 0xC
   713  002C                     	ds	1
   714  002D                     ??_sendHAHA:	
   715                           
   716                           ; 0 bytes @ 0xD
   717  002D                     	ds	4
   718  0031                     sendHAHA@cal_temp3:	
   719                           
   720                           ; 4 bytes @ 0x11
   721  0031                     	ds	4
   722  0035                     sendHAHA@idx:	
   723                           
   724                           ; 2 bytes @ 0x15
   725  0035                     	ds	2
   726  0037                     sendHAHA@cal_temp1:	
   727                           
   728                           ; 4 bytes @ 0x17
   729  0037                     	ds	4
   730  003B                     sendHAHA@cal_temp2:	
   731                           
   732                           ; 4 bytes @ 0x1B
   733  003B                     	ds	3
   734  003E                     Sample_ADE7758@sum:	
   735                           
   736                           ; 2 bytes @ 0x1E
   737  003E                     	ds	1
   738  003F                     sendHAHA@cal_temp:	
   739                           
   740                           ; 4 bytes @ 0x1F
   741  003F                     	ds	1
   742  0040                     Sample_ADE7758@chip:	
   743                           
   744                           ; 1 bytes @ 0x20
   745  0040                     	ds	3
   746  0043                     ??_modbus_main:	
   747  0043                     modbus_main@CRC_Temp:	
   748                           ; 0 bytes @ 0x23
   749                           
   750                           
   751                           ; 2 bytes @ 0x23
   752  0043                     	ds	2
   753  0045                     modbus_main@REG_Temp:	
   754                           
   755                           ; 2 bytes @ 0x25
   756  0045                     	ds	2
   757  0047                     ??_main:	
   758                           
   759                           	psect	text523
   760  008C                     __ptext523:	
   761 ;; =============== function _AD7758_check_init ends ============
   762                           
   763                           
   764 ;; *************** function _Sample_ADE7758 *****************
   765 ;; Defined at:
   766 ;;		line 148 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;  chip            1    wreg     unsigned char 
   769 ;; Auto vars:     Size  Location     Type
   770 ;;  chip            1   32[BANK0 ] unsigned char 
   771 ;;  sum             2   30[BANK0 ] unsigned int 
   772 ;; Return value:  Size  Location     Type
   773 ;;		None               void
   774 ;; Registers used:
   775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 1F/0
   779 ;;		Unchanged: FFFE0/0
   780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   781 ;;      Params:         0       0       0       0       0       0
   782 ;;      Locals:         0       3       0       0       0       0
   783 ;;      Temps:          0      20       0       0       0       0
   784 ;;      Totals:         0      23       0       0       0       0
   785 ;;Total ram usage:       23 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; Hardware stack levels required when called:    4
   788 ;; This function calls:
   789 ;;		_AD7758_CS
   790 ;;		_AD7758_GetData
   791 ;;		___bmul
   792 ;;		_AD7758_SendData
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797  008C                     _Sample_ADE7758:	
   798                           
   799                           ; Regs used in _Sample_ADE7758: [wreg+fsr1l-status,0+pclath+cstack]
   800                           ;Sample_ADE7758@chip stored from wreg
   801  008C  0020               	movlb	0	; select bank0
   802  008D  00C0               	movwf	Sample_ADE7758@chip
   803                           
   804                           ;ADE7758.c: 149: uint sum;
   805                           ;ADE7758.c: 152: AD7758_CS(chip, 1);
   806  008E  01A8               	clrf	?_AD7758_CS
   807  008F  0AA8               	incf	?_AD7758_CS,f
   808  0090  2409  3180         	fcall	_AD7758_CS
   809                           
   810                           ;ADE7758.c: 155: AD7758_GetData(0x10, 2, chip);
   811  0092  3002               	movlw	2
   812  0093  00A6               	movwf	?_AD7758_GetData
   813  0094  0840               	movf	Sample_ADE7758@chip,w
   814  0095  00A7               	movwf	?_AD7758_GetData+1
   815  0096  3010               	movlw	16
   816  0097  233D  3180         	fcall	_AD7758_GetData
   817                           
   818                           ;ADE7758.c: 156: if( FreqPhase[chip-1] == 1 )
   819  0099  0840               	movf	Sample_ADE7758@chip,w
   820  009A  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
   821  009B  0086               	movwf	6
   822  009C  0187               	clrf	7
   823  009D  0B01               	decfsz	1,w
   824  009E  28BE               	goto	l10962
   825                           
   826                           ;ADE7758.c: 157: {
   827                           ;ADE7758.c: 158: ADE7758Data[chip-1].PhaseA.Frequency[0]=ReadData[0];
   828  009F  0847               	movf	_ReadData,w
   829  00A0  24A8  3180         	fcall	PL19	;call to abstracted procedure
   830  00A2  2331  3180         	fcall	___bmul
   831  00A4  2490  3180         	fcall	PL9	;call to abstracted procedure
   832  00A6  0086               	movwf	6
   833  00A7  082C               	movf	??_Sample_ADE7758+2,w
   834  00A8  0087               	movwf	7
   835  00A9  082A               	movf	??_Sample_ADE7758,w
   836  00AA  0081               	movwf	1
   837                           
   838                           ;ADE7758.c: 159: ADE7758Data[chip-1].PhaseA.Frequency[1]=ReadData[1];
   839  00AB  0848               	movf	_ReadData+1,w
   840  00AC  24A8  3180         	fcall	PL19	;call to abstracted procedure
   841  00AE  2331  3180         	fcall	___bmul
   842  00B0  2490  3180         	fcall	PL9	;call to abstracted procedure
   843  00B2  3E01               	addlw	1
   844  00B3  243A  3180         	fcall	PL3	;call to abstracted procedure
   845                           
   846                           ;ADE7758.c: 160: FreqPhase[chip-1] = 2;
   847  00B5  0840               	movf	Sample_ADE7758@chip,w
   848  00B6  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
   849  00B7  0086               	movwf	6
   850  00B8  3002               	movlw	2
   851  00B9  0187               	clrf	7
   852  00BA  0081               	movwf	1
   853                           
   854                           ;ADE7758.c: 161: SendData[0] = 0x01;
   855  00BB  01CA               	clrf	_SendData
   856  00BC  0ACA               	incf	_SendData,f
   857  00BD  2900               	goto	l10980
   858  00BE                     l10962:	
   859                           ;ADE7758.c: 163: }
   860                           
   861                           ;ADE7758.c: 162: AD7758_SendData(0x14,1,chip);
   862                           
   863                           
   864                           ;ADE7758.c: 164: else if( FreqPhase[chip-1] == 2 )
   865  00BE  24D5  3180         	fcall	PL25	;call to abstracted procedure
   866  00C0  3A02               	xorlw	2
   867  00C1  1D03               	skipz
   868  00C2  28E0               	goto	l10972
   869                           
   870                           ;ADE7758.c: 165: {
   871                           ;ADE7758.c: 166: ADE7758Data[chip-1].PhaseB.Frequency[0]=ReadData[0];
   872  00C3  0847               	movf	_ReadData,w
   873  00C4  24A8  3180         	fcall	PL19	;call to abstracted procedure
   874  00C6  2331  3180         	fcall	___bmul
   875  00C8  2490  3180         	fcall	PL9	;call to abstracted procedure
   876  00CA  3E10               	addlw	16
   877  00CB  243A  3180         	fcall	PL3	;call to abstracted procedure
   878                           
   879                           ;ADE7758.c: 167: ADE7758Data[chip-1].PhaseB.Frequency[1]=ReadData[1];
   880  00CD  0848               	movf	_ReadData+1,w
   881  00CE  24A8  3180         	fcall	PL19	;call to abstracted procedure
   882  00D0  2331  3180         	fcall	___bmul
   883  00D2  2490  3180         	fcall	PL9	;call to abstracted procedure
   884  00D4  3E11               	addlw	17
   885  00D5  243A  3180         	fcall	PL3	;call to abstracted procedure
   886                           
   887                           ;ADE7758.c: 168: FreqPhase[chip-1] = 3;
   888  00D7  0840               	movf	Sample_ADE7758@chip,w
   889  00D8  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
   890  00D9  0086               	movwf	6
   891  00DA  3003               	movlw	3
   892  00DB  0187               	clrf	7
   893  00DC  0081               	movwf	1
   894                           
   895                           ;ADE7758.c: 169: SendData[0] = 0x02;
   896  00DD  3002               	movlw	2
   897  00DE  00CA               	movwf	_SendData
   898  00DF  2900               	goto	l10980
   899  00E0                     l10972:	
   900                           ;ADE7758.c: 171: }
   901                           
   902                           ;ADE7758.c: 170: AD7758_SendData(0x14,1,chip);
   903                           
   904                           
   905                           ;ADE7758.c: 172: else if( FreqPhase[chip-1] == 3 )
   906  00E0  24D5  3180         	fcall	PL25	;call to abstracted procedure
   907  00E2  3A03               	xorlw	3
   908  00E3  1D03               	skipz
   909  00E4  2907               	goto	l10982
   910                           
   911                           ;ADE7758.c: 173: {
   912                           ;ADE7758.c: 174: ADE7758Data[chip-1].PhaseC.Frequency[0]=ReadData[0];
   913  00E5  0847               	movf	_ReadData,w
   914  00E6  24A8  3180         	fcall	PL19	;call to abstracted procedure
   915  00E8  2331  3180         	fcall	___bmul
   916  00EA  2490  3180         	fcall	PL9	;call to abstracted procedure
   917  00EC  3E20               	addlw	32
   918  00ED  243A  3180         	fcall	PL3	;call to abstracted procedure
   919                           
   920                           ;ADE7758.c: 175: ADE7758Data[chip-1].PhaseC.Frequency[1]=ReadData[1];
   921  00EF  0848               	movf	_ReadData+1,w
   922  00F0  24A8  3180         	fcall	PL19	;call to abstracted procedure
   923  00F2  2331  3180         	fcall	___bmul
   924  00F4  2490  3180         	fcall	PL9	;call to abstracted procedure
   925  00F6  3E21               	addlw	33
   926  00F7  243A  3180         	fcall	PL3	;call to abstracted procedure
   927                           
   928                           ;ADE7758.c: 176: FreqPhase[chip-1] = 1;
   929  00F9  0840               	movf	Sample_ADE7758@chip,w
   930  00FA  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
   931  00FB  0086               	movwf	6
   932  00FC  0187               	clrf	7
   933  00FD  0181               	clrf	1
   934  00FE  0A81               	incf	1,f
   935                           
   936                           ;ADE7758.c: 177: SendData[0] = 0x00;
   937  00FF  01CA               	clrf	_SendData
   938  0100                     l10980:	
   939                           
   940                           ;ADE7758.c: 178: AD7758_SendData(0x14,1,chip);
   941  0100  01A6               	clrf	?_AD7758_SendData
   942  0101  0AA6               	incf	?_AD7758_SendData,f
   943  0102  0840               	movf	Sample_ADE7758@chip,w
   944  0103  00A7               	movwf	?_AD7758_SendData+1
   945  0104  3014               	movlw	20
   946  0105  23CF  3180         	fcall	_AD7758_SendData
   947  0107                     l10982:	
   948                           
   949                           ;ADE7758.c: 179: }
   950                           ;ADE7758.c: 182: AD7758_GetData(0x01, 2, chip);
   951  0107  3002               	movlw	2
   952  0108  00A6               	movwf	?_AD7758_GetData
   953  0109  0840               	movf	Sample_ADE7758@chip,w
   954  010A  00A7               	movwf	?_AD7758_GetData+1
   955  010B  3001               	movlw	1
   956  010C  233D  3180         	fcall	_AD7758_GetData
   957                           
   958                           ;ADE7758.c: 183: if ( ReadData[0]&0x80 )
   959  010E  1FC7               	btfss	_ReadData,7
   960  010F  2913               	goto	l10988
   961                           
   962                           ;ADE7758.c: 184: {
   963                           ;ADE7758.c: 185: ReadData[0] = ~ReadData[0];
   964  0110  30FF               	movlw	255
   965  0111  06C7               	xorwf	_ReadData,f
   966                           
   967                           ;ADE7758.c: 186: ReadData[1] = ~ReadData[1];
   968  0112  06C8               	xorwf	_ReadData+1,f
   969  0113                     l10988:	
   970                           
   971                           ;ADE7758.c: 187: }
   972                           ;ADE7758.c: 189: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseA.Active_
      +                          Power[0]) << 8) +
   973                           ;ADE7758.c: 190: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseA.Active_Power[1])) >> 1
      +                          );
   974  0113  3031               	movlw	49
   975  0114  00A0               	movwf	?___bmul
   976  0115  0840               	movf	Sample_ADE7758@chip,w
   977  0116  2331  3180         	fcall	___bmul
   978  0118  24B5  3180         	fcall	PL21	;call to abstracted procedure
   979  011A  3E08               	addlw	8
   980  011B  2470  3180         	fcall	PL8	;call to abstracted procedure
   981  011D  2331  3180         	fcall	___bmul
   982  011F  24AD  3180         	fcall	PL20	;call to abstracted procedure
   983  0121  3E09               	addlw	9
   984                           
   985                           ;ADE7758.c: 192: ADE7758Data[chip-1].PhaseA.Active_Power[0] = (uchar)(sum>>8);
   986  0122  2445  3180         	fcall	PL5	;call to abstracted procedure
   987  0124  2331  3180         	fcall	___bmul
   988  0126  2490  3180         	fcall	PL9	;call to abstracted procedure
   989  0128  3E08               	addlw	8
   990  0129  243A  3180         	fcall	PL3	;call to abstracted procedure
   991                           
   992                           ;ADE7758.c: 193: ADE7758Data[chip-1].PhaseA.Active_Power[1] = (uchar)sum;
   993  012B  083E               	movf	Sample_ADE7758@sum,w
   994  012C  24A8  3180         	fcall	PL19	;call to abstracted procedure
   995  012E  2331  3180         	fcall	___bmul
   996  0130  2490  3180         	fcall	PL9	;call to abstracted procedure
   997  0132  3E09               	addlw	9
   998  0133  243A  3180         	fcall	PL3	;call to abstracted procedure
   999                           
  1000                           ;ADE7758.c: 194: if (sum > 50 )
  1001  0135  3000               	movlw	0
  1002  0136  023F               	subwf	Sample_ADE7758@sum+1,w
  1003  0137  3033               	movlw	51
  1004  0138  1903               	skipnz
  1005  0139  023E               	subwf	Sample_ADE7758@sum,w
  1006  013A  1C03               	skipc
  1007  013B  2946               	goto	l1474
  1008                           
  1009                           ;ADE7758.c: 195: {
  1010                           ;ADE7758.c: 196: ADE7758Data[chip-1].PhaseA.Energy += sum;
  1011  013C  083E               	movf	Sample_ADE7758@sum,w
  1012  013D  24BD  3180         	fcall	PL22	;call to abstracted procedure
  1013  013F  2331  3180         	fcall	___bmul
  1014  0141  24C6  3180         	fcall	PL23	;call to abstracted procedure
  1015  0143  3E0C               	addlw	12
  1016  0144  2498  3180         	fcall	PL16	;call to abstracted procedure
  1017  0146                     l1474:	
  1018                           
  1019                           ;ADE7758.c: 197: }
  1020                           ;ADE7758.c: 199: AD7758_GetData(0x02, 2, chip);
  1021  0146  3002               	movlw	2
  1022  0147  00A6               	movwf	?_AD7758_GetData
  1023  0148  0840               	movf	Sample_ADE7758@chip,w
  1024  0149  00A7               	movwf	?_AD7758_GetData+1
  1025  014A  3002               	movlw	2
  1026  014B  233D  3180         	fcall	_AD7758_GetData
  1027                           
  1028                           ;ADE7758.c: 200: if ( ReadData[0]&0x80 )
  1029  014D  1FC7               	btfss	_ReadData,7
  1030  014E  2952               	goto	l11002
  1031                           
  1032                           ;ADE7758.c: 201: {
  1033                           ;ADE7758.c: 202: ReadData[0] = ~ReadData[0];
  1034  014F  30FF               	movlw	255
  1035  0150  06C7               	xorwf	_ReadData,f
  1036                           
  1037                           ;ADE7758.c: 203: ReadData[1] = ~ReadData[1];
  1038  0151  06C8               	xorwf	_ReadData+1,f
  1039  0152                     l11002:	
  1040                           
  1041                           ;ADE7758.c: 204: }
  1042                           ;ADE7758.c: 205: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseB.Active_
      +                          Power[0]) << 8) +
  1043                           ;ADE7758.c: 206: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseB.Active_Power[1])) >> 1
      +                          );
  1044  0152  3031               	movlw	49
  1045  0153  00A0               	movwf	?___bmul
  1046  0154  0840               	movf	Sample_ADE7758@chip,w
  1047  0155  2331  3180         	fcall	___bmul
  1048  0157  24B5  3180         	fcall	PL21	;call to abstracted procedure
  1049  0159  3E18               	addlw	24
  1050  015A  2470  3180         	fcall	PL8	;call to abstracted procedure
  1051  015C  2331  3180         	fcall	___bmul
  1052  015E  24AD  3180         	fcall	PL20	;call to abstracted procedure
  1053  0160  3E19               	addlw	25
  1054                           
  1055                           ;ADE7758.c: 208: ADE7758Data[chip-1].PhaseB.Active_Power[0] = (uchar)(sum>>8);
  1056  0161  2445  3180         	fcall	PL5	;call to abstracted procedure
  1057  0163  2331  3180         	fcall	___bmul
  1058  0165  2490  3180         	fcall	PL9	;call to abstracted procedure
  1059  0167  3E18               	addlw	24
  1060  0168  243A  3180         	fcall	PL3	;call to abstracted procedure
  1061                           
  1062                           ;ADE7758.c: 209: ADE7758Data[chip-1].PhaseB.Active_Power[1] = (uchar)sum;
  1063  016A  083E               	movf	Sample_ADE7758@sum,w
  1064  016B  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1065  016D  2331  3180         	fcall	___bmul
  1066  016F  2490  3180         	fcall	PL9	;call to abstracted procedure
  1067  0171  3E19               	addlw	25
  1068  0172  243A  3180         	fcall	PL3	;call to abstracted procedure
  1069                           
  1070                           ;ADE7758.c: 210: if (sum > 50 )
  1071  0174  3000               	movlw	0
  1072  0175  023F               	subwf	Sample_ADE7758@sum+1,w
  1073  0176  3033               	movlw	51
  1074  0177  1903               	skipnz
  1075  0178  023E               	subwf	Sample_ADE7758@sum,w
  1076  0179  1C03               	skipc
  1077  017A  2985               	goto	l1476
  1078                           
  1079                           ;ADE7758.c: 211: {
  1080                           ;ADE7758.c: 212: ADE7758Data[chip-1].PhaseB.Energy += sum;
  1081  017B  083E               	movf	Sample_ADE7758@sum,w
  1082  017C  24BD  3180         	fcall	PL22	;call to abstracted procedure
  1083  017E  2331  3180         	fcall	___bmul
  1084  0180  24C6  3180         	fcall	PL23	;call to abstracted procedure
  1085  0182  3E1C               	addlw	28
  1086  0183  2498  3180         	fcall	PL16	;call to abstracted procedure
  1087  0185                     l1476:	
  1088                           
  1089                           ;ADE7758.c: 213: }
  1090                           ;ADE7758.c: 215: AD7758_GetData(0x03, 2, chip);
  1091  0185  3002               	movlw	2
  1092  0186  00A6               	movwf	?_AD7758_GetData
  1093  0187  0840               	movf	Sample_ADE7758@chip,w
  1094  0188  00A7               	movwf	?_AD7758_GetData+1
  1095  0189  3003               	movlw	3
  1096  018A  233D  3180         	fcall	_AD7758_GetData
  1097                           
  1098                           ;ADE7758.c: 216: if ( ReadData[0]&0x80 )
  1099  018C  1FC7               	btfss	_ReadData,7
  1100  018D  2991               	goto	l11016
  1101                           
  1102                           ;ADE7758.c: 217: {
  1103                           ;ADE7758.c: 218: ReadData[0] = ~ReadData[0];
  1104  018E  30FF               	movlw	255
  1105  018F  06C7               	xorwf	_ReadData,f
  1106                           
  1107                           ;ADE7758.c: 219: ReadData[1] = ~ReadData[1];
  1108  0190  06C8               	xorwf	_ReadData+1,f
  1109  0191                     l11016:	
  1110                           
  1111                           ;ADE7758.c: 220: }
  1112                           ;ADE7758.c: 221: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseC.Active_
      +                          Power[0]) << 8) +
  1113                           ;ADE7758.c: 222: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseC.Active_Power[1])) >> 1
      +                          );
  1114  0191  3031               	movlw	49
  1115  0192  00A0               	movwf	?___bmul
  1116  0193  0840               	movf	Sample_ADE7758@chip,w
  1117  0194  2331  3180         	fcall	___bmul
  1118  0196  24B5  3180         	fcall	PL21	;call to abstracted procedure
  1119  0198  3E28               	addlw	40
  1120  0199  2470  3180         	fcall	PL8	;call to abstracted procedure
  1121  019B  2331  3180         	fcall	___bmul
  1122  019D  24AD  3180         	fcall	PL20	;call to abstracted procedure
  1123  019F  3E29               	addlw	41
  1124                           
  1125                           ;ADE7758.c: 224: ADE7758Data[chip-1].PhaseC.Active_Power[0] = (uchar)(sum>>8);
  1126  01A0  2445  3180         	fcall	PL5	;call to abstracted procedure
  1127  01A2  2331  3180         	fcall	___bmul
  1128  01A4  2490  3180         	fcall	PL9	;call to abstracted procedure
  1129  01A6  3E28               	addlw	40
  1130  01A7  243A  3180         	fcall	PL3	;call to abstracted procedure
  1131                           
  1132                           ;ADE7758.c: 225: ADE7758Data[chip-1].PhaseC.Active_Power[1] = (uchar)sum;
  1133  01A9  083E               	movf	Sample_ADE7758@sum,w
  1134  01AA  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1135  01AC  2331  3180         	fcall	___bmul
  1136  01AE  2490  3180         	fcall	PL9	;call to abstracted procedure
  1137  01B0  3E29               	addlw	41
  1138  01B1  243A  3180         	fcall	PL3	;call to abstracted procedure
  1139                           
  1140                           ;ADE7758.c: 226: if (sum > 50 )
  1141  01B3  3000               	movlw	0
  1142  01B4  023F               	subwf	Sample_ADE7758@sum+1,w
  1143  01B5  3033               	movlw	51
  1144  01B6  1903               	skipnz
  1145  01B7  023E               	subwf	Sample_ADE7758@sum,w
  1146  01B8  1C03               	skipc
  1147  01B9  29C4               	goto	l1478
  1148                           
  1149                           ;ADE7758.c: 227: {
  1150                           ;ADE7758.c: 228: ADE7758Data[chip-1].PhaseC.Energy += sum;
  1151  01BA  083E               	movf	Sample_ADE7758@sum,w
  1152  01BB  24BD  3180         	fcall	PL22	;call to abstracted procedure
  1153  01BD  2331  3180         	fcall	___bmul
  1154  01BF  24C6  3180         	fcall	PL23	;call to abstracted procedure
  1155  01C1  3E2C               	addlw	44
  1156  01C2  2498  3180         	fcall	PL16	;call to abstracted procedure
  1157  01C4                     l1478:	
  1158                           
  1159                           ;ADE7758.c: 229: }
  1160                           ;ADE7758.c: 231: AD7758_GetData(0x0D, 3, chip);
  1161  01C4  3003               	movlw	3
  1162  01C5  00A6               	movwf	?_AD7758_GetData
  1163  01C6  0840               	movf	Sample_ADE7758@chip,w
  1164  01C7  00A7               	movwf	?_AD7758_GetData+1
  1165  01C8  300D               	movlw	13
  1166  01C9  233D  3180         	fcall	_AD7758_GetData
  1167                           
  1168                           ;ADE7758.c: 232: ADE7758Data[chip-1].PhaseA.Voltage[0]=ReadData[0];
  1169  01CB  0847               	movf	_ReadData,w
  1170  01CC  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1171  01CE  2331  3180         	fcall	___bmul
  1172  01D0  2490  3180         	fcall	PL9	;call to abstracted procedure
  1173  01D2  3E02               	addlw	2
  1174  01D3  243A  3180         	fcall	PL3	;call to abstracted procedure
  1175                           
  1176                           ;ADE7758.c: 233: ADE7758Data[chip-1].PhaseA.Voltage[1]=ReadData[1];
  1177  01D5  0848               	movf	_ReadData+1,w
  1178  01D6  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1179  01D8  2331  3180         	fcall	___bmul
  1180  01DA  2490  3180         	fcall	PL9	;call to abstracted procedure
  1181  01DC  3E03               	addlw	3
  1182  01DD  243A  3180         	fcall	PL3	;call to abstracted procedure
  1183                           
  1184                           ;ADE7758.c: 234: ADE7758Data[chip-1].PhaseA.Voltage[2]=ReadData[2];
  1185  01DF  0849               	movf	_ReadData+2,w
  1186  01E0  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1187  01E2  2331  3180         	fcall	___bmul
  1188  01E4  2490  3180         	fcall	PL9	;call to abstracted procedure
  1189  01E6  3E04               	addlw	4
  1190  01E7  243A  3180         	fcall	PL3	;call to abstracted procedure
  1191                           
  1192                           ;ADE7758.c: 236: AD7758_GetData(0x0E, 3, chip);
  1193  01E9  3003               	movlw	3
  1194  01EA  00A6               	movwf	?_AD7758_GetData
  1195  01EB  0840               	movf	Sample_ADE7758@chip,w
  1196  01EC  00A7               	movwf	?_AD7758_GetData+1
  1197  01ED  300E               	movlw	14
  1198  01EE  233D  3180         	fcall	_AD7758_GetData
  1199                           
  1200                           ;ADE7758.c: 237: ADE7758Data[chip-1].PhaseB.Voltage[0]=ReadData[0];
  1201  01F0  0847               	movf	_ReadData,w
  1202  01F1  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1203  01F3  2331  3180         	fcall	___bmul
  1204  01F5  2490  3180         	fcall	PL9	;call to abstracted procedure
  1205  01F7  3E12               	addlw	18
  1206  01F8  243A  3180         	fcall	PL3	;call to abstracted procedure
  1207                           
  1208                           ;ADE7758.c: 238: ADE7758Data[chip-1].PhaseB.Voltage[1]=ReadData[1];
  1209  01FA  0848               	movf	_ReadData+1,w
  1210  01FB  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1211  01FD  2331  3180         	fcall	___bmul
  1212  01FF  2490  3180         	fcall	PL9	;call to abstracted procedure
  1213  0201  3E13               	addlw	19
  1214  0202  243A  3180         	fcall	PL3	;call to abstracted procedure
  1215                           
  1216                           ;ADE7758.c: 239: ADE7758Data[chip-1].PhaseB.Voltage[2]=ReadData[2];
  1217  0204  0849               	movf	_ReadData+2,w
  1218  0205  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1219  0207  2331  3180         	fcall	___bmul
  1220  0209  2490  3180         	fcall	PL9	;call to abstracted procedure
  1221  020B  3E14               	addlw	20
  1222  020C  243A  3180         	fcall	PL3	;call to abstracted procedure
  1223                           
  1224                           ;ADE7758.c: 241: AD7758_GetData(0x0F, 3, chip);
  1225  020E  3003               	movlw	3
  1226  020F  00A6               	movwf	?_AD7758_GetData
  1227  0210  0840               	movf	Sample_ADE7758@chip,w
  1228  0211  00A7               	movwf	?_AD7758_GetData+1
  1229  0212  300F               	movlw	15
  1230  0213  233D  3180         	fcall	_AD7758_GetData
  1231                           
  1232                           ;ADE7758.c: 242: ADE7758Data[chip-1].PhaseC.Voltage[0]=ReadData[0];
  1233  0215  0847               	movf	_ReadData,w
  1234  0216  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1235  0218  2331  3180         	fcall	___bmul
  1236  021A  2490  3180         	fcall	PL9	;call to abstracted procedure
  1237  021C  3E22               	addlw	34
  1238  021D  243A  3180         	fcall	PL3	;call to abstracted procedure
  1239                           
  1240                           ;ADE7758.c: 243: ADE7758Data[chip-1].PhaseC.Voltage[1]=ReadData[1];
  1241  021F  0848               	movf	_ReadData+1,w
  1242  0220  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1243  0222  2331  3180         	fcall	___bmul
  1244  0224  2490  3180         	fcall	PL9	;call to abstracted procedure
  1245  0226  3E23               	addlw	35
  1246  0227  243A  3180         	fcall	PL3	;call to abstracted procedure
  1247                           
  1248                           ;ADE7758.c: 244: ADE7758Data[chip-1].PhaseC.Voltage[2]=ReadData[2];
  1249  0229  0849               	movf	_ReadData+2,w
  1250  022A  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1251  022C  2331  3180         	fcall	___bmul
  1252  022E  2490  3180         	fcall	PL9	;call to abstracted procedure
  1253  0230  3E24               	addlw	36
  1254  0231  243A  3180         	fcall	PL3	;call to abstracted procedure
  1255                           
  1256                           ;ADE7758.c: 246: AD7758_GetData(0x0A, 3, chip);
  1257  0233  3003               	movlw	3
  1258  0234  00A6               	movwf	?_AD7758_GetData
  1259  0235  0840               	movf	Sample_ADE7758@chip,w
  1260  0236  00A7               	movwf	?_AD7758_GetData+1
  1261  0237  300A               	movlw	10
  1262  0238  233D  3180         	fcall	_AD7758_GetData
  1263                           
  1264                           ;ADE7758.c: 247: ADE7758Data[chip-1].PhaseA.Current[0]=ReadData[0];
  1265  023A  0847               	movf	_ReadData,w
  1266  023B  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1267  023D  2331  3180         	fcall	___bmul
  1268  023F  2490  3180         	fcall	PL9	;call to abstracted procedure
  1269  0241  3E05               	addlw	5
  1270  0242  243A  3180         	fcall	PL3	;call to abstracted procedure
  1271                           
  1272                           ;ADE7758.c: 248: ADE7758Data[chip-1].PhaseA.Current[1]=ReadData[1];
  1273  0244  0848               	movf	_ReadData+1,w
  1274  0245  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1275  0247  2331  3180         	fcall	___bmul
  1276  0249  2490  3180         	fcall	PL9	;call to abstracted procedure
  1277  024B  3E06               	addlw	6
  1278  024C  243A  3180         	fcall	PL3	;call to abstracted procedure
  1279                           
  1280                           ;ADE7758.c: 249: ADE7758Data[chip-1].PhaseA.Current[2]=ReadData[2];
  1281  024E  0849               	movf	_ReadData+2,w
  1282  024F  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1283  0251  2331  3180         	fcall	___bmul
  1284  0253  2490  3180         	fcall	PL9	;call to abstracted procedure
  1285  0255  3E07               	addlw	7
  1286  0256  243A  3180         	fcall	PL3	;call to abstracted procedure
  1287                           
  1288                           ;ADE7758.c: 251: AD7758_GetData(0x0B, 3, chip);
  1289  0258  3003               	movlw	3
  1290  0259  00A6               	movwf	?_AD7758_GetData
  1291  025A  0840               	movf	Sample_ADE7758@chip,w
  1292  025B  00A7               	movwf	?_AD7758_GetData+1
  1293  025C  300B               	movlw	11
  1294  025D  233D  3180         	fcall	_AD7758_GetData
  1295                           
  1296                           ;ADE7758.c: 252: ADE7758Data[chip-1].PhaseB.Current[0]=ReadData[0];
  1297  025F  0847               	movf	_ReadData,w
  1298  0260  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1299  0262  2331  3180         	fcall	___bmul
  1300  0264  2490  3180         	fcall	PL9	;call to abstracted procedure
  1301  0266  3E15               	addlw	21
  1302  0267  243A  3180         	fcall	PL3	;call to abstracted procedure
  1303                           
  1304                           ;ADE7758.c: 253: ADE7758Data[chip-1].PhaseB.Current[1]=ReadData[1];
  1305  0269  0848               	movf	_ReadData+1,w
  1306  026A  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1307  026C  2331  3180         	fcall	___bmul
  1308  026E  2490  3180         	fcall	PL9	;call to abstracted procedure
  1309  0270  3E16               	addlw	22
  1310  0271  243A  3180         	fcall	PL3	;call to abstracted procedure
  1311                           
  1312                           ;ADE7758.c: 254: ADE7758Data[chip-1].PhaseB.Current[2]=ReadData[2];
  1313  0273  0849               	movf	_ReadData+2,w
  1314  0274  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1315  0276  2331  3180         	fcall	___bmul
  1316  0278  2490  3180         	fcall	PL9	;call to abstracted procedure
  1317  027A  3E17               	addlw	23
  1318  027B  243A  3180         	fcall	PL3	;call to abstracted procedure
  1319                           
  1320                           ;ADE7758.c: 256: AD7758_GetData(0x0C, 3, chip);
  1321  027D  3003               	movlw	3
  1322  027E  00A6               	movwf	?_AD7758_GetData
  1323  027F  0840               	movf	Sample_ADE7758@chip,w
  1324  0280  00A7               	movwf	?_AD7758_GetData+1
  1325  0281  300C               	movlw	12
  1326  0282  233D  3180         	fcall	_AD7758_GetData
  1327                           
  1328                           ;ADE7758.c: 257: ADE7758Data[chip-1].PhaseC.Current[0]=ReadData[0];
  1329  0284  0847               	movf	_ReadData,w
  1330  0285  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1331  0287  2331  3180         	fcall	___bmul
  1332  0289  2490  3180         	fcall	PL9	;call to abstracted procedure
  1333  028B  3E25               	addlw	37
  1334  028C  243A  3180         	fcall	PL3	;call to abstracted procedure
  1335                           
  1336                           ;ADE7758.c: 258: ADE7758Data[chip-1].PhaseC.Current[1]=ReadData[1];
  1337  028E  0848               	movf	_ReadData+1,w
  1338  028F  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1339  0291  2331  3180         	fcall	___bmul
  1340  0293  2490  3180         	fcall	PL9	;call to abstracted procedure
  1341  0295  3E26               	addlw	38
  1342  0296  243A  3180         	fcall	PL3	;call to abstracted procedure
  1343                           
  1344                           ;ADE7758.c: 259: ADE7758Data[chip-1].PhaseC.Current[2]=ReadData[2];
  1345  0298  0849               	movf	_ReadData+2,w
  1346  0299  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1347  029B  2331  3180         	fcall	___bmul
  1348  029D  2490  3180         	fcall	PL9	;call to abstracted procedure
  1349  029F  3E27               	addlw	39
  1350  02A0  243A  3180         	fcall	PL3	;call to abstracted procedure
  1351                           
  1352                           ;ADE7758.c: 261: AD7758_GetData(0x07, 2, chip);
  1353  02A2  3002               	movlw	2
  1354  02A3  00A6               	movwf	?_AD7758_GetData
  1355  02A4  0840               	movf	Sample_ADE7758@chip,w
  1356  02A5  00A7               	movwf	?_AD7758_GetData+1
  1357  02A6  3007               	movlw	7
  1358  02A7  233D  3180         	fcall	_AD7758_GetData
  1359                           
  1360                           ;ADE7758.c: 262: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseA.Apparen
      +                          t_Power[0]) << 8) +
  1361                           ;ADE7758.c: 263: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseA.Apparent_Power[1])) >>
      +                           1);
  1362  02A9  3031               	movlw	49
  1363  02AA  00A0               	movwf	?___bmul
  1364  02AB  0840               	movf	Sample_ADE7758@chip,w
  1365  02AC  2331  3180         	fcall	___bmul
  1366  02AE  24B5  3180         	fcall	PL21	;call to abstracted procedure
  1367  02B0  3E0A               	addlw	10
  1368  02B1  2470  3180         	fcall	PL8	;call to abstracted procedure
  1369  02B3  2331  3180         	fcall	___bmul
  1370  02B5  24AD  3180         	fcall	PL20	;call to abstracted procedure
  1371  02B7  3E0B               	addlw	11
  1372                           
  1373                           ;ADE7758.c: 264: ADE7758Data[chip-1].PhaseA.Apparent_Power[0] = (uchar)(sum>>8);
  1374  02B8  2445  3180         	fcall	PL5	;call to abstracted procedure
  1375  02BA  2331  3180         	fcall	___bmul
  1376  02BC  2490  3180         	fcall	PL9	;call to abstracted procedure
  1377  02BE  3E0A               	addlw	10
  1378  02BF  243A  3180         	fcall	PL3	;call to abstracted procedure
  1379                           
  1380                           ;ADE7758.c: 265: ADE7758Data[chip-1].PhaseA.Apparent_Power[1] = (uchar)sum;
  1381  02C1  083E               	movf	Sample_ADE7758@sum,w
  1382  02C2  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1383  02C4  2331  3180         	fcall	___bmul
  1384  02C6  2490  3180         	fcall	PL9	;call to abstracted procedure
  1385  02C8  3E0B               	addlw	11
  1386  02C9  243A  3180         	fcall	PL3	;call to abstracted procedure
  1387                           
  1388                           ;ADE7758.c: 267: AD7758_GetData(0x08, 2, chip);
  1389  02CB  3002               	movlw	2
  1390  02CC  00A6               	movwf	?_AD7758_GetData
  1391  02CD  0840               	movf	Sample_ADE7758@chip,w
  1392  02CE  00A7               	movwf	?_AD7758_GetData+1
  1393  02CF  3008               	movlw	8
  1394  02D0  233D  3180         	fcall	_AD7758_GetData
  1395                           
  1396                           ;ADE7758.c: 268: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseB.Apparen
      +                          t_Power[0]) << 8) +
  1397                           ;ADE7758.c: 269: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseB.Apparent_Power[1])) >>
      +                           1);
  1398  02D2  3031               	movlw	49
  1399  02D3  00A0               	movwf	?___bmul
  1400  02D4  0840               	movf	Sample_ADE7758@chip,w
  1401  02D5  2331  3180         	fcall	___bmul
  1402  02D7  24B5  3180         	fcall	PL21	;call to abstracted procedure
  1403  02D9  3E1A               	addlw	26
  1404  02DA  2470  3180         	fcall	PL8	;call to abstracted procedure
  1405  02DC  2331  3180         	fcall	___bmul
  1406  02DE  24AD  3180         	fcall	PL20	;call to abstracted procedure
  1407  02E0  3E1B               	addlw	27
  1408                           
  1409                           ;ADE7758.c: 270: ADE7758Data[chip-1].PhaseB.Apparent_Power[0] = (uchar)(sum>>8);
  1410  02E1  2445  3180         	fcall	PL5	;call to abstracted procedure
  1411  02E3  2331  3180         	fcall	___bmul
  1412  02E5  2490  3180         	fcall	PL9	;call to abstracted procedure
  1413  02E7  3E1A               	addlw	26
  1414  02E8  243A  3180         	fcall	PL3	;call to abstracted procedure
  1415                           
  1416                           ;ADE7758.c: 271: ADE7758Data[chip-1].PhaseB.Apparent_Power[1] = (uchar)sum;
  1417  02EA  083E               	movf	Sample_ADE7758@sum,w
  1418  02EB  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1419  02ED  2331  3180         	fcall	___bmul
  1420  02EF  2490  3180         	fcall	PL9	;call to abstracted procedure
  1421  02F1  3E1B               	addlw	27
  1422  02F2  243A  3180         	fcall	PL3	;call to abstracted procedure
  1423                           
  1424                           ;ADE7758.c: 273: AD7758_GetData(0x09, 2, chip);
  1425  02F4  3002               	movlw	2
  1426  02F5  00A6               	movwf	?_AD7758_GetData
  1427  02F6  0840               	movf	Sample_ADE7758@chip,w
  1428  02F7  00A7               	movwf	?_AD7758_GetData+1
  1429  02F8  3009               	movlw	9
  1430  02F9  233D  3180         	fcall	_AD7758_GetData
  1431                           
  1432                           ;ADE7758.c: 274: sum = (uint)(((((ulong)ReadData[0] + ADE7758Data[chip-1].PhaseC.Apparen
      +                          t_Power[0]) << 8) +
  1433                           ;ADE7758.c: 275: ((ulong)ReadData[1] + ADE7758Data[chip-1].PhaseC.Apparent_Power[1])) >>
      +                           1);
  1434  02FB  3031               	movlw	49
  1435  02FC  00A0               	movwf	?___bmul
  1436  02FD  0840               	movf	Sample_ADE7758@chip,w
  1437  02FE  2331  3180         	fcall	___bmul
  1438  0300  24B5  3180         	fcall	PL21	;call to abstracted procedure
  1439  0302  3E2A               	addlw	42
  1440  0303  2470  3180         	fcall	PL8	;call to abstracted procedure
  1441  0305  2331  3180         	fcall	___bmul
  1442  0307  24AD  3180         	fcall	PL20	;call to abstracted procedure
  1443  0309  3E2B               	addlw	43
  1444                           
  1445                           ;ADE7758.c: 276: ADE7758Data[chip-1].PhaseC.Apparent_Power[0] = (uchar)(sum>>8);
  1446  030A  2445  3180         	fcall	PL5	;call to abstracted procedure
  1447  030C  2331  3180         	fcall	___bmul
  1448  030E  2490  3180         	fcall	PL9	;call to abstracted procedure
  1449  0310  3E2A               	addlw	42
  1450  0311  243A  3180         	fcall	PL3	;call to abstracted procedure
  1451                           
  1452                           ;ADE7758.c: 277: ADE7758Data[chip-1].PhaseC.Apparent_Power[1] = (uchar)sum;
  1453  0313  083E               	movf	Sample_ADE7758@sum,w
  1454  0314  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1455  0316  2331  3180         	fcall	___bmul
  1456  0318  2490  3180         	fcall	PL9	;call to abstracted procedure
  1457  031A  3E2B               	addlw	43
  1458  031B  243A  3180         	fcall	PL3	;call to abstracted procedure
  1459                           
  1460                           ;ADE7758.c: 279: AD7758_GetData(0x11, 1, chip);
  1461  031D  01A6               	clrf	?_AD7758_GetData
  1462  031E  0AA6               	incf	?_AD7758_GetData,f
  1463  031F  0840               	movf	Sample_ADE7758@chip,w
  1464  0320  00A7               	movwf	?_AD7758_GetData+1
  1465  0321  3011               	movlw	17
  1466  0322  233D  3180         	fcall	_AD7758_GetData
  1467                           
  1468                           ;ADE7758.c: 280: ADE7758Data[chip-1].Temper = (schar)ReadData[0];
  1469  0324  0847               	movf	_ReadData,w
  1470  0325  24A8  3180         	fcall	PL19	;call to abstracted procedure
  1471  0327  2331  3180         	fcall	___bmul
  1472  0329  2490  3180         	fcall	PL9	;call to abstracted procedure
  1473  032B  3E30               	addlw	48
  1474  032C  243A  3180         	fcall	PL3	;call to abstracted procedure
  1475                           
  1476                           ;ADE7758.c: 283: AD7758_CS(chip, 0);
  1477  032E  01A8               	clrf	?_AD7758_CS
  1478  032F  0840               	movf	Sample_ADE7758@chip,w
  1479  0330  2C09               	ljmp	_AD7758_CS
  1480  0331                     __end_of_Sample_ADE7758:	
  1481  0331                     __ptext531:	
  1482 ;; =============== function ___lmul ends ============
  1483                           
  1484                           
  1485 ;; *************** function ___bmul *****************
  1486 ;; Defined at:
  1487 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\bmul.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  multiplier      1    wreg     unsigned char 
  1490 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  multiplier      1    2[BANK0 ] unsigned char 
  1493 ;;  product         1    1[BANK0 ] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      unsigned char 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0
  1498 ;; Tracked objects:
  1499 ;;		On entry : 1F/0
  1500 ;;		On exit  : 1F/0
  1501 ;;		Unchanged: FFFE0/0
  1502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1503 ;;      Params:         0       1       0       0       0       0
  1504 ;;      Locals:         0       2       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0       0
  1506 ;;      Totals:         0       3       0       0       0       0
  1507 ;;Total ram usage:        3 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    2
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_Sample_ADE7758
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516  0331                     ___bmul:	
  1517                           
  1518                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1519                           ;___bmul@multiplier stored from wreg
  1520  0331  00A2               	movwf	___bmul@multiplier
  1521  0332  01A1               	clrf	___bmul@product
  1522  0333                     l10554:	
  1523  0333  0820               	movf	___bmul@multiplicand,w
  1524  0334  1822               	btfsc	___bmul@multiplier,0
  1525  0335  07A1               	addwf	___bmul@product,f
  1526  0336  35A0               	lslf	___bmul@multiplicand,f
  1527  0337  36A2               	lsrf	___bmul@multiplier,f
  1528  0338  08A2               	movf	___bmul@multiplier,f
  1529  0339  1D03               	skipz
  1530  033A  2B33               	goto	l10554
  1531  033B  0821               	movf	___bmul@product,w
  1532  033C  0008               	return
  1533  033D                     __end_of___bmul:	
  1534  033D                     __ptext527:	
  1535 ;; =============== function _AD7758_SendData ends ============
  1536                           
  1537                           
  1538 ;; *************** function _AD7758_GetData *****************
  1539 ;; Defined at:
  1540 ;;		line 59 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;  addr            1    wreg     unsigned char 
  1543 ;;  num             1    6[BANK0 ] unsigned char 
  1544 ;;  chip            1    7[BANK0 ] unsigned char 
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;  addr            1    8[BANK0 ] unsigned char 
  1547 ;;  i               1    9[BANK0 ] unsigned char 
  1548 ;; Return value:  Size  Location     Type
  1549 ;;		None               void
  1550 ;; Registers used:
  1551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 1F/0
  1554 ;;		On exit  : 1F/0
  1555 ;;		Unchanged: FFFE0/0
  1556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1557 ;;      Params:         0       2       0       0       0       0
  1558 ;;      Locals:         0       2       0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0
  1560 ;;      Totals:         0       4       0       0       0       0
  1561 ;;Total ram usage:        4 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    3
  1564 ;; This function calls:
  1565 ;;		_spiSendByte
  1566 ;; This function is called by:
  1567 ;;		_Sample_ADE7758
  1568 ;;		_AD7758_check_init
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571  033D                     _AD7758_GetData:	
  1572                           
  1573                           ; Regs used in _AD7758_GetData: [wreg+fsr1l-status,0+pclath+cstack]
  1574                           ;AD7758_GetData@addr stored from wreg
  1575  033D  00A8               	movwf	AD7758_GetData@addr
  1576                           
  1577                           ;ADE7758.c: 60: uchar i;
  1578                           ;ADE7758.c: 76: spiSendByte(addr);
  1579  033E  23E1  3180         	fcall	_spiSendByte
  1580                           
  1581                           ;ADE7758.c: 77: for(i=0;i<num;i++)
  1582  0340  01A9               	clrf	AD7758_GetData@i
  1583  0341                     l10626:	
  1584  0341  0826               	movf	AD7758_GetData@num,w
  1585  0342  0229               	subwf	AD7758_GetData@i,w
  1586  0343  1803               	btfsc	3,0
  1587  0344  0008               	return
  1588                           
  1589                           ;ADE7758.c: 78: {
  1590                           ;ADE7758.c: 79: ReadData[i] = spiSendByte (0x00);
  1591  0345  0829               	movf	AD7758_GetData@i,w
  1592  0346  3E47               	addlw	_ReadData& (0+255)
  1593  0347  0086               	movwf	6
  1594  0348  3000               	movlw	0
  1595  0349  0187               	clrf	7
  1596  034A  23E1  3180         	fcall	_spiSendByte
  1597  034C  0081               	movwf	1
  1598  034D  0AA9               	incf	AD7758_GetData@i,f
  1599  034E  2B41               	goto	l10626
  1600  034F                     __end_of_AD7758_GetData:	
  1601  034F                     start_initialization:	
  1602  034F  300E               	movlw	14
  1603  210E                     	;BIGRAM
  1604                           
  1605                           ; Clear objects allocated to BIGRAM
  1606  0350  0084               	movwf	4
  1607  0351  3021               	movlw	33
  1608  0352  0085               	movwf	5
  1609  0353  3062               	movlw	98
  1610  0354  00FE               	movwf	126
  1611  0355  3000               	movlw	0
  1612  0356  01FF               	clrf	127
  1613  0357  318F  27D4  3180   	fcall	clear_ram
  1614  035A  3047               	movlw	low __pbssBANK0
  1615                           
  1616                           ; Clear objects allocated to BITCOMMON
  1617  035B  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  1618                           
  1619                           ; Clear objects allocated to COMMON
  1620  035C  01F0               	clrf	__pbssCOMMON& (0+127)
  1621  035D  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1622  035E  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1623  035F  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1624  0360  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1625  0361  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  1626                           
  1627                           ; Clear objects allocated to BANK0
  1628  0362  0084               	movwf	4
  1629  0363  3000               	movlw	high __pbssBANK0
  1630  0364  0085               	movwf	5
  1631  0365  300C               	movlw	12
  1632  0366  00FE               	movwf	126
  1633  0367  3000               	movlw	0
  1634  0368  00FF               	movwf	127
  1635  0369  318F  27D4  3180   	fcall	clear_ram
  1636                           
  1637                           ; Clear objects allocated to BANK1
  1638  036C  30A0               	movlw	low __pbssBANK1
  1639  036D  0084               	movwf	4
  1640  036E  3000               	movlw	high __pbssBANK1
  1641  036F  0085               	movwf	5
  1642  0370  3040               	movlw	64
  1643  0371  00FE               	movwf	126
  1644  0372  3000               	movlw	0
  1645  0373  00FF               	movwf	127
  1646  0374  318F  27D4  3180   	fcall	clear_ram
  1647                           
  1648                           ; Clear objects allocated to BANK2
  1649  0377  3020               	movlw	low __pbssBANK2
  1650  0378  0084               	movwf	4
  1651  0379  3001               	movlw	high __pbssBANK2
  1652  037A  0085               	movwf	5
  1653  037B  3040               	movlw	64
  1654  037C  00FE               	movwf	126
  1655  037D  3000               	movlw	0
  1656  037E  00FF               	movwf	127
  1657  037F  318F  27D4  3180   	fcall	clear_ram
  1658  0382                     end_of_initialization:	
  1659                           ;End of C runtime variable initialization code
  1660                           
  1661  0382  0020               	movlb	0
  1662  0383  2B84               	ljmp	_main	;jump to C main() function
  1663  0384                     __pmaintext:	
  1664                           ; 0 bytes @ 0x27
  1665 ;;Data sizes: Strings 0, constant 0, data 0, bss 146, persistent 0 stack 0
  1666 ;;Auto spaces:   Size  Autos    Used
  1667 ;; COMMON          14      6      13
  1668 ;; BANK0           80     39      51
  1669 ;; BANK1           80      0      64
  1670 ;; BANK2           80      0      64
  1671 ;; BANK3           30      0       0
  1672 ;; BANK4            0      0       0
  1673 ;;
  1674 ;; Pointer list with targets:
  1675 ;; ?___lmul	unsigned long  size(1) Largest target is 0
  1676 ;;
  1677 ;; ?___lldiv	unsigned long  size(1) Largest target is 0
  1678 ;;
  1679 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
  1680 ;;
  1681 ;; ModbusCalcCRC@Frame	PTR unsigned char  size(2) Largest target is 64
  1682 ;;		 -> tx_data(BANK1[64]), rx_data(BANK2[64]), 
  1683 ;;
  1684 ;;
  1685 ;; Critical Paths under _main in COMMON
  1686 ;;
  1687 ;;   None.
  1688 ;;
  1689 ;; Critical Paths under _isr in COMMON
  1690 ;;
  1691 ;;   _isr->___lwmod
  1692 ;;
  1693 ;; Critical Paths under _main in BANK0
  1694 ;;
  1695 ;;   _main->_modbus_main
  1696 ;;   _modbus_main->_sendHAHA
  1697 ;;   _AD7758_check_init->_AD7758_CS
  1698 ;;   _AD7758_check_init->_AD7758_GetData
  1699 ;;   _Sample_ADE7758->_AD7758_CS
  1700 ;;   _Sample_ADE7758->_AD7758_GetData
  1701 ;;   _Sample_ADE7758->_AD7758_SendData
  1702 ;;   _AD7758_init->_AD7758_CS
  1703 ;;   _AD7758_init->_AD7758_SendData
  1704 ;;   _sendHAHA->___lldiv
  1705 ;;   _AD7758_SendData->_spiSendByte
  1706 ;;   _AD7758_GetData->_spiSendByte
  1707 ;;   _AD7758_CS->_Delay
  1708 ;;
  1709 ;; Critical Paths under _isr in BANK0
  1710 ;;
  1711 ;;   None.
  1712 ;;
  1713 ;; Critical Paths under _main in BANK1
  1714 ;;
  1715 ;;   None.
  1716 ;;
  1717 ;; Critical Paths under _isr in BANK1
  1718 ;;
  1719 ;;   None.
  1720 ;;
  1721 ;; Critical Paths under _main in BANK2
  1722 ;;
  1723 ;;   None.
  1724 ;;
  1725 ;; Critical Paths under _isr in BANK2
  1726 ;;
  1727 ;;   None.
  1728 ;;
  1729 ;; Critical Paths under _main in BANK3
  1730 ;;
  1731 ;;   None.
  1732 ;;
  1733 ;; Critical Paths under _isr in BANK3
  1734 ;;
  1735 ;;   None.
  1736 ;;
  1737 ;; Critical Paths under _main in BANK4
  1738 ;;
  1739 ;;   None.
  1740 ;;
  1741 ;; Critical Paths under _isr in BANK4
  1742 ;;
  1743 ;;   None.
  1744 ;;
  1745 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1746 ;;
  1747 ;;
  1748 ;;Call Graph Tables:
  1749 ;;
  1750 ;; ---------------------------------------------------------------------------------
  1751 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1752 ;; ---------------------------------------------------------------------------------
  1753 ;; (0) _main                                                 0     0      0    9452
  1754 ;;                         _Initialize
  1755 ;;                           _SPI_Init
  1756 ;;                        _AD7758_init
  1757 ;;                        _modbus_init
  1758 ;;                        _modbus_main
  1759 ;;                     _Sample_ADE7758
  1760 ;;                  _AD7758_check_init
  1761 ;; ---------------------------------------------------------------------------------
  1762 ;; (1) _modbus_main                                          4     4      0    4540
  1763 ;;                                             35 BANK0      4     4      0
  1764 ;;                      _ModbusCalcCRC
  1765 ;;                           _sendHAHA
  1766 ;; ---------------------------------------------------------------------------------
  1767 ;; (1) _AD7758_check_init                                    2     2      0     560
  1768 ;;                                             10 BANK0      2     2      0
  1769 ;;                          _AD7758_CS
  1770 ;;                     _AD7758_GetData
  1771 ;; ---------------------------------------------------------------------------------
  1772 ;; (1) _Sample_ADE7758                                      23    23      0    3702
  1773 ;;                                             10 BANK0     23    23      0
  1774 ;;                          _AD7758_CS
  1775 ;;                     _AD7758_GetData
  1776 ;;                             ___bmul
  1777 ;;                    _AD7758_SendData
  1778 ;; ---------------------------------------------------------------------------------
  1779 ;; (1) _AD7758_init                                          1     1      0     650
  1780 ;;                                             10 BANK0      1     1      0
  1781 ;;                          _AD7758_CS
  1782 ;;                    _AD7758_SendData
  1783 ;;                              _Delay
  1784 ;; ---------------------------------------------------------------------------------
  1785 ;; (2) _sendHAHA                                            22    22      0    4306
  1786 ;;                                             13 BANK0     22    22      0
  1787 ;;                            ___lldiv
  1788 ;;                             ___lmul
  1789 ;;                      _ModbusCalcCRC
  1790 ;;                    _rs485_send_data
  1791 ;; ---------------------------------------------------------------------------------
  1792 ;; (2) _AD7758_SendData                                      4     2      2     235
  1793 ;;                                              6 BANK0      4     2      2
  1794 ;;                        _spiSendByte
  1795 ;; ---------------------------------------------------------------------------------
  1796 ;; (2) _AD7758_GetData                                       4     2      2     235
  1797 ;;                                              6 BANK0      4     2      2
  1798 ;;                        _spiSendByte
  1799 ;; ---------------------------------------------------------------------------------
  1800 ;; (2) _AD7758_CS                                            2     1      1     161
  1801 ;;                                              8 BANK0      2     1      1
  1802 ;;                              _Delay
  1803 ;; ---------------------------------------------------------------------------------
  1804 ;; (3) ___lldiv                                             13     5      8     241
  1805 ;;                                              0 BANK0     13     5      8
  1806 ;; ---------------------------------------------------------------------------------
  1807 ;; (3) ___lmul                                              12     4      8     136
  1808 ;;                                              0 BANK0     12     4      8
  1809 ;; ---------------------------------------------------------------------------------
  1810 ;; (2) ___bmul                                               3     2      1     108
  1811 ;;                                              0 BANK0      3     2      1
  1812 ;; ---------------------------------------------------------------------------------
  1813 ;; (3) _ModbusCalcCRC                                        6     3      3     160
  1814 ;;                                              0 BANK0      6     3      3
  1815 ;; ---------------------------------------------------------------------------------
  1816 ;; (3) _rs485_send_data                                      0     0      0       0
  1817 ;; ---------------------------------------------------------------------------------
  1818 ;; (1) _modbus_init                                          0     0      0       0
  1819 ;; ---------------------------------------------------------------------------------
  1820 ;; (1) _Initialize                                           0     0      0       0
  1821 ;; ---------------------------------------------------------------------------------
  1822 ;; (1) _SPI_Init                                             0     0      0       0
  1823 ;; ---------------------------------------------------------------------------------
  1824 ;; (3) _spiSendByte                                          6     6      0     105
  1825 ;;                                              0 BANK0      6     6      0
  1826 ;; ---------------------------------------------------------------------------------
  1827 ;; (3) _Delay                                                8     4      4      68
  1828 ;;                                              0 BANK0      8     4      4
  1829 ;; ---------------------------------------------------------------------------------
  1830 ;; Estimated maximum stack depth 3
  1831 ;; ---------------------------------------------------------------------------------
  1832 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1833 ;; ---------------------------------------------------------------------------------
  1834 ;; (4) _isr                                                  1     1      0     182
  1835 ;;                                              5 COMMON     1     1      0
  1836 ;;                            ___lwmod
  1837 ;; ---------------------------------------------------------------------------------
  1838 ;; (5) ___lwmod                                              5     1      4     159
  1839 ;;                                              0 COMMON     5     1      4
  1840 ;; ---------------------------------------------------------------------------------
  1841 ;; Estimated maximum stack depth 5
  1842 ;; ---------------------------------------------------------------------------------
  1843 ;; Call Graph Graphs:
  1844 ;; _main (ROOT)
  1845 ;;   _Initialize
  1846 ;;   _SPI_Init
  1847 ;;   _AD7758_init
  1848 ;;     _AD7758_CS
  1849 ;;       _Delay
  1850 ;;     _AD7758_SendData
  1851 ;;       _spiSendByte
  1852 ;;     _Delay
  1853 ;;   _modbus_init
  1854 ;;   _modbus_main
  1855 ;;     _ModbusCalcCRC
  1856 ;;     _sendHAHA
  1857 ;;       ___lldiv
  1858 ;;       ___lmul
  1859 ;;       _ModbusCalcCRC
  1860 ;;       _rs485_send_data
  1861 ;;   _Sample_ADE7758
  1862 ;;     _AD7758_CS
  1863 ;;       _Delay
  1864 ;;     _AD7758_GetData
  1865 ;;       _spiSendByte
  1866 ;;     ___bmul
  1867 ;;     _AD7758_SendData
  1868 ;;       _spiSendByte
  1869 ;;   _AD7758_check_init
  1870 ;;     _AD7758_CS
  1871 ;;       _Delay
  1872 ;;     _AD7758_GetData
  1873 ;;       _spiSendByte
  1874 ;;
  1875 ;; _isr (ROOT)
  1876 ;;   ___lwmod
  1877 ;;
  1878 ;; Address spaces:
  1879 ;;Name               Size   Autos  Total    Cost      Usage
  1880 ;;BIGRAM             170      0       0       0        0.0%
  1881 ;;EEDATA             100      0       0       0        0.0%
  1882 ;;NULL                 0      0       0       0        0.0%
  1883 ;;CODE                 0      0       0       0        0.0%
  1884 ;;BITCOMMON            E      0       1       1        7.1%
  1885 ;;BITSFR0              0      0       0       1        0.0%
  1886 ;;SFR0                 0      0       0       1        0.0%
  1887 ;;COMMON               E      6       D       2       92.9%
  1888 ;;BITSFR1              0      0       0       2        0.0%
  1889 ;;SFR1                 0      0       0       2        0.0%
  1890 ;;BITSFR2              0      0       0       3        0.0%
  1891 ;;SFR2                 0      0       0       3        0.0%
  1892 ;;STACK                0      0       7       3        0.0%
  1893 ;;BITSFR3              0      0       0       4        0.0%
  1894 ;;SFR3                 0      0       0       4        0.0%
  1895 ;;ABS                  0      0      C0       4        0.0%
  1896 ;;BITBANK0            50      0       0       5        0.0%
  1897 ;;BITSFR4              0      0       0       5        0.0%
  1898 ;;SFR4                 0      0       0       5        0.0%
  1899 ;;BANK0               50     27      33       6       63.8%
  1900 ;;BITSFR5              0      0       0       6        0.0%
  1901 ;;SFR5                 0      0       0       6        0.0%
  1902 ;;BITBANK1            50      0       0       7        0.0%
  1903 ;;BITSFR6              0      0       0       7        0.0%
  1904 ;;SFR6                 0      0       0       7        0.0%
  1905 ;;BANK1               50      0      40       8       80.0%
  1906 ;;BITSFR7              0      0       0       8        0.0%
  1907 ;;SFR7                 0      0       0       8        0.0%
  1908 ;;BITBANK2            50      0       0       9        0.0%
  1909 ;;BITSFR8              0      0       0       9        0.0%
  1910 ;;SFR8                 0      0       0       9        0.0%
  1911 ;;BANK2               50      0      40      10       80.0%
  1912 ;;BITSFR9              0      0       0      10        0.0%
  1913 ;;SFR9                 0      0       0      10        0.0%
  1914 ;;BITBANK3            50      0       0      11        0.0%
  1915 ;;BITSFR10             0      0       0      11        0.0%
  1916 ;;SFR10                0      0       0      11        0.0%
  1917 ;;BANK3               1E      0       0      12        0.0%
  1918 ;;BITSFR11             0      0       0      12        0.0%
  1919 ;;SFR11                0      0       0      12        0.0%
  1920 ;;BITBANK4            30      0       0      13        0.0%
  1921 ;;BITSFR12             0      0       0      13        0.0%
  1922 ;;SFR12                0      0       0      13        0.0%
  1923 ;;BITSFR13             0      0       0      14        0.0%
  1924 ;;SFR13                0      0       0      14        0.0%
  1925 ;;BANK4                0      0       0      14        0.0%
  1926 ;;BITSFR14             0      0       0      15        0.0%
  1927 ;;SFR14                0      0       0      15        0.0%
  1928 ;;DATA                 0      0      C7      15        0.0%
  1929 ;;BITSFR15             0      0       0      16        0.0%
  1930 ;;SFR15                0      0       0      16        0.0%
  1931 ;;BITSFR16             0      0       0      17        0.0%
  1932 ;;SFR16                0      0       0      17        0.0%
  1933 ;;BITSFR17             0      0       0      18        0.0%
  1934 ;;SFR17                0      0       0      18        0.0%
  1935 ;;BITSFR18             0      0       0      19        0.0%
  1936 ;;SFR18                0      0       0      19        0.0%
  1937 ;;BITSFR19             0      0       0      20        0.0%
  1938 ;;SFR19                0      0       0      20        0.0%
  1939 ;;BITSFR20             0      0       0      21        0.0%
  1940 ;;SFR20                0      0       0      21        0.0%
  1941 ;;BITSFR21             0      0       0      22        0.0%
  1942 ;;SFR21                0      0       0      22        0.0%
  1943 ;;BITSFR22             0      0       0      23        0.0%
  1944 ;;SFR22                0      0       0      23        0.0%
  1945 ;;BITSFR23             0      0       0      24        0.0%
  1946 ;;SFR23                0      0       0      24        0.0%
  1947 ;;BITSFR24             0      0       0      25        0.0%
  1948 ;;SFR24                0      0       0      25        0.0%
  1949 ;;BITSFR25             0      0       0      26        0.0%
  1950 ;;SFR25                0      0       0      26        0.0%
  1951 ;;BITSFR26             0      0       0      27        0.0%
  1952 ;;SFR26                0      0       0      27        0.0%
  1953 ;;BITSFR27             0      0       0      28        0.0%
  1954 ;;SFR27                0      0       0      28        0.0%
  1955 ;;BITSFR28             0      0       0      29        0.0%
  1956 ;;SFR28                0      0       0      29        0.0%
  1957 ;;BITSFR29             0      0       0      30        0.0%
  1958 ;;SFR29                0      0       0      30        0.0%
  1959 ;;BITSFR30             0      0       0      31        0.0%
  1960 ;;SFR30                0      0       0      31        0.0%
  1961 ;;BITSFR31             0      0       0      32        0.0%
  1962 ;;SFR31                0      0       0      32        0.0%
  1963                           
  1964                           
  1965 ;; *************** function _main *****************
  1966 ;; Defined at:
  1967 ;;		line 242 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\main.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;		None
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;		None
  1972 ;; Return value:  Size  Location     Type
  1973 ;;		None               void
  1974 ;; Registers used:
  1975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 17F/0
  1978 ;;		On exit  : 1F/0
  1979 ;;		Unchanged: FFE00/0
  1980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1981 ;;      Params:         0       0       0       0       0       0
  1982 ;;      Locals:         0       0       0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0
  1984 ;;      Totals:         0       0       0       0       0       0
  1985 ;;Total ram usage:        0 bytes
  1986 ;; Hardware stack levels required when called:    5
  1987 ;; This function calls:
  1988 ;;		_Initialize
  1989 ;;		_SPI_Init
  1990 ;;		_AD7758_init
  1991 ;;		_modbus_init
  1992 ;;		_modbus_main
  1993 ;;		_Sample_ADE7758
  1994 ;;		_AD7758_check_init
  1995 ;; This function is called by:
  1996 ;;		Startup code after reset
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999  0384                     _main:	
  2000                           
  2001                           ;main.c: 244: Initialize();
  2002                           
  2003                           ; Regs used in _main: [wreg-status,0+pclath+cstack]
  2004  0384  24FD  3180         	fcall	_Initialize
  2005                           
  2006                           ;main.c: 245: SPI_Init();
  2007  0386  2420  3180         	fcall	_SPI_Init
  2008                           
  2009                           ;main.c: 246: AD7758_init(1);
  2010  0388  3001               	movlw	1
  2011  0389  23A8  3180         	fcall	_AD7758_init
  2012                           
  2013                           ;main.c: 247: RA7 = 0;
  2014  038B  138C               	bcf	12,7
  2015                           
  2016                           ;main.c: 248: modbus_init();
  2017  038C  2430  3180         	fcall	_modbus_init
  2018  038E  0064               	clrwdt	;#
  2019  038F                     l11088:	
  2020                           
  2021                           ;main.c: 252: {
  2022                           ;main.c: 254: if(rx_data_flag == 1)
  2023  038F  1D7C               	btfss	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
  2024  0390  2B93               	goto	l11092
  2025                           
  2026                           ;main.c: 255: {
  2027                           ;main.c: 256: modbus_main();
  2028  0391  2575  3180         	fcall	_modbus_main
  2029  0393                     l11092:	
  2030  0393  0064               	clrwdt	;#
  2031                           
  2032                           ;main.c: 259: if(Sample_flag == 1)
  2033  0394  1CFC               	btfss	_Sample_flag/(0+8),_Sample_flag& (0+7)
  2034  0395  2B9A               	goto	l11100
  2035  0396  3001               	movlw	1
  2036                           
  2037                           ;main.c: 260: {
  2038                           ;main.c: 261: Sample_flag = 0;
  2039  0397  10FC               	bcf	_Sample_flag/(0+8),_Sample_flag& (0+7)
  2040                           
  2041                           ;main.c: 262: Sample_ADE7758( 0x01 );
  2042  0398  208C  3180         	fcall	_Sample_ADE7758
  2043  039A                     l11100:	
  2044  039A  0064               	clrwdt	;#
  2045                           
  2046                           ;main.c: 265: if(AbnorProcFlag == 1)
  2047  039B  1C7C               	btfss	_AbnorProcFlag/(0+8),_AbnorProcFlag& (0+7)
  2048  039C  2B8F               	goto	l11088
  2049  039D  3001               	movlw	1
  2050                           
  2051                           ;main.c: 266: {
  2052                           ;main.c: 267: AbnorProcFlag = 0;
  2053  039E  107C               	bcf	_AbnorProcFlag/(0+8),_AbnorProcFlag& (0+7)
  2054                           
  2055                           ;main.c: 268: if (AD7758_check_init(0x01) == 0 )
  2056  039F  2553  3180         	fcall	_AD7758_check_init
  2057  03A1  3800               	iorlw	0
  2058  03A2  1D03               	skipz
  2059  03A3  2B8F               	goto	l11088
  2060                           
  2061                           ;main.c: 269: {
  2062                           ;main.c: 270: AD7758_init(1);
  2063  03A4  3001               	movlw	1
  2064  03A5  23A8  3180         	fcall	_AD7758_init
  2065  03A7  2B8F               	goto	l11088
  2066  03A8                     __end_of_main:	
  2067  03A8                     __ptext524:	
  2068 ;; =============== function _Sample_ADE7758 ends ============
  2069                           
  2070                           
  2071 ;; *************** function _AD7758_init *****************
  2072 ;; Defined at:
  2073 ;;		line 121 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  chip            1    wreg     unsigned char 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  chip            1   10[BANK0 ] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;		None               void
  2080 ;; Registers used:
  2081 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 1F/0
  2084 ;;		On exit  : 1F/0
  2085 ;;		Unchanged: FFFE0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2087 ;;      Params:         0       0       0       0       0       0
  2088 ;;      Locals:         0       1       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0
  2090 ;;      Totals:         0       1       0       0       0       0
  2091 ;;Total ram usage:        1 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    4
  2094 ;; This function calls:
  2095 ;;		_AD7758_CS
  2096 ;;		_AD7758_SendData
  2097 ;;		_Delay
  2098 ;; This function is called by:
  2099 ;;		_main
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102  03A8                     _AD7758_init:	
  2103                           
  2104                           ; Regs used in _AD7758_init: [wreg+fsr1l-status,0+pclath+cstack]
  2105                           ;AD7758_init@chip stored from wreg
  2106  03A8  00AA               	movwf	AD7758_init@chip
  2107                           
  2108                           ;ADE7758.c: 123: AD7758_CS(chip, 1);
  2109  03A9  01A8               	clrf	?_AD7758_CS
  2110  03AA  0AA8               	incf	?_AD7758_CS,f
  2111  03AB  2409  3180         	fcall	_AD7758_CS
  2112                           
  2113                           ;ADE7758.c: 126: SendData[0] = 0x40;
  2114                           
  2115                           ;ADE7758.c: 127: AD7758_SendData(0x13,1,chip);
  2116  03AD  24CE  3180         	fcall	PL24	;call to abstracted procedure
  2117  03AF  3013               	movlw	19
  2118  03B0  23CF  3180         	fcall	_AD7758_SendData
  2119                           
  2120                           ;ADE7758.c: 128: Delay(0x20);
  2121  03B2  3020               	movlw	32
  2122  03B3  00A0               	movwf	?_Delay
  2123  03B4  01A1               	clrf	?_Delay+1
  2124  03B5  01A2               	clrf	?_Delay+2
  2125  03B6  01A3               	clrf	?_Delay+3
  2126  03B7  24E1  3180         	fcall	_Delay
  2127                           
  2128                           ;ADE7758.c: 130: SendData[0] = 0x00;
  2129                           
  2130                           ;ADE7758.c: 131: AD7758_SendData(0x16,1,chip);
  2131  03B9  24DB  3180         	fcall	PL26	;call to abstracted procedure
  2132  03BB  3016               	movlw	22
  2133  03BC  23CF  3180         	fcall	_AD7758_SendData
  2134                           
  2135                           ;ADE7758.c: 133: SendData[0] = 0x40;
  2136                           
  2137                           ;ADE7758.c: 134: AD7758_SendData(0x17,1,chip);
  2138  03BE  24CE  3180         	fcall	PL24	;call to abstracted procedure
  2139  03C0  3017               	movlw	23
  2140  03C1  23CF  3180         	fcall	_AD7758_SendData
  2141                           
  2142                           ;ADE7758.c: 136: SendData[0] = 0x00;
  2143                           
  2144                           ;ADE7758.c: 137: AD7758_SendData(0x14,1,chip);
  2145  03C3  24DB  3180         	fcall	PL26	;call to abstracted procedure
  2146  03C5  3014               	movlw	20
  2147  03C6  23CF  3180         	fcall	_AD7758_SendData
  2148                           
  2149                           ;ADE7758.c: 138: FreqPhase[0] = 1;
  2150  03C8  01CF               	clrf	_FreqPhase
  2151  03C9  0ACF               	incf	_FreqPhase,f
  2152                           
  2153                           ;ADE7758.c: 139: FreqPhase[1] = 1;
  2154  03CA  01D0               	clrf	_FreqPhase+1
  2155  03CB  0AD0               	incf	_FreqPhase+1,f
  2156                           
  2157                           ;ADE7758.c: 142: AD7758_CS(chip, 0);
  2158  03CC  01A8               	clrf	?_AD7758_CS
  2159  03CD  082A               	movf	AD7758_init@chip,w
  2160  03CE  2C09               	ljmp	_AD7758_CS
  2161  03CF                     __end_of_AD7758_init:	
  2162  03CF                     __ptext526:	
  2163 ;; =============== function _sendHAHA ends ============
  2164                           
  2165                           
  2166 ;; *************** function _AD7758_SendData *****************
  2167 ;; Defined at:
  2168 ;;		line 90 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  addr            1    wreg     unsigned char 
  2171 ;;  num             1    6[BANK0 ] unsigned char 
  2172 ;;  chip            1    7[BANK0 ] unsigned char 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  addr            1    8[BANK0 ] unsigned char 
  2175 ;;  i               1    9[BANK0 ] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;		None               void
  2178 ;; Registers used:
  2179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 1F/0
  2182 ;;		On exit  : 1F/0
  2183 ;;		Unchanged: FFFE0/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2185 ;;      Params:         0       2       0       0       0       0
  2186 ;;      Locals:         0       2       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0
  2188 ;;      Totals:         0       4       0       0       0       0
  2189 ;;Total ram usage:        4 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    3
  2192 ;; This function calls:
  2193 ;;		_spiSendByte
  2194 ;; This function is called by:
  2195 ;;		_AD7758_init
  2196 ;;		_Sample_ADE7758
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199  03CF                     _AD7758_SendData:	
  2200                           
  2201                           ; Regs used in _AD7758_SendData: [wreg+fsr1l-status,0+pclath+cstack]
  2202                           ;AD7758_SendData@addr stored from wreg
  2203  03CF  00A8               	movwf	AD7758_SendData@addr
  2204                           
  2205                           ;ADE7758.c: 91: uchar i;
  2206                           ;ADE7758.c: 107: spiSendByte(addr|0x80);
  2207  03D0  3880               	iorlw	128
  2208  03D1  23E1  3180         	fcall	_spiSendByte
  2209                           
  2210                           ;ADE7758.c: 108: for(i=0;i<num;i++)
  2211  03D3  01A9               	clrf	AD7758_SendData@i
  2212  03D4                     l10636:	
  2213  03D4  0826               	movf	AD7758_SendData@num,w
  2214  03D5  0229               	subwf	AD7758_SendData@i,w
  2215  03D6  1803               	btfsc	3,0
  2216  03D7  0008               	return
  2217                           
  2218                           ;ADE7758.c: 109: {
  2219                           ;ADE7758.c: 110: spiSendByte (SendData[i]);
  2220  03D8  0829               	movf	AD7758_SendData@i,w
  2221  03D9  3E4A               	addlw	_SendData& (0+255)
  2222  03DA  0086               	movwf	6
  2223  03DB  0187               	clrf	7
  2224  03DC  0801               	movf	1,w
  2225  03DD  23E1  3180         	fcall	_spiSendByte
  2226  03DF  0AA9               	incf	AD7758_SendData@i,f
  2227  03E0  2BD4               	goto	l10636
  2228  03E1                     __end_of_AD7758_SendData:	
  2229  03E1                     __ptext537:	
  2230 ;; =============== function _SPI_Init ends ============
  2231                           
  2232                           
  2233 ;; *************** function _spiSendByte *****************
  2234 ;; Defined at:
  2235 ;;		line 28 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\util.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  spi_data        1    wreg     unsigned char 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  spi_data        1    0[BANK0 ] unsigned char 
  2240 ;;  cc              4    1[BANK0 ] unsigned long 
  2241 ;;  spi_tmp         1    5[BANK0 ] unsigned char 
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      unsigned char 
  2244 ;; Registers used:
  2245 ;;		wreg, status,2, status,0
  2246 ;; Tracked objects:
  2247 ;;		On entry : 1F/0
  2248 ;;		On exit  : 1F/0
  2249 ;;		Unchanged: FFFE0/0
  2250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2251 ;;      Params:         0       0       0       0       0       0
  2252 ;;      Locals:         0       6       0       0       0       0
  2253 ;;      Temps:          0       0       0       0       0       0
  2254 ;;      Totals:         0       6       0       0       0       0
  2255 ;;Total ram usage:        6 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    2
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_AD7758_GetData
  2262 ;;		_AD7758_SendData
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265  03E1                     _spiSendByte:	
  2266                           
  2267                           ; Regs used in _spiSendByte: [wreg+status,2+status,0]
  2268                           ;spiSendByte@spi_data stored from wreg
  2269  03E1  00A0               	movwf	spiSendByte@spi_data
  2270                           
  2271                           ;util.c: 30: ulong cc = 0;
  2272  03E2  01A1               	clrf	spiSendByte@cc
  2273  03E3  01A2               	clrf	spiSendByte@cc+1
  2274  03E4  01A3               	clrf	spiSendByte@cc+2
  2275  03E5  01A4               	clrf	spiSendByte@cc+3
  2276                           
  2277                           ;util.c: 31: SSPBUF=spi_data;
  2278  03E6  0024               	movlb	4	; select bank4
  2279  03E7  0091               	movwf	17	;volatile
  2280                           
  2281                           ;util.c: 32: while((!SSP1IF)&&(cc < 0x0fffffff))
  2282  03E8  2C00               	goto	l10404
  2283  03E9                     l10406:	
  2284  03E9  300F               	movlw	15
  2285  03EA  0224               	subwf	spiSendByte@cc+3,w
  2286  03EB  1D03               	skipz
  2287  03EC  2BF7               	goto	u1205
  2288  03ED  30FF               	movlw	255
  2289  03EE  0223               	subwf	spiSendByte@cc+2,w
  2290  03EF  1D03               	skipz
  2291  03F0  2BF7               	goto	u1205
  2292  03F1  30FF               	movlw	255
  2293  03F2  0222               	subwf	spiSendByte@cc+1,w
  2294  03F3  1D03               	skipz
  2295  03F4  2BF7               	goto	u1205
  2296  03F5  30FF               	movlw	255
  2297  03F6  0221               	subwf	spiSendByte@cc,w
  2298  03F7                     u1205:	
  2299  03F7  1803               	btfsc	3,0
  2300  03F8  2C03               	goto	l10408
  2301                           
  2302                           ;util.c: 33: {
  2303                           ;util.c: 34: cc++;
  2304  03F9  0AA1               	incf	spiSendByte@cc,f
  2305  03FA  1903               	skipnz
  2306  03FB  0AA2               	incf	spiSendByte@cc+1,f
  2307  03FC  1903               	skipnz
  2308  03FD  0AA3               	incf	spiSendByte@cc+2,f
  2309  03FE  1903               	skipnz
  2310  03FF  0AA4               	incf	spiSendByte@cc+3,f
  2311  0400                     l10404:	
  2312  0400  0020               	movlb	0	; select bank0
  2313  0401  1D91               	btfss	17,3
  2314  0402  2BE9               	goto	l10406
  2315  0403                     l10408:	
  2316                           
  2317                           ;util.c: 35: }
  2318                           ;util.c: 36: spi_tmp = SSPBUF;
  2319  0403  0024               	movlb	4	; select bank4
  2320  0404  0811               	movf	17,w	;volatile
  2321  0405  0020               	movlb	0	; select bank0
  2322  0406  00A5               	movwf	spiSendByte@spi_tmp
  2323                           
  2324                           ;util.c: 37: SSP1IF = 0;
  2325  0407  1191               	bcf	17,3
  2326                           
  2327                           ;util.c: 38: return spi_tmp;
  2328  0408  0008               	return
  2329  0409                     __end_of_spiSendByte:	
  2330  0409                     __ptext528:	
  2331 ;; =============== function _AD7758_GetData ends ============
  2332                           
  2333                           
  2334 ;; *************** function _AD7758_CS *****************
  2335 ;; Defined at:
  2336 ;;		line 34 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  chip            1    wreg     unsigned char 
  2339 ;;  enable          1    8[BANK0 ] unsigned char 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;  chip            1    9[BANK0 ] unsigned char 
  2342 ;; Return value:  Size  Location     Type
  2343 ;;		None               void
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0, pclath, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 1F/0
  2348 ;;		On exit  : 1F/0
  2349 ;;		Unchanged: FFFE0/0
  2350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2351 ;;      Params:         0       1       0       0       0       0
  2352 ;;      Locals:         0       1       0       0       0       0
  2353 ;;      Temps:          0       0       0       0       0       0
  2354 ;;      Totals:         0       2       0       0       0       0
  2355 ;;Total ram usage:        2 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    3
  2358 ;; This function calls:
  2359 ;;		_Delay
  2360 ;; This function is called by:
  2361 ;;		_AD7758_init
  2362 ;;		_Sample_ADE7758
  2363 ;;		_AD7758_check_init
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366  0409                     _AD7758_CS:	
  2367                           
  2368                           ; Regs used in _AD7758_CS: [wreg+status,2+status,0+pclath+cstack]
  2369                           ;AD7758_CS@chip stored from wreg
  2370  0409  00A9               	movwf	AD7758_CS@chip
  2371                           
  2372                           ;ADE7758.c: 35: if (enable)
  2373  040A  0828               	movf	AD7758_CS@enable,w
  2374  040B  1903               	btfsc	3,2
  2375  040C  2C18               	goto	l1445
  2376                           
  2377                           ;ADE7758.c: 36: {
  2378                           ;ADE7758.c: 37: if ( 1 == chip )
  2379  040D  0B29               	decfsz	AD7758_CS@chip,w
  2380  040E  2C11               	goto	l10612
  2381                           
  2382                           ;ADE7758.c: 38: {
  2383                           ;ADE7758.c: 39: RB3=0;
  2384  040F  118D               	bcf	13,3
  2385  0410  2C19               	goto	L1
  2386  0411                     l10612:	
  2387                           ;ADE7758.c: 41: }
  2388                           
  2389                           ;ADE7758.c: 40: RB0=1;
  2390                           
  2391                           
  2392                           ;ADE7758.c: 42: else if ( 2 == chip )
  2393  0411  0829               	movf	AD7758_CS@chip,w
  2394  0412  3A02               	xorlw	2
  2395  0413  1D03               	skipz
  2396  0414  2C1A               	goto	l10616
  2397                           
  2398                           ;ADE7758.c: 43: {
  2399                           ;ADE7758.c: 44: RB0=0;
  2400  0415  100D               	bcf	13,0
  2401                           
  2402                           ;ADE7758.c: 45: RB3=1;
  2403  0416  158D               	bsf	13,3
  2404  0417  2C1A               	goto	l10616
  2405  0418                     l1445:	
  2406                           
  2407                           ;ADE7758.c: 48: else
  2408                           ;ADE7758.c: 49: {
  2409                           ;ADE7758.c: 50: RB3=1;
  2410  0418  158D               	bsf	13,3
  2411  0419                     L1:	
  2412                           
  2413                           ;ADE7758.c: 51: RB0=1;
  2414  0419  140D               	bsf	13,0
  2415  041A                     l10616:	
  2416                           
  2417                           ;ADE7758.c: 52: }
  2418                           ;ADE7758.c: 54: Delay(0x01);
  2419  041A  01A0               	clrf	?_Delay
  2420  041B  0AA0               	incf	?_Delay,f
  2421  041C  01A1               	clrf	?_Delay+1
  2422  041D  01A2               	clrf	?_Delay+2
  2423  041E  01A3               	clrf	?_Delay+3
  2424  041F  2CE1               	ljmp	l10390
  2425  0420                     __end_of_AD7758_CS:	
  2426  0420                     __ptext536:	
  2427 ;; =============== function _Initialize ends ============
  2428                           
  2429                           
  2430 ;; *************** function _SPI_Init *****************
  2431 ;; Defined at:
  2432 ;;		line 20 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\main.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;		None
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;		None
  2437 ;; Return value:  Size  Location     Type
  2438 ;;		None               void
  2439 ;; Registers used:
  2440 ;;		wreg
  2441 ;; Tracked objects:
  2442 ;;		On entry : 17F/1
  2443 ;;		On exit  : 17F/0
  2444 ;;		Unchanged: FFE80/0
  2445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2446 ;;      Params:         0       0       0       0       0       0
  2447 ;;      Locals:         0       0       0       0       0       0
  2448 ;;      Temps:          0       0       0       0       0       0
  2449 ;;      Totals:         0       0       0       0       0       0
  2450 ;;Total ram usage:        0 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    2
  2453 ;; This function calls:
  2454 ;;		Nothing
  2455 ;; This function is called by:
  2456 ;;		_main
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459  0420                     _SPI_Init:	
  2460                           
  2461                           ;main.c: 22: SSP1CON1bits.SSPEN=0;
  2462                           
  2463                           ; Regs used in _SPI_Init: [wreg]
  2464  0420  0024               	movlb	4	; select bank4
  2465  0421  1295               	bcf	21,5	;volatile
  2466                           
  2467                           ;main.c: 24: SSP1CON1bits.SSPM0 = 0;
  2468  0422  1015               	bcf	21,0	;volatile
  2469                           
  2470                           ;main.c: 25: SSP1CON1bits.SSPM1 = 1;
  2471  0423  1495               	bsf	21,1	;volatile
  2472                           
  2473                           ;main.c: 26: SSP1CON1bits.SSPM2 = 0;
  2474  0424  1115               	bcf	21,2	;volatile
  2475                           
  2476                           ;main.c: 27: SSP1CON1bits.SSPM3 = 1;
  2477  0425  1595               	bsf	21,3	;volatile
  2478                           
  2479                           ;main.c: 28: SSP1ADD = 3;
  2480  0426  3003               	movlw	3
  2481  0427  0092               	movwf	18	;volatile
  2482                           
  2483                           ;main.c: 30: SSP2STATbits.SMP=1;
  2484  0428  179C               	bsf	28,7	;volatile
  2485                           
  2486                           ;main.c: 32: SSP2STATbits.CKE=1;
  2487  0429  171C               	bsf	28,6	;volatile
  2488                           
  2489                           ;main.c: 33: SSP2CON1bits.CKP = 0;
  2490  042A  121D               	bcf	29,4	;volatile
  2491                           
  2492                           ;main.c: 34: SSP1CON1bits.SSPEN=1;
  2493  042B  1695               	bsf	21,5	;volatile
  2494                           
  2495                           ;main.c: 36: RB3=1;
  2496  042C  0020               	movlb	0	; select bank0
  2497  042D  158D               	bsf	13,3
  2498                           
  2499                           ;main.c: 37: RB0=1;
  2500  042E  140D               	bsf	13,0
  2501  042F  0008               	return
  2502  0430                     __end_of_SPI_Init:	
  2503  0430                     __ptext534:	
  2504 ;; =============== function _rs485_send_data ends ============
  2505                           
  2506                           
  2507 ;; *************** function _modbus_init *****************
  2508 ;; Defined at:
  2509 ;;		line 8 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;		None
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;		None
  2514 ;; Return value:  Size  Location     Type
  2515 ;;		None               void
  2516 ;; Registers used:
  2517 ;;		wreg, status,2
  2518 ;; Tracked objects:
  2519 ;;		On entry : 17F/0
  2520 ;;		On exit  : 17F/0
  2521 ;;		Unchanged: FFE80/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2523 ;;      Params:         0       0       0       0       0       0
  2524 ;;      Locals:         0       0       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0       0
  2526 ;;      Totals:         0       0       0       0       0       0
  2527 ;;Total ram usage:        0 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    2
  2530 ;; This function calls:
  2531 ;;		Nothing
  2532 ;; This function is called by:
  2533 ;;		_main
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536  0430                     _modbus_init:	
  2537                           
  2538                           ;modbus.c: 9: rx_timeout = 11;
  2539                           
  2540                           ; Regs used in _modbus_init: [wreg+status,2]
  2541  0430  300B               	movlw	11
  2542  0431  00D2               	movwf	modbus@rx_timeout	;volatile
  2543                           
  2544                           ;modbus.c: 10: rx_data_counter = 0;
  2545  0432  01F2               	clrf	_rx_data_counter	;volatile
  2546                           
  2547                           ;modbus.c: 11: rx_data_flag = 0;
  2548  0433  117C               	bcf	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
  2549                           
  2550                           ;modbus.c: 13: tx_data_num = 0;
  2551  0434  01F5               	clrf	_tx_data_num	;volatile
  2552                           
  2553                           ;modbus.c: 14: tx_data_index = 0;
  2554  0435  01F4               	clrf	_tx_data_index	;volatile
  2555  0436  30C9               	movlw	201
  2556                           
  2557                           ;modbus.c: 15: tx_timeout_flag = 0;
  2558  0437  11FC               	bcf	_tx_timeout_flag/(0+8),_tx_timeout_flag& (0+7)
  2559                           
  2560                           ;modbus.c: 16: address = 0XC9;
  2561  0438  00D1               	movwf	_address	;volatile
  2562  0439  0008               	return
  2563  043A                     __end_of_modbus_init:	
  2564  043A                     PL3:	
  2565  043A  00AD               	movwf	??_Sample_ADE7758+3
  2566  043B  3000               	movlw	0
  2567  043C  3D2C               	addwfc	??_Sample_ADE7758+2,w
  2568  043D  00AE               	movwf	??_Sample_ADE7758+4
  2569  043E  082D               	movf	??_Sample_ADE7758+3,w
  2570  043F  0086               	movwf	6
  2571  0440  082E               	movf	??_Sample_ADE7758+4,w
  2572  0441  0087               	movwf	7
  2573  0442  082A               	movf	??_Sample_ADE7758,w
  2574  0443  0081               	movwf	1
  2575  0444  0008               	return
  2576  0445                     PL5:	
  2577  0445  0086               	movwf	6
  2578  0446  3000               	movlw	0
  2579  0447  3D35               	addwfc	??_Sample_ADE7758+11,w
  2580  0448  0087               	movwf	7
  2581  0449  0801               	movf	1,w
  2582  044A  00B6               	movwf	??_Sample_ADE7758+12
  2583  044B  01B7               	clrf	??_Sample_ADE7758+13
  2584  044C  01B8               	clrf	??_Sample_ADE7758+14
  2585  044D  01B9               	clrf	??_Sample_ADE7758+15
  2586  044E  0848               	movf	_ReadData+1,w
  2587  044F  00BA               	movwf	??_Sample_ADE7758+16
  2588  0450  01BB               	clrf	??_Sample_ADE7758+17
  2589  0451  01BC               	clrf	??_Sample_ADE7758+18
  2590  0452  01BD               	clrf	??_Sample_ADE7758+19
  2591  0453  07B6               	addwf	??_Sample_ADE7758+12,f
  2592  0454  083B               	movf	??_Sample_ADE7758+17,w
  2593  0455  3DB7               	addwfc	??_Sample_ADE7758+13,f
  2594  0456  083C               	movf	??_Sample_ADE7758+18,w
  2595  0457  3DB8               	addwfc	??_Sample_ADE7758+14,f
  2596  0458  083D               	movf	??_Sample_ADE7758+19,w
  2597  0459  3DB9               	addwfc	??_Sample_ADE7758+15,f
  2598  045A  0836               	movf	??_Sample_ADE7758+12,w
  2599  045B  07AC               	addwf	??_Sample_ADE7758+2,f
  2600  045C  0837               	movf	??_Sample_ADE7758+13,w
  2601  045D  3DAD               	addwfc	??_Sample_ADE7758+3,f
  2602  045E  0838               	movf	??_Sample_ADE7758+14,w
  2603  045F  3DAE               	addwfc	??_Sample_ADE7758+4,f
  2604  0460  0839               	movf	??_Sample_ADE7758+15,w
  2605  0461  3DAF               	addwfc	??_Sample_ADE7758+5,f
  2606  0462  36AF               	lsrf	??_Sample_ADE7758+5,f
  2607  0463  0CAE               	rrf	??_Sample_ADE7758+4,f
  2608  0464  0CAD               	rrf	??_Sample_ADE7758+3,f
  2609  0465  0CAC               	rrf	??_Sample_ADE7758+2,f
  2610  0466  082D               	movf	??_Sample_ADE7758+3,w
  2611  0467  00BF               	movwf	Sample_ADE7758@sum+1
  2612  0468  082C               	movf	??_Sample_ADE7758+2,w
  2613  0469  00BE               	movwf	Sample_ADE7758@sum
  2614  046A  083F               	movf	Sample_ADE7758@sum+1,w
  2615  046B  00AA               	movwf	??_Sample_ADE7758
  2616  046C  3031               	movlw	49
  2617  046D  00A0               	movwf	?___bmul
  2618  046E  0840               	movf	Sample_ADE7758@chip,w
  2619  046F  0008               	return
  2620  0470                     PL8:	
  2621  0470  0086               	movwf	6
  2622  0471  3000               	movlw	0
  2623  0472  3D2B               	addwfc	??_Sample_ADE7758+1,w
  2624  0473  0087               	movwf	7
  2625  0474  0801               	movf	1,w
  2626  0475  00AC               	movwf	??_Sample_ADE7758+2
  2627  0476  01AD               	clrf	??_Sample_ADE7758+3
  2628  0477  01AE               	clrf	??_Sample_ADE7758+4
  2629  0478  01AF               	clrf	??_Sample_ADE7758+5
  2630  0479  0847               	movf	_ReadData,w
  2631  047A  00B0               	movwf	??_Sample_ADE7758+6
  2632  047B  01B1               	clrf	??_Sample_ADE7758+7
  2633  047C  01B2               	clrf	??_Sample_ADE7758+8
  2634  047D  01B3               	clrf	??_Sample_ADE7758+9
  2635  047E  07AC               	addwf	??_Sample_ADE7758+2,f
  2636  047F  0831               	movf	??_Sample_ADE7758+7,w
  2637  0480  3DAD               	addwfc	??_Sample_ADE7758+3,f
  2638  0481  0832               	movf	??_Sample_ADE7758+8,w
  2639  0482  3DAE               	addwfc	??_Sample_ADE7758+4,f
  2640  0483  0833               	movf	??_Sample_ADE7758+9,w
  2641  0484  3DAF               	addwfc	??_Sample_ADE7758+5,f
  2642  0485  082E               	movf	??_Sample_ADE7758+4,w
  2643  0486  00AF               	movwf	??_Sample_ADE7758+5
  2644  0487  082D               	movf	??_Sample_ADE7758+3,w
  2645  0488  00AE               	movwf	??_Sample_ADE7758+4
  2646  0489  082C               	movf	??_Sample_ADE7758+2,w
  2647  048A  00AD               	movwf	??_Sample_ADE7758+3
  2648  048B  3031               	movlw	49
  2649  048C  01AC               	clrf	??_Sample_ADE7758+2
  2650  048D  00A0               	movwf	?___bmul
  2651  048E  0840               	movf	Sample_ADE7758@chip,w
  2652  048F  0008               	return
  2653  0490                     PL9:	
  2654  0490  3EDD               	addlw	221
  2655  0491  00AB               	movwf	??_Sample_ADE7758+1
  2656  0492  3020               	movlw	32
  2657  0493  1803               	skipnc
  2658  0494  0A89               	incf	9,f
  2659  0495  00AC               	movwf	??_Sample_ADE7758+2
  2660  0496  082B               	movf	??_Sample_ADE7758+1,w
  2661  0497  0008               	return
  2662  0498                     PL16:	
  2663  0498  0086               	movwf	6
  2664  0499  3000               	movlw	0
  2665  049A  3D2F               	addwfc	??_Sample_ADE7758+5,w
  2666  049B  0087               	movwf	7
  2667  049C  082A               	movf	??_Sample_ADE7758,w
  2668  049D  0781               	addwf	1,f
  2669  049E  3141               	addfsr 1,1
  2670  049F  082B               	movf	??_Sample_ADE7758+1,w
  2671  04A0  3D81               	addwfc	1,f
  2672  04A1  3141               	addfsr 1,1
  2673  04A2  082C               	movf	??_Sample_ADE7758+2,w
  2674  04A3  3D81               	addwfc	1,f
  2675  04A4  3141               	addfsr 1,1
  2676  04A5  082D               	movf	??_Sample_ADE7758+3,w
  2677  04A6  3D81               	addwfc	1,f
  2678  04A7  0008               	return
  2679  04A8                     PL19:	
  2680  04A8  00AA               	movwf	??_Sample_ADE7758
  2681  04A9  3031               	movlw	49
  2682  04AA  00A0               	movwf	?___bmul
  2683  04AB  0840               	movf	Sample_ADE7758@chip,w
  2684  04AC  0008               	return
  2685  04AD                     PL20:	
  2686  04AD  3EDD               	addlw	221
  2687  04AE  00B4               	movwf	??_Sample_ADE7758+10
  2688  04AF  3020               	movlw	32
  2689  04B0  1803               	skipnc
  2690  04B1  0A89               	incf	9,f
  2691  04B2  00B5               	movwf	??_Sample_ADE7758+11
  2692  04B3  0834               	movf	??_Sample_ADE7758+10,w
  2693  04B4  0008               	return
  2694  04B5                     PL21:	
  2695  04B5  3EDD               	addlw	221
  2696  04B6  00AA               	movwf	??_Sample_ADE7758
  2697  04B7  3020               	movlw	32
  2698  04B8  1803               	skipnc
  2699  04B9  0A89               	incf	9,f
  2700  04BA  00AB               	movwf	??_Sample_ADE7758+1
  2701  04BB  082A               	movf	??_Sample_ADE7758,w
  2702  04BC  0008               	return
  2703  04BD                     PL22:	
  2704  04BD  00AA               	movwf	??_Sample_ADE7758
  2705  04BE  083F               	movf	Sample_ADE7758@sum+1,w
  2706  04BF  00AB               	movwf	??_Sample_ADE7758+1
  2707  04C0  3031               	movlw	49
  2708  04C1  01AC               	clrf	??_Sample_ADE7758+2
  2709  04C2  01AD               	clrf	??_Sample_ADE7758+3
  2710  04C3  00A0               	movwf	?___bmul
  2711  04C4  0840               	movf	Sample_ADE7758@chip,w
  2712  04C5  0008               	return
  2713  04C6                     PL23:	
  2714  04C6  3EDD               	addlw	221
  2715  04C7  00AE               	movwf	??_Sample_ADE7758+4
  2716  04C8  3020               	movlw	32
  2717  04C9  1803               	skipnc
  2718  04CA  0A89               	incf	9,f
  2719  04CB  00AF               	movwf	??_Sample_ADE7758+5
  2720  04CC  082E               	movf	??_Sample_ADE7758+4,w
  2721  04CD  0008               	return
  2722  04CE                     PL24:	
  2723  04CE  3040               	movlw	64
  2724  04CF  00CA               	movwf	_SendData
  2725  04D0  01A6               	clrf	?_AD7758_SendData
  2726  04D1  0AA6               	incf	?_AD7758_SendData,f
  2727  04D2  082A               	movf	AD7758_init@chip,w
  2728  04D3  00A7               	movwf	?_AD7758_SendData+1
  2729  04D4  0008               	return
  2730  04D5                     PL25:	
  2731  04D5  0840               	movf	Sample_ADE7758@chip,w
  2732  04D6  3E4E               	addlw	(_FreqPhase+-1)& (0+255)
  2733  04D7  0086               	movwf	6
  2734  04D8  0187               	clrf	7
  2735  04D9  0801               	movf	1,w
  2736  04DA  0008               	return
  2737  04DB                     PL26:	
  2738  04DB  01CA               	clrf	_SendData
  2739  04DC  01A6               	clrf	?_AD7758_SendData
  2740  04DD  0AA6               	incf	?_AD7758_SendData,f
  2741  04DE  082A               	movf	AD7758_init@chip,w
  2742  04DF  00A7               	movwf	?_AD7758_SendData+1
  2743  04E0  0008               	return
  2744  04E1                     __ptext538:	
  2745 ;; =============== function _spiSendByte ends ============
  2746                           
  2747                           
  2748 ;; *************** function _Delay *****************
  2749 ;; Defined at:
  2750 ;;		line 4 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\util.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;  delay_count_    4    0[BANK0 ] unsigned long 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  delay_count     4    4[BANK0 ] unsigned long 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;		None               void
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, status,0
  2759 ;; Tracked objects:
  2760 ;;		On entry : 1F/0
  2761 ;;		On exit  : 1F/0
  2762 ;;		Unchanged: FFFE0/0
  2763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2764 ;;      Params:         0       4       0       0       0       0
  2765 ;;      Locals:         0       4       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0
  2767 ;;      Totals:         0       8       0       0       0       0
  2768 ;;Total ram usage:        8 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    2
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_AD7758_CS
  2775 ;;		_AD7758_init
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778  04E1                     _Delay:	
  2779  04E1                     l10390:	
  2780                           ; Regs used in _Delay: [wreg+status,2+status,0]
  2781                           
  2782                           
  2783                           ;util.c: 5: ulong delay_count;
  2784                           ;util.c: 6: for( delay_count = 0 ; delay_count < delay_count_max ; delay_count ++ )
  2785  04E1  01A4               	clrf	Delay@delay_count
  2786  04E2  01A5               	clrf	Delay@delay_count+1
  2787  04E3  01A6               	clrf	Delay@delay_count+2
  2788  04E4  01A7               	clrf	Delay@delay_count+3
  2789  04E5                     l10394:	
  2790  04E5  0823               	movf	Delay@delay_count_max+3,w
  2791  04E6  0227               	subwf	Delay@delay_count+3,w
  2792  04E7  1D03               	skipz
  2793  04E8  2CF3               	goto	u1185
  2794  04E9  0822               	movf	Delay@delay_count_max+2,w
  2795  04EA  0226               	subwf	Delay@delay_count+2,w
  2796  04EB  1D03               	skipz
  2797  04EC  2CF3               	goto	u1185
  2798  04ED  0821               	movf	Delay@delay_count_max+1,w
  2799  04EE  0225               	subwf	Delay@delay_count+1,w
  2800  04EF  1D03               	skipz
  2801  04F0  2CF3               	goto	u1185
  2802  04F1  0820               	movf	Delay@delay_count_max,w
  2803  04F2  0224               	subwf	Delay@delay_count,w
  2804  04F3                     u1185:	
  2805  04F3  1803               	btfsc	3,0
  2806  04F4  0008               	return
  2807                           
  2808                           ;util.c: 7: {
  2809                           ;util.c: 8: ;
  2810  04F5  0AA4               	incf	Delay@delay_count,f
  2811  04F6  1903               	skipnz
  2812  04F7  0AA5               	incf	Delay@delay_count+1,f
  2813  04F8  1903               	skipnz
  2814  04F9  0AA6               	incf	Delay@delay_count+2,f
  2815  04FA  1903               	skipnz
  2816  04FB  0AA7               	incf	Delay@delay_count+3,f
  2817  04FC  2CE5               	goto	l10394
  2818  04FD                     __end_of_Delay:	
  2819  04FD                     __ptext535:	
  2820 ;; =============== function _modbus_init ends ============
  2821                           
  2822                           
  2823 ;; *************** function _Initialize *****************
  2824 ;; Defined at:
  2825 ;;		line 45 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\main.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;		None
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;		None               void
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0
  2834 ;; Tracked objects:
  2835 ;;		On entry : 17F/0
  2836 ;;		On exit  : 17F/1
  2837 ;;		Unchanged: FFE80/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2839 ;;      Params:         0       0       0       0       0       0
  2840 ;;      Locals:         0       0       0       0       0       0
  2841 ;;      Temps:          0       0       0       0       0       0
  2842 ;;      Totals:         0       0       0       0       0       0
  2843 ;;Total ram usage:        0 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    2
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_main
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852  04FD                     _Initialize:	
  2853  04FD  3068               	movlw	104
  2854                           
  2855                           ;main.c: 47: GIE=0;
  2856                           
  2857                           ; Regs used in _Initialize: [wreg+status,2+status,0]
  2858  04FE  138B               	bcf	11,7
  2859                           
  2860                           ;main.c: 48: OSCCON = 0x68;
  2861  04FF  0021               	movlb	1	; select bank1
  2862  0500  0099               	movwf	25	;volatile
  2863  0501                     l2957:	
  2864                           ;main.c: 50: {; }
  2865                           
  2866  0501  1E1A               	btfss	26,4
  2867  0502  2D01               	goto	l2957
  2868                           
  2869                           ;main.c: 52: ANSELA = 0x10;
  2870  0503  3010               	movlw	16
  2871  0504  0023               	movlb	3	; select bank3
  2872  0505  008C               	movwf	12	;volatile
  2873                           
  2874                           ;main.c: 53: PORTA = 0;
  2875  0506  0020               	movlb	0	; select bank0
  2876  0507  018C               	clrf	12	;volatile
  2877                           
  2878                           ;main.c: 55: TRISA7 = 0;
  2879  0508  0021               	movlb	1	; select bank1
  2880  0509  138C               	bcf	12,7
  2881                           
  2882                           ;main.c: 56: TRISA6 = 0;
  2883  050A  130C               	bcf	12,6
  2884                           
  2885                           ;main.c: 57: TRISA4 = 1;
  2886  050B  160C               	bsf	12,4
  2887                           
  2888                           ;main.c: 58: TRISA3 = 1;
  2889  050C  158C               	bsf	12,3
  2890                           
  2891                           ;main.c: 59: TRISA2 = 1;
  2892  050D  150C               	bsf	12,2
  2893                           
  2894                           ;main.c: 60: TRISA1 = 1;
  2895  050E  148C               	bsf	12,1
  2896                           
  2897                           ;main.c: 61: TRISA0 = 1;
  2898  050F  140C               	bsf	12,0
  2899                           
  2900                           ;main.c: 63: ANSELB = 0x00;
  2901  0510  0023               	movlb	3	; select bank3
  2902  0511  018D               	clrf	13	;volatile
  2903                           
  2904                           ;main.c: 64: TRISB0 = 0;
  2905  0512  0021               	movlb	1	; select bank1
  2906  0513  30FF               	movlw	255
  2907  0514  100D               	bcf	13,0
  2908                           
  2909                           ;main.c: 65: TRISB1 = 1;
  2910  0515  148D               	bsf	13,1
  2911                           
  2912                           ;main.c: 66: TRISB2 = 1;
  2913  0516  150D               	bsf	13,2
  2914                           
  2915                           ;main.c: 67: TRISB3 = 0;
  2916  0517  118D               	bcf	13,3
  2917                           
  2918                           ;main.c: 68: TRISB4 = 0;
  2919  0518  120D               	bcf	13,4
  2920                           
  2921                           ;main.c: 69: TRISB5 = 0;
  2922  0519  128D               	bcf	13,5
  2923                           
  2924                           ;main.c: 70: TRISB6 = 0;
  2925  051A  130D               	bcf	13,6
  2926  051B  178D               	bsf	13,7
  2927                           
  2928                           ;main.c: 72: WPUB = 0B11111111;
  2929  051C  0024               	movlb	4	; select bank4
  2930  051D  008D               	movwf	13	;volatile
  2931                           
  2932                           ;main.c: 75: ADCON1=0xC0;
  2933  051E  30C0               	movlw	192
  2934  051F  0021               	movlb	1	; select bank1
  2935  0520  009E               	movwf	30	;volatile
  2936                           
  2937                           ;main.c: 78: RXDTSEL = 1;
  2938  0521  0022               	movlb	2	; select bank2
  2939  0522  179D               	bsf	29,7
  2940                           
  2941                           ;main.c: 79: TXCKSEL = 1;
  2942  0523  141E               	bsf	30,0
  2943                           
  2944                           ;main.c: 80: SDO1SEL = 1;
  2945  0524  171D               	bsf	29,6
  2946                           
  2947                           ;main.c: 84: SYNC = 0;
  2948  0525  0023               	movlb	3	; select bank3
  2949  0526  121E               	bcf	30,4
  2950                           
  2951                           ;main.c: 85: BRGH = 1;
  2952  0527  151E               	bsf	30,2
  2953                           
  2954                           ;main.c: 86: BRG16 = 1;
  2955  0528  159F               	bsf	31,3
  2956                           
  2957                           ;main.c: 87: SPBRGH = 0X00;
  2958  0529  019C               	clrf	28	;volatile
  2959                           
  2960                           ;main.c: 88: SPBRGL = 0X67;
  2961  052A  3067               	movlw	103
  2962  052B  009B               	movwf	27	;volatile
  2963                           
  2964                           ;main.c: 90: SYNC = 0;
  2965  052C  121E               	bcf	30,4
  2966                           
  2967                           ;main.c: 91: SPEN = 1;
  2968  052D  179D               	bsf	29,7
  2969                           
  2970                           ;main.c: 92: TX9 = 0;
  2971  052E  131E               	bcf	30,6
  2972                           
  2973                           ;main.c: 93: SCKP = 0;
  2974  052F  121F               	bcf	31,4
  2975                           
  2976                           ;main.c: 94: TXEN = 1;
  2977  0530  169E               	bsf	30,5
  2978                           
  2979                           ;main.c: 95: RCIE = 1;
  2980  0531  0021               	movlb	1	; select bank1
  2981  0532  1691               	bsf	17,5
  2982                           
  2983                           ;main.c: 96: RX9 = 0;
  2984  0533  0023               	movlb	3	; select bank3
  2985  0534  3047               	movlw	71
  2986  0535  131D               	bcf	29,6
  2987                           
  2988                           ;main.c: 97: CREN = 1;
  2989  0536  161D               	bsf	29,4
  2990                           
  2991                           ;main.c: 99: OPTION_REG &= 0B01000111;
  2992  0537  0021               	movlb	1	; select bank1
  2993  0538  0595               	andwf	21,f	;volatile
  2994  0539  303D               	movlw	61
  2995                           
  2996                           ;main.c: 100: TMR0IE = 1;
  2997  053A  168B               	bsf	11,5
  2998                           
  2999                           ;main.c: 101: TMR0IF = 0;
  3000  053B  110B               	bcf	11,2
  3001                           
  3002                           ;main.c: 102: TMR0 = 61;
  3003  053C  0020               	movlb	0	; select bank0
  3004  053D  0095               	movwf	21	;volatile
  3005                           
  3006                           ;main.c: 108: T1CONbits.TMR1CS = 0;
  3007  053E  303F               	movlw	-193
  3008  053F  0598               	andwf	24,f	;volatile
  3009                           
  3010                           ;main.c: 109: T1CONbits.T1CKPS0 = 1;
  3011  0540  1618               	bsf	24,4	;volatile
  3012                           
  3013                           ;main.c: 110: T1CONbits.T1CKPS1 = 1;
  3014  0541  1698               	bsf	24,5	;volatile
  3015  0542  30FF               	movlw	255
  3016                           
  3017                           ;main.c: 111: TMR1GE = 0;
  3018  0543  1399               	bcf	25,7
  3019                           
  3020                           ;main.c: 112: TMR1H=0xff;
  3021  0544  0097               	movwf	23	;volatile
  3022                           
  3023                           ;main.c: 113: TMR1L=0xc1;
  3024  0545  30C1               	movlw	193
  3025  0546  0096               	movwf	22	;volatile
  3026                           
  3027                           ;main.c: 114: TMR1ON=1;
  3028  0547  1418               	bsf	24,0
  3029                           
  3030                           ;main.c: 115: TMR1IF=0;
  3031  0548  1011               	bcf	17,0
  3032                           
  3033                           ;main.c: 116: TMR1IE=1;
  3034  0549  0021               	movlb	1	; select bank1
  3035  054A  1411               	bsf	17,0
  3036                           
  3037                           ;main.c: 118: TXIE = 0;
  3038  054B  1211               	bcf	17,4
  3039                           
  3040                           ;main.c: 122: WDTCONbits.WDTPS = 0B01010;
  3041  054C  0817               	movf	23,w	;volatile
  3042  054D  39C1               	andlw	-63
  3043  054E  3814               	iorlw	20
  3044  054F  0097               	movwf	23	;volatile
  3045                           
  3046                           ;main.c: 125: PEIE = 1;
  3047  0550  170B               	bsf	11,6
  3048                           
  3049                           ;main.c: 126: GIE = 1;
  3050  0551  178B               	bsf	11,7
  3051  0552  0008               	return
  3052  0553                     __end_of_Initialize:	
  3053  0553                     __ptext522:	
  3054 ;; =============== function _modbus_main ends ============
  3055                           
  3056                           
  3057 ;; *************** function _AD7758_check_init *****************
  3058 ;; Defined at:
  3059 ;;		line 288 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\ADE7758.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  chip            1    wreg     unsigned char 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  chip            1   11[BANK0 ] unsigned char 
  3064 ;;  ret             1   10[BANK0 ] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      unsigned char 
  3067 ;; Registers used:
  3068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 1F/0
  3072 ;;		Unchanged: FFFE0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3074 ;;      Params:         0       0       0       0       0       0
  3075 ;;      Locals:         0       2       0       0       0       0
  3076 ;;      Temps:          0       0       0       0       0       0
  3077 ;;      Totals:         0       2       0       0       0       0
  3078 ;;Total ram usage:        2 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    4
  3081 ;; This function calls:
  3082 ;;		_AD7758_CS
  3083 ;;		_AD7758_GetData
  3084 ;; This function is called by:
  3085 ;;		_main
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088  0553                     _AD7758_check_init:	
  3089                           
  3090                           ; Regs used in _AD7758_check_init: [wreg+fsr1l-status,0+pclath+cstack]
  3091                           ;AD7758_check_init@chip stored from wreg
  3092  0553  0020               	movlb	0	; select bank0
  3093  0554  00AB               	movwf	AD7758_check_init@chip
  3094                           
  3095                           ;ADE7758.c: 289: uchar ret = 1;
  3096  0555  01AA               	clrf	AD7758_check_init@ret
  3097  0556  0AAA               	incf	AD7758_check_init@ret,f
  3098                           
  3099                           ;ADE7758.c: 292: AD7758_CS(chip, 1);
  3100  0557  01A8               	clrf	?_AD7758_CS
  3101  0558  0AA8               	incf	?_AD7758_CS,f
  3102  0559  2409  3180         	fcall	_AD7758_CS
  3103                           
  3104                           ;ADE7758.c: 295: AD7758_GetData(0x16,1,chip);
  3105  055B  01A6               	clrf	?_AD7758_GetData
  3106  055C  0AA6               	incf	?_AD7758_GetData,f
  3107  055D  082B               	movf	AD7758_check_init@chip,w
  3108  055E  00A7               	movwf	?_AD7758_GetData+1
  3109  055F  3016               	movlw	22
  3110  0560  233D  3180         	fcall	_AD7758_GetData
  3111                           
  3112                           ;ADE7758.c: 296: if ( 0x00 == ReadData[0])
  3113  0562  08C7               	movf	_ReadData,f
  3114  0563  1D03               	skipz
  3115  0564  2D6F               	goto	l11040
  3116                           
  3117                           ;ADE7758.c: 297: {
  3118                           ;ADE7758.c: 298: AD7758_GetData(0x17,1,chip);
  3119  0565  01A6               	clrf	?_AD7758_GetData
  3120  0566  0AA6               	incf	?_AD7758_GetData,f
  3121  0567  082B               	movf	AD7758_check_init@chip,w
  3122  0568  00A7               	movwf	?_AD7758_GetData+1
  3123  0569  3017               	movlw	23
  3124  056A  233D  3180         	fcall	_AD7758_GetData
  3125                           
  3126                           ;ADE7758.c: 299: if ( 0x40 != ReadData[0])
  3127  056C  0847               	movf	_ReadData,w
  3128  056D  3A40               	xorlw	64
  3129  056E  1D03               	btfss	3,2
  3130  056F                     l11040:	
  3131                           
  3132                           ;ADE7758.c: 300: {
  3133                           ;ADE7758.c: 301: ret = 0;
  3134  056F  01AA               	clrf	AD7758_check_init@ret
  3135                           
  3136                           ;ADE7758.c: 307: }
  3137                           ;ADE7758.c: 310: AD7758_CS(chip, 0);
  3138  0570  01A8               	clrf	?_AD7758_CS
  3139  0571  082B               	movf	AD7758_check_init@chip,w
  3140  0572  2409               	fcall	_AD7758_CS
  3141                           
  3142                           ;ADE7758.c: 313: return ret;
  3143  0573  082A               	movf	AD7758_check_init@ret,w
  3144  0574  0008               	return
  3145  0575                     __end_of_AD7758_check_init:	
  3146  0575                     __ptext521:	
  3147 ;; =============== function _main ends ============
  3148                           
  3149                           
  3150 ;; *************** function _modbus_main *****************
  3151 ;; Defined at:
  3152 ;;		line 166 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;		None
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  REG_Temp        2   37[BANK0 ] unsigned int 
  3157 ;;  CRC_Temp        2   35[BANK0 ] unsigned int 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;		None               void
  3160 ;; Registers used:
  3161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 1E/0
  3165 ;;		Unchanged: FFFE0/0
  3166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3167 ;;      Params:         0       0       0       0       0       0
  3168 ;;      Locals:         0       4       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0
  3170 ;;      Totals:         0       4       0       0       0       0
  3171 ;;Total ram usage:        4 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    4
  3174 ;; This function calls:
  3175 ;;		_ModbusCalcCRC
  3176 ;;		_sendHAHA
  3177 ;; This function is called by:
  3178 ;;		_main
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181  0575                     _modbus_main:	
  3182                           
  3183                           ;modbus.c: 168: unsigned int REG_Temp = 0;
  3184                           
  3185                           ; Regs used in _modbus_main: [wreg-status,0+pclath+cstack]
  3186  0575  0020               	movlb	0	; select bank0
  3187  0576  01C5               	clrf	modbus_main@REG_Temp
  3188  0577  01C6               	clrf	modbus_main@REG_Temp+1
  3189                           
  3190                           ;modbus.c: 169: if(RB0 == 0)
  3191  0578  180D               	btfsc	13,0
  3192  0579  2D7C               	goto	l4466
  3193                           
  3194                           ;modbus.c: 170: RB0 = 1;
  3195  057A  140D               	bsf	13,0
  3196  057B  2D7D               	goto	l11056
  3197  057C                     l4466:	
  3198                           
  3199                           ;modbus.c: 171: else
  3200                           ;modbus.c: 172: RB0=0;
  3201  057C  100D               	bcf	13,0
  3202  057D                     l11056:	
  3203                           
  3204                           ;modbus.c: 174: if(rx_data[0] == address)
  3205  057D  0022               	movlb	2	; select bank2
  3206  057E  0820               	movf	_rx_data^(0+256),w	;volatile
  3207  057F  0020               	movlb	0	; select bank0
  3208  0580  0651               	xorwf	_address,w	;volatile
  3209  0581  1D03               	skipz
  3210  0582  2DB8               	goto	l4468
  3211                           
  3212                           ;modbus.c: 175: {
  3213                           ;modbus.c: 176: ModbusCalcCRC(rx_data,rx_data_counter-2);
  3214  0583  3020               	movlw	_rx_data& (0+255)
  3215  0584  00A0               	movwf	?_ModbusCalcCRC
  3216  0585  3001               	movlw	1
  3217  0586  00A1               	movwf	?_ModbusCalcCRC+1
  3218  0587  0872               	movf	_rx_data_counter,w	;volatile
  3219  0588  3EFE               	addlw	254
  3220  0589  00A2               	movwf	?_ModbusCalcCRC+2
  3221  058A  25BB  3180         	fcall	_ModbusCalcCRC
  3222                           
  3223                           ;modbus.c: 177: CRC_Temp = (rx_data[rx_data_counter-1]<<8)|rx_data[rx_data_counter-2];
  3224  058C  0872               	movf	_rx_data_counter,w
  3225  058D  3E1E               	addlw	(_rx_data+-2)& (0+255)
  3226  058E  0086               	movwf	6
  3227  058F  3001               	movlw	1	; select bank2/3
  3228  0590  0087               	movwf	7
  3229  0591  0872               	movf	_rx_data_counter,w
  3230  0592  3E1F               	addlw	(_rx_data+-1)& (0+255)
  3231  0593  0084               	movwf	4
  3232  0594  3001               	movlw	1	; select bank2/3
  3233  0595  0085               	movwf	5
  3234  0596  0800               	movf	0,w
  3235  0597  00C4               	movwf	modbus_main@CRC_Temp+1
  3236  0598  0801               	movf	1,w
  3237  0599  00C3               	movwf	modbus_main@CRC_Temp
  3238                           
  3239                           ;modbus.c: 178: if(CRC == CRC_Temp)
  3240  059A  0844               	movf	modbus_main@CRC_Temp+1,w
  3241  059B  064E               	xorwf	_CRC+1,w	;volatile
  3242  059C  1D03               	skipz
  3243  059D  2DA0               	goto	u1485
  3244  059E  0843               	movf	modbus_main@CRC_Temp,w
  3245  059F  064D               	xorwf	_CRC,w	;volatile
  3246  05A0                     u1485:	
  3247  05A0  1D03               	skipz
  3248  05A1  2DB8               	goto	l4468
  3249                           
  3250                           ;modbus.c: 179: {
  3251                           ;modbus.c: 180: REG_Temp = (rx_data[2]<<8)|rx_data[3];
  3252  05A2  0022               	movlb	2	; select bank2
  3253  05A3  0822               	movf	(_rx_data^(0+256)+2),w	;volatile
  3254  05A4  0020               	movlb	0	; select bank0
  3255  05A5  00C6               	movwf	modbus_main@REG_Temp+1
  3256  05A6  0022               	movlb	2	; select bank2
  3257  05A7  0823               	movf	(_rx_data^(0+256)+3),w	;volatile
  3258  05A8  0020               	movlb	0	; select bank0
  3259  05A9  00C5               	movwf	modbus_main@REG_Temp
  3260                           
  3261                           ;modbus.c: 181: switch(REG_Temp)
  3262  05AA  2DAE               	goto	l11070
  3263  05AB                     l11066:	
  3264  05AB  25E0  3180         	fcall	_sendHAHA
  3265  05AD  2DB8               	goto	l4468
  3266  05AE                     l11070:	
  3267                           
  3268                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3269                           ; Switch size 1, requested type "space"
  3270                           ; Number of cases is 1, Range of values is 3 to 3
  3271                           ; switch strategies available:
  3272                           ; Name         Instructions Cycles
  3273                           ; simple_byte            4     3 (average)
  3274                           ; direct_byte           11     9 (fixed)
  3275                           ; jumptable            263     9 (fixed)
  3276                           ;	Chosen strategy is simple_byte
  3277  05AE  0846               	movf	modbus_main@REG_Temp+1,w
  3278  05AF  3A03               	xorlw	3	; case 3
  3279  05B0  1903               	skipnz
  3280  05B1  2DB3               	goto	l11130
  3281  05B2  2DB8               	goto	l4468
  3282  05B3                     l11130:	
  3283                           
  3284                           ; Switch size 1, requested type "space"
  3285                           ; Number of cases is 1, Range of values is 132 to 132
  3286                           ; switch strategies available:
  3287                           ; Name         Instructions Cycles
  3288                           ; simple_byte            4     3 (average)
  3289                           ; direct_byte           11     9 (fixed)
  3290                           ; jumptable            263     9 (fixed)
  3291                           ;	Chosen strategy is simple_byte
  3292  05B3  0845               	movf	modbus_main@REG_Temp,w
  3293  05B4  3A84               	xorlw	132	; case 132
  3294  05B5  1903               	skipnz
  3295  05B6  2DAB               	goto	l11066
  3296  05B7  2DB8               	goto	l4468
  3297  05B8                     l4468:	
  3298                           
  3299                           ;modbus.c: 186: }
  3300                           ;modbus.c: 187: }
  3301                           ;modbus.c: 189: rx_data_flag = 0;
  3302  05B8  117C               	bcf	_rx_data_flag/(0+8),_rx_data_flag& (0+7)
  3303                           
  3304                           ;modbus.c: 190: rx_data_counter = 0;
  3305  05B9  01F2               	clrf	_rx_data_counter	;volatile
  3306  05BA  0008               	return
  3307  05BB                     __end_of_modbus_main:	
  3308  05BB                     __ptext532:	
  3309 ;; =============== function ___bmul ends ============
  3310                           
  3311                           
  3312 ;; *************** function _ModbusCalcCRC *****************
  3313 ;; Defined at:
  3314 ;;		line 28 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;  Frame           2    0[BANK0 ] PTR unsigned char 
  3317 ;;		 -> tx_data(64), rx_data(64), 
  3318 ;;  LenFrame        1    2[BANK0 ] unsigned char 
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  j               1    5[BANK0 ] unsigned char 
  3321 ;;  CntByte         1    4[BANK0 ] unsigned char 
  3322 ;;  bitVal          1    3[BANK0 ] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;		None               void
  3325 ;; Registers used:
  3326 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3327 ;; Tracked objects:
  3328 ;;		On entry : 1F/0
  3329 ;;		On exit  : 1F/0
  3330 ;;		Unchanged: FFFE0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3332 ;;      Params:         0       3       0       0       0       0
  3333 ;;      Locals:         0       3       0       0       0       0
  3334 ;;      Temps:          0       0       0       0       0       0
  3335 ;;      Totals:         0       6       0       0       0       0
  3336 ;;Total ram usage:        6 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    2
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_sendHAHA
  3343 ;;		_modbus_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346  05BB                     _ModbusCalcCRC:	
  3347                           
  3348                           ;modbus.c: 29: unsigned char CntByte;
  3349                           ;modbus.c: 30: unsigned char j;
  3350                           ;modbus.c: 31: unsigned char bitVal;
  3351                           ;modbus.c: 32: CRC = 0xFFFF;
  3352                           
  3353                           ; Regs used in _ModbusCalcCRC: [wreg+fsr1l-status,0]
  3354  05BB  30FF               	movlw	255
  3355  05BC  00CD               	movwf	_CRC	;volatile
  3356  05BD  00CE               	movwf	_CRC+1	;volatile
  3357                           
  3358                           ;modbus.c: 33: for(CntByte=0;CntByte<LenFrame;CntByte++)
  3359  05BE  01A4               	clrf	ModbusCalcCRC@CntByte
  3360  05BF                     l9652:	
  3361  05BF  0822               	movf	ModbusCalcCRC@LenFrame,w
  3362  05C0  0224               	subwf	ModbusCalcCRC@CntByte,w
  3363  05C1  1803               	btfsc	3,0
  3364  05C2  0008               	return
  3365                           
  3366                           ;modbus.c: 34: {
  3367                           ;modbus.c: 35: CRC ^= Frame[CntByte];
  3368  05C3  0824               	movf	ModbusCalcCRC@CntByte,w
  3369  05C4  0720               	addwf	ModbusCalcCRC@Frame,w
  3370  05C5  0086               	movwf	6
  3371  05C6  0821               	movf	ModbusCalcCRC@Frame+1,w
  3372  05C7  1803               	skipnc
  3373  05C8  0A89               	incf	9,f
  3374  05C9  0087               	movwf	7
  3375  05CA  0801               	movf	1,w
  3376  05CB  06CD               	xorwf	_CRC,f	;volatile
  3377                           
  3378                           ;modbus.c: 36: for(j=0;j<8;j++)
  3379  05CC  01A5               	clrf	ModbusCalcCRC@j
  3380  05CD                     l9638:	
  3381                           
  3382                           ;modbus.c: 37: {
  3383                           ;modbus.c: 38: bitVal = CRC & 0x0001;
  3384  05CD  084D               	movf	_CRC,w	;volatile
  3385  05CE  00A3               	movwf	ModbusCalcCRC@bitVal
  3386  05CF  3001               	movlw	1
  3387  05D0  05A3               	andwf	ModbusCalcCRC@bitVal,f
  3388                           
  3389                           ;modbus.c: 39: CRC = CRC >> 1;
  3390  05D1  36CE               	lsrf	_CRC+1,f
  3391  05D2  0CCD               	rrf	_CRC,f	;volatile
  3392                           
  3393                           ;modbus.c: 40: if(bitVal == 1)
  3394  05D3  0B23               	decfsz	ModbusCalcCRC@bitVal,w
  3395  05D4  2DD9               	goto	l9646
  3396                           
  3397                           ;modbus.c: 41: CRC ^= 0xA001;
  3398  05D5  3001               	movlw	1
  3399  05D6  06CD               	xorwf	_CRC,f	;volatile
  3400  05D7  30A0               	movlw	160
  3401  05D8  06CE               	xorwf	_CRC+1,f	;volatile
  3402  05D9                     l9646:	
  3403  05D9  3008               	movlw	8
  3404  05DA  0AA5               	incf	ModbusCalcCRC@j,f
  3405  05DB  0225               	subwf	ModbusCalcCRC@j,w
  3406  05DC  1C03               	skipc
  3407  05DD  2DCD               	goto	l9638
  3408  05DE  0AA4               	incf	ModbusCalcCRC@CntByte,f
  3409  05DF  2DBF               	goto	l9652
  3410  05E0                     __end_of_ModbusCalcCRC:	
  3411  05E0                     __ptext525:	
  3412 ;; =============== function _AD7758_init ends ============
  3413                           
  3414                           
  3415 ;; *************** function _sendHAHA *****************
  3416 ;; Defined at:
  3417 ;;		line 47 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  cal_temp        4   31[BANK0 ] volatile unsigned long 
  3422 ;;  cal_temp2       4   27[BANK0 ] volatile unsigned long 
  3423 ;;  cal_temp1       4   23[BANK0 ] volatile unsigned long 
  3424 ;;  cal_temp3       4   17[BANK0 ] volatile unsigned long 
  3425 ;;  idx             2   21[BANK0 ] int 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;		None               void
  3428 ;; Registers used:
  3429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 1F/1
  3433 ;;		Unchanged: FFFE0/0
  3434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3435 ;;      Params:         0       0       0       0       0       0
  3436 ;;      Locals:         0      18       0       0       0       0
  3437 ;;      Temps:          0       4       0       0       0       0
  3438 ;;      Totals:         0      22       0       0       0       0
  3439 ;;Total ram usage:       22 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    3
  3442 ;; This function calls:
  3443 ;;		___lldiv
  3444 ;;		___lmul
  3445 ;;		_ModbusCalcCRC
  3446 ;;		_rs485_send_data
  3447 ;; This function is called by:
  3448 ;;		_modbus_main
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451  05E0                     _sendHAHA:	
  3452                           
  3453                           ;modbus.c: 48: int idx = 0;
  3454                           
  3455                           ; Regs used in _sendHAHA: [wreg+fsr1l-status,0+pclath+cstack]
  3456  05E0  0020               	movlb	0	; select bank0
  3457  05E1  30C9               	movlw	201
  3458  05E2  01B5               	clrf	sendHAHA@idx
  3459  05E3  01B6               	clrf	sendHAHA@idx+1
  3460                           
  3461                           ;modbus.c: 49: volatile unsigned long cal_temp,cal_temp1,cal_temp2,cal_temp3;
  3462                           ;modbus.c: 51: tx_data[idx++] = 0XC9;
  3463  05E4  0021               	movlb	1	; select bank1
  3464  05E5  00A0               	movwf	_tx_data^(0+128)	;volatile
  3465  05E6  0020               	movlb	0	; select bank0
  3466  05E7  0AB5               	incf	sendHAHA@idx,f
  3467                           
  3468                           ;modbus.c: 52: tx_data[idx++] = 0X03;
  3469  05E8  279A  3180         	fcall	PL7	;call to abstracted procedure
  3470  05EA  3003               	movlw	3
  3471  05EB  0187               	clrf	7
  3472  05EC  0081               	movwf	1
  3473  05ED  0AB5               	incf	sendHAHA@idx,f
  3474                           
  3475                           ;modbus.c: 53: tx_data[idx++] = 36;
  3476  05EE  279A  3180         	fcall	PL7	;call to abstracted procedure
  3477  05F0  3024               	movlw	36
  3478  05F1  0081               	movwf	1
  3479  05F2  0AB5               	incf	sendHAHA@idx,f
  3480  05F3  1903               	skipnz
  3481  05F4  0AB6               	incf	sendHAHA@idx+1,f
  3482                           
  3483                           ;modbus.c: 57: cal_temp1 = ADE7758Data[0].PhaseA.Voltage[0];
  3484  05F5  3002               	movlw	2
  3485  05F6  27A0  3180         	fcall	PL10	;call to abstracted procedure
  3486                           
  3487                           ;modbus.c: 58: cal_temp2 = ADE7758Data[0].PhaseA.Voltage[1];
  3488  05F8  3003               	movlw	3
  3489  05F9  3E0E               	addlw	14
  3490  05FA  27D6  3180         	fcall	PL13	;call to abstracted procedure
  3491                           
  3492                           ;modbus.c: 59: cal_temp3 = ADE7758Data[0].PhaseA.Voltage[2];
  3493  05FC  3004               	movlw	4
  3494  05FD  3E0E               	addlw	14
  3495  05FE  0086               	movwf	6
  3496  05FF  3021               	movlw	33
  3497                           
  3498                           ;modbus.c: 60: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3499  0600  2764  3180         	fcall	PL4	;call to abstracted procedure
  3500                           
  3501                           ;modbus.c: 61: cal_temp = cal_temp/359;
  3502  0602  27F5  3180         	fcall	PL18	;call to abstracted procedure
  3503  0604  27E6  3180         	fcall	PL15	;call to abstracted procedure
  3504  0606  26D9  3180         	fcall	___lldiv
  3505  0608  2792  3180         	fcall	PL6	;call to abstracted procedure
  3506                           
  3507                           ;modbus.c: 62: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3508                           
  3509                           ;modbus.c: 63: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3510                           
  3511                           ;modbus.c: 64: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3512                           
  3513                           ;modbus.c: 65: tx_data[idx++] = (unsigned char)(cal_temp);
  3514  060A  2743  3180         	fcall	PL2	;call to abstracted procedure
  3515  060C  1903               	skipnz
  3516  060D  0AB6               	incf	sendHAHA@idx+1,f
  3517                           
  3518                           ;modbus.c: 69: cal_temp1 = ADE7758Data[0].PhaseA.Current[0];
  3519  060E  3005               	movlw	5
  3520  060F  27A0  3180         	fcall	PL10	;call to abstracted procedure
  3521                           
  3522                           ;modbus.c: 70: cal_temp2 = ADE7758Data[0].PhaseA.Current[1];
  3523  0611  3006               	movlw	6
  3524  0612  3E0E               	addlw	14
  3525  0613  27D6  3180         	fcall	PL13	;call to abstracted procedure
  3526                           
  3527                           ;modbus.c: 71: cal_temp3 = ADE7758Data[0].PhaseA.Current[2];
  3528  0615  3007               	movlw	7
  3529  0616  3E0E               	addlw	14
  3530  0617  0086               	movwf	6
  3531  0618  3021               	movlw	33
  3532                           
  3533                           ;modbus.c: 72: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3534  0619  2764  3180         	fcall	PL4	;call to abstracted procedure
  3535                           
  3536                           ;modbus.c: 73: cal_temp = cal_temp/1732;
  3537  061B  27F0  3180         	fcall	PL17	;call to abstracted procedure
  3538  061D  27E6  3180         	fcall	PL15	;call to abstracted procedure
  3539  061F  26D9  3180         	fcall	___lldiv
  3540  0621  2792  3180         	fcall	PL6	;call to abstracted procedure
  3541                           
  3542                           ;modbus.c: 74: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3543                           
  3544                           ;modbus.c: 75: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3545                           
  3546                           ;modbus.c: 76: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3547                           
  3548                           ;modbus.c: 77: tx_data[idx++] = (unsigned char)(cal_temp);
  3549  0623  2743  3180         	fcall	PL2	;call to abstracted procedure
  3550  0625  1903               	skipnz
  3551  0626  0AB6               	incf	sendHAHA@idx+1,f
  3552                           
  3553                           ;modbus.c: 79: cal_temp1 = ADE7758Data[0].PhaseA.Active_Power[0];
  3554  0627  3008               	movlw	8
  3555  0628  27A0  3180         	fcall	PL10	;call to abstracted procedure
  3556                           
  3557                           ;modbus.c: 80: cal_temp2 = ADE7758Data[0].PhaseA.Active_Power[1];
  3558  062A  3009               	movlw	9
  3559  062B  3E0E               	addlw	14
  3560  062C  0086               	movwf	6
  3561  062D  27E1  3180         	fcall	PL14	;call to abstracted procedure
  3562                           
  3563                           ;modbus.c: 81: cal_temp = (unsigned long)((cal_temp1<<8)|(cal_temp2));
  3564                           
  3565                           ;modbus.c: 82: cal_temp = cal_temp*80;
  3566  062F  27B4  3180         	fcall	PL12	;call to abstracted procedure
  3567  0631  2718  3180         	fcall	___lmul
  3568  0633  27AC  3180         	fcall	PL11	;call to abstracted procedure
  3569                           
  3570                           ;modbus.c: 83: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3571                           
  3572                           ;modbus.c: 84: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3573                           
  3574                           ;modbus.c: 85: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3575                           
  3576                           ;modbus.c: 86: tx_data[idx++] = (unsigned char)(cal_temp);
  3577  0635  2743  3180         	fcall	PL2	;call to abstracted procedure
  3578  0637  1903               	skipnz
  3579  0638  0AB6               	incf	sendHAHA@idx+1,f
  3580                           
  3581                           ;modbus.c: 90: cal_temp1 = ADE7758Data[0].PhaseB.Voltage[0];
  3582  0639  3012               	movlw	18
  3583  063A  27A0  3180         	fcall	PL10	;call to abstracted procedure
  3584                           
  3585                           ;modbus.c: 91: cal_temp2 = ADE7758Data[0].PhaseB.Voltage[1];
  3586  063C  3013               	movlw	19
  3587  063D  3E0E               	addlw	14
  3588  063E  27D6  3180         	fcall	PL13	;call to abstracted procedure
  3589                           
  3590                           ;modbus.c: 92: cal_temp3 = ADE7758Data[0].PhaseB.Voltage[2];
  3591  0640  3014               	movlw	20
  3592  0641  3E0E               	addlw	14
  3593  0642  0086               	movwf	6
  3594  0643  3021               	movlw	33
  3595                           
  3596                           ;modbus.c: 93: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3597  0644  2764  3180         	fcall	PL4	;call to abstracted procedure
  3598                           
  3599                           ;modbus.c: 94: cal_temp = cal_temp/359;
  3600  0646  27F5  3180         	fcall	PL18	;call to abstracted procedure
  3601  0648  27E6  3180         	fcall	PL15	;call to abstracted procedure
  3602  064A  26D9  3180         	fcall	___lldiv
  3603  064C  2792  3180         	fcall	PL6	;call to abstracted procedure
  3604                           
  3605                           ;modbus.c: 95: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3606                           
  3607                           ;modbus.c: 96: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3608                           
  3609                           ;modbus.c: 97: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3610                           
  3611                           ;modbus.c: 98: tx_data[idx++] = (unsigned char)(cal_temp);
  3612  064E  2743  3180         	fcall	PL2	;call to abstracted procedure
  3613  0650  1903               	skipnz
  3614  0651  0AB6               	incf	sendHAHA@idx+1,f
  3615                           
  3616                           ;modbus.c: 102: cal_temp1 = ADE7758Data[0].PhaseB.Current[0];
  3617  0652  3015               	movlw	21
  3618  0653  27A0  3180         	fcall	PL10	;call to abstracted procedure
  3619                           
  3620                           ;modbus.c: 103: cal_temp2 = ADE7758Data[0].PhaseB.Current[1];
  3621  0655  3016               	movlw	22
  3622  0656  3E0E               	addlw	14
  3623  0657  27D6  3180         	fcall	PL13	;call to abstracted procedure
  3624                           
  3625                           ;modbus.c: 104: cal_temp3 = ADE7758Data[0].PhaseB.Current[2];
  3626  0659  3017               	movlw	23
  3627  065A  3E0E               	addlw	14
  3628  065B  0086               	movwf	6
  3629  065C  3021               	movlw	33
  3630                           
  3631                           ;modbus.c: 105: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3632  065D  2764  3180         	fcall	PL4	;call to abstracted procedure
  3633                           
  3634                           ;modbus.c: 106: cal_temp = cal_temp/1732;
  3635  065F  27F0  3180         	fcall	PL17	;call to abstracted procedure
  3636  0661  27E6  3180         	fcall	PL15	;call to abstracted procedure
  3637  0663  26D9  3180         	fcall	___lldiv
  3638  0665  2792  3180         	fcall	PL6	;call to abstracted procedure
  3639                           
  3640                           ;modbus.c: 107: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3641                           
  3642                           ;modbus.c: 108: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3643                           
  3644                           ;modbus.c: 109: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3645                           
  3646                           ;modbus.c: 110: tx_data[idx++] = (unsigned char)(cal_temp);
  3647  0667  2743  3180         	fcall	PL2	;call to abstracted procedure
  3648  0669  1903               	skipnz
  3649  066A  0AB6               	incf	sendHAHA@idx+1,f
  3650                           
  3651                           ;modbus.c: 112: cal_temp1 = ADE7758Data[0].PhaseB.Active_Power[0];
  3652  066B  3018               	movlw	24
  3653  066C  27A0  3180         	fcall	PL10	;call to abstracted procedure
  3654                           
  3655                           ;modbus.c: 113: cal_temp2 = ADE7758Data[0].PhaseB.Active_Power[1];
  3656  066E  3019               	movlw	25
  3657  066F  3E0E               	addlw	14
  3658  0670  0086               	movwf	6
  3659  0671  27E1  3180         	fcall	PL14	;call to abstracted procedure
  3660                           
  3661                           ;modbus.c: 114: cal_temp = (unsigned long)((cal_temp1<<8)|(cal_temp2));
  3662                           
  3663                           ;modbus.c: 115: cal_temp = cal_temp*80;
  3664  0673  27B4  3180         	fcall	PL12	;call to abstracted procedure
  3665  0675  2718  3180         	fcall	___lmul
  3666  0677  27AC  3180         	fcall	PL11	;call to abstracted procedure
  3667                           
  3668                           ;modbus.c: 116: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3669                           
  3670                           ;modbus.c: 117: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3671                           
  3672                           ;modbus.c: 118: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3673                           
  3674                           ;modbus.c: 119: tx_data[idx++] = (unsigned char)(cal_temp);
  3675  0679  2743  3180         	fcall	PL2	;call to abstracted procedure
  3676  067B  1903               	skipnz
  3677  067C  0AB6               	incf	sendHAHA@idx+1,f
  3678                           
  3679                           ;modbus.c: 124: cal_temp1 = ADE7758Data[0].PhaseC.Voltage[0];
  3680  067D  3022               	movlw	34
  3681  067E  27A0  3180         	fcall	PL10	;call to abstracted procedure
  3682                           
  3683                           ;modbus.c: 125: cal_temp2 = ADE7758Data[0].PhaseC.Voltage[1];
  3684  0680  3023               	movlw	35
  3685  0681  3E0E               	addlw	14
  3686  0682  27D6  3180         	fcall	PL13	;call to abstracted procedure
  3687                           
  3688                           ;modbus.c: 126: cal_temp3 = ADE7758Data[0].PhaseC.Voltage[2];
  3689  0684  3024               	movlw	36
  3690  0685  3E0E               	addlw	14
  3691  0686  0086               	movwf	6
  3692  0687  3021               	movlw	33
  3693                           
  3694                           ;modbus.c: 127: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3695  0688  2764  3180         	fcall	PL4	;call to abstracted procedure
  3696                           
  3697                           ;modbus.c: 128: cal_temp = cal_temp/359;
  3698  068A  27F5  3180         	fcall	PL18	;call to abstracted procedure
  3699  068C  27E6  3180         	fcall	PL15	;call to abstracted procedure
  3700  068E  26D9  3180         	fcall	___lldiv
  3701  0690  2792  3180         	fcall	PL6	;call to abstracted procedure
  3702                           
  3703                           ;modbus.c: 129: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3704                           
  3705                           ;modbus.c: 130: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3706                           
  3707                           ;modbus.c: 131: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3708                           
  3709                           ;modbus.c: 132: tx_data[idx++] = (unsigned char)(cal_temp);
  3710  0692  2743  3180         	fcall	PL2	;call to abstracted procedure
  3711  0694  1903               	skipnz
  3712  0695  0AB6               	incf	sendHAHA@idx+1,f
  3713                           
  3714                           ;modbus.c: 136: cal_temp1 = ADE7758Data[0].PhaseC.Current[0];
  3715  0696  3025               	movlw	37
  3716  0697  27A0  3180         	fcall	PL10	;call to abstracted procedure
  3717                           
  3718                           ;modbus.c: 137: cal_temp2 = ADE7758Data[0].PhaseC.Current[1];
  3719  0699  3026               	movlw	38
  3720  069A  3E0E               	addlw	14
  3721  069B  27D6  3180         	fcall	PL13	;call to abstracted procedure
  3722                           
  3723                           ;modbus.c: 138: cal_temp3 = ADE7758Data[0].PhaseC.Current[2];
  3724  069D  3027               	movlw	39
  3725  069E  3E0E               	addlw	14
  3726  069F  0086               	movwf	6
  3727  06A0  3021               	movlw	33
  3728                           
  3729                           ;modbus.c: 139: cal_temp = (unsigned long)((cal_temp1<<16)|(cal_temp2<<8)|(cal_temp3));
  3730  06A1  2764  3180         	fcall	PL4	;call to abstracted procedure
  3731                           
  3732                           ;modbus.c: 140: cal_temp = cal_temp/1732;
  3733  06A3  27F0  3180         	fcall	PL17	;call to abstracted procedure
  3734  06A5  27E6  3180         	fcall	PL15	;call to abstracted procedure
  3735  06A7  26D9  3180         	fcall	___lldiv
  3736  06A9  2792  3180         	fcall	PL6	;call to abstracted procedure
  3737                           
  3738                           ;modbus.c: 141: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3739                           
  3740                           ;modbus.c: 142: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3741                           
  3742                           ;modbus.c: 143: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3743                           
  3744                           ;modbus.c: 144: tx_data[idx++] = (unsigned char)(cal_temp);
  3745  06AB  2743  3180         	fcall	PL2	;call to abstracted procedure
  3746  06AD  1903               	skipnz
  3747  06AE  0AB6               	incf	sendHAHA@idx+1,f
  3748                           
  3749                           ;modbus.c: 146: cal_temp1 = ADE7758Data[0].PhaseC.Active_Power[0];
  3750  06AF  3028               	movlw	40
  3751  06B0  27A0  3180         	fcall	PL10	;call to abstracted procedure
  3752                           
  3753                           ;modbus.c: 147: cal_temp2 = ADE7758Data[0].PhaseC.Active_Power[1];
  3754  06B2  3029               	movlw	41
  3755  06B3  3E0E               	addlw	14
  3756  06B4  0086               	movwf	6
  3757  06B5  27E1  3180         	fcall	PL14	;call to abstracted procedure
  3758                           
  3759                           ;modbus.c: 148: cal_temp = (unsigned long)((cal_temp1<<8)|(cal_temp2));
  3760                           
  3761                           ;modbus.c: 149: cal_temp = cal_temp*80;
  3762  06B7  27B4  3180         	fcall	PL12	;call to abstracted procedure
  3763  06B9  2718  3180         	fcall	___lmul
  3764  06BB  27AC  3180         	fcall	PL11	;call to abstracted procedure
  3765                           
  3766                           ;modbus.c: 150: tx_data[idx++] = (unsigned char)(cal_temp>>24);
  3767                           
  3768                           ;modbus.c: 151: tx_data[idx++] = (unsigned char)(cal_temp>>16);
  3769                           
  3770                           ;modbus.c: 152: tx_data[idx++] = (unsigned char)(cal_temp>>8);
  3771                           
  3772                           ;modbus.c: 153: tx_data[idx++] = (unsigned char)(cal_temp);
  3773  06BD  2743  3180         	fcall	PL2	;call to abstracted procedure
  3774  06BF  1903               	skipnz
  3775  06C0  0AB6               	incf	sendHAHA@idx+1,f
  3776                           
  3777                           ;modbus.c: 155: ModbusCalcCRC(tx_data,idx);
  3778  06C1  30A0               	movlw	_tx_data& (0+255)
  3779  06C2  00A0               	movwf	?_ModbusCalcCRC
  3780  06C3  01A1               	clrf	?_ModbusCalcCRC+1
  3781  06C4  0835               	movf	sendHAHA@idx,w
  3782  06C5  00A2               	movwf	?_ModbusCalcCRC+2
  3783  06C6  25BB  3180         	fcall	_ModbusCalcCRC
  3784                           
  3785                           ;modbus.c: 156: tx_data[idx++] = (unsigned char)(CRC);
  3786  06C8  0835               	movf	sendHAHA@idx,w
  3787  06C9  3EA0               	addlw	_tx_data& (0+255)
  3788  06CA  0086               	movwf	6
  3789  06CB  0187               	clrf	7
  3790  06CC  084D               	movf	_CRC,w	;volatile
  3791  06CD  0081               	movwf	1
  3792  06CE  0AB5               	incf	sendHAHA@idx,f
  3793                           
  3794                           ;modbus.c: 157: tx_data[idx++] = (unsigned char)(CRC>>8);
  3795  06CF  279A  3180         	fcall	PL7	;call to abstracted procedure
  3796  06D1  084E               	movf	_CRC+1,w	;volatile
  3797  06D2  0081               	movwf	1
  3798  06D3  0AB5               	incf	sendHAHA@idx,f
  3799  06D4  1903               	skipnz
  3800  06D5  0AB6               	incf	sendHAHA@idx+1,f
  3801                           
  3802                           ;modbus.c: 159: tx_data_num = idx;
  3803  06D6  0835               	movf	sendHAHA@idx,w
  3804  06D7  00F5               	movwf	_tx_data_num	;volatile
  3805                           
  3806                           ;modbus.c: 160: rs485_send_data();
  3807  06D8  2F3D               	ljmp	l10550
  3808  06D9                     __end_of_sendHAHA:	
  3809  06D9                     __ptext529:	
  3810 ;; =============== function _AD7758_CS ends ============
  3811                           
  3812                           
  3813 ;; *************** function ___lldiv *****************
  3814 ;; Defined at:
  3815 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lldiv.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  divisor         4    0[BANK0 ] unsigned long 
  3818 ;;  dividend        4    4[BANK0 ] unsigned long 
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;  quotient        4    8[BANK0 ] unsigned long 
  3821 ;;  counter         1   12[BANK0 ] unsigned char 
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  4    0[BANK0 ] unsigned long 
  3824 ;; Registers used:
  3825 ;;		wreg, status,2, status,0
  3826 ;; Tracked objects:
  3827 ;;		On entry : 1F/0
  3828 ;;		On exit  : 1F/0
  3829 ;;		Unchanged: FFFE0/0
  3830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3831 ;;      Params:         0       8       0       0       0       0
  3832 ;;      Locals:         0       5       0       0       0       0
  3833 ;;      Temps:          0       0       0       0       0       0
  3834 ;;      Totals:         0      13       0       0       0       0
  3835 ;;Total ram usage:       13 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; Hardware stack levels required when called:    2
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_sendHAHA
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844  06D9                     ___lldiv:	
  3845                           
  3846                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3847  06D9  01A8               	clrf	___lldiv@quotient
  3848  06DA  01A9               	clrf	___lldiv@quotient+1
  3849  06DB  01AA               	clrf	___lldiv@quotient+2
  3850  06DC  01AB               	clrf	___lldiv@quotient+3
  3851  06DD  0823               	movf	___lldiv@divisor+3,w
  3852  06DE  0422               	iorwf	___lldiv@divisor+2,w
  3853  06DF  0421               	iorwf	___lldiv@divisor+1,w
  3854  06E0  0420               	iorwf	___lldiv@divisor,w
  3855  06E1  1903               	skipnz
  3856  06E2  2F0F               	goto	l10602
  3857  06E3  01AC               	clrf	___lldiv@counter
  3858  06E4                     L2:	
  3859  06E4  0AAC               	incf	___lldiv@counter,f
  3860  06E5  1BA3               	btfsc	___lldiv@divisor+3,7
  3861  06E6  2EEC               	goto	l10590
  3862  06E7  35A0               	lslf	___lldiv@divisor,f
  3863  06E8  0DA1               	rlf	___lldiv@divisor+1,f
  3864  06E9  0DA2               	rlf	___lldiv@divisor+2,f
  3865  06EA  0DA3               	rlf	___lldiv@divisor+3,f
  3866  06EB  2EE4               	goto	L2
  3867  06EC                     l10590:	
  3868  06EC  35A8               	lslf	___lldiv@quotient,f
  3869  06ED  0DA9               	rlf	___lldiv@quotient+1,f
  3870  06EE  0DAA               	rlf	___lldiv@quotient+2,f
  3871  06EF  0DAB               	rlf	___lldiv@quotient+3,f
  3872  06F0  0823               	movf	___lldiv@divisor+3,w
  3873  06F1  0227               	subwf	___lldiv@dividend+3,w
  3874  06F2  1D03               	skipz
  3875  06F3  2EFE               	goto	u1285
  3876  06F4  0822               	movf	___lldiv@divisor+2,w
  3877  06F5  0226               	subwf	___lldiv@dividend+2,w
  3878  06F6  1D03               	skipz
  3879  06F7  2EFE               	goto	u1285
  3880  06F8  0821               	movf	___lldiv@divisor+1,w
  3881  06F9  0225               	subwf	___lldiv@dividend+1,w
  3882  06FA  1D03               	skipz
  3883  06FB  2EFE               	goto	u1285
  3884  06FC  0820               	movf	___lldiv@divisor,w
  3885  06FD  0224               	subwf	___lldiv@dividend,w
  3886  06FE                     u1285:	
  3887  06FE  1C03               	skipc
  3888  06FF  2F09               	goto	l10598
  3889  0700  0820               	movf	___lldiv@divisor,w
  3890  0701  02A4               	subwf	___lldiv@dividend,f
  3891  0702  0821               	movf	___lldiv@divisor+1,w
  3892  0703  3BA5               	subwfb	___lldiv@dividend+1,f
  3893  0704  0822               	movf	___lldiv@divisor+2,w
  3894  0705  3BA6               	subwfb	___lldiv@dividend+2,f
  3895  0706  0823               	movf	___lldiv@divisor+3,w
  3896  0707  3BA7               	subwfb	___lldiv@dividend+3,f
  3897  0708  1428               	bsf	___lldiv@quotient,0
  3898  0709                     l10598:	
  3899  0709  36A3               	lsrf	___lldiv@divisor+3,f
  3900  070A  0CA2               	rrf	___lldiv@divisor+2,f
  3901  070B  0CA1               	rrf	___lldiv@divisor+1,f
  3902  070C  0CA0               	rrf	___lldiv@divisor,f
  3903  070D  0BAC               	decfsz	___lldiv@counter,f
  3904  070E  2EEC               	goto	l10590
  3905  070F                     l10602:	
  3906  070F  082B               	movf	___lldiv@quotient+3,w
  3907  0710  00A3               	movwf	?___lldiv+3
  3908  0711  082A               	movf	___lldiv@quotient+2,w
  3909  0712  00A2               	movwf	?___lldiv+2
  3910  0713  0829               	movf	___lldiv@quotient+1,w
  3911  0714  00A1               	movwf	?___lldiv+1
  3912  0715  0828               	movf	___lldiv@quotient,w
  3913  0716  00A0               	movwf	?___lldiv
  3914  0717  0008               	return
  3915  0718                     __end_of___lldiv:	
  3916  0718                     __ptext530:	
  3917 ;; =============== function ___lldiv ends ============
  3918                           
  3919                           
  3920 ;; *************** function ___lmul *****************
  3921 ;; Defined at:
  3922 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lmul.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3925 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  product         4    8[BANK0 ] unsigned long 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  4    0[BANK0 ] unsigned long 
  3930 ;; Registers used:
  3931 ;;		wreg, status,2, status,0
  3932 ;; Tracked objects:
  3933 ;;		On entry : 1F/0
  3934 ;;		On exit  : 1F/0
  3935 ;;		Unchanged: FFFE0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3937 ;;      Params:         0       8       0       0       0       0
  3938 ;;      Locals:         0       4       0       0       0       0
  3939 ;;      Temps:          0       0       0       0       0       0
  3940 ;;      Totals:         0      12       0       0       0       0
  3941 ;;Total ram usage:       12 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:    2
  3944 ;; This function calls:
  3945 ;;		Nothing
  3946 ;; This function is called by:
  3947 ;;		_sendHAHA
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950  0718                     ___lmul:	
  3951                           
  3952                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3953  0718  01A8               	clrf	___lmul@product
  3954  0719  01A9               	clrf	___lmul@product+1
  3955  071A  01AA               	clrf	___lmul@product+2
  3956  071B  01AB               	clrf	___lmul@product+3
  3957  071C                     l7349:	
  3958  071C  1C20               	btfss	___lmul@multiplier,0
  3959  071D  2F26               	goto	l10572
  3960  071E  0824               	movf	___lmul@multiplicand,w
  3961  071F  07A8               	addwf	___lmul@product,f
  3962  0720  0825               	movf	___lmul@multiplicand+1,w
  3963  0721  3DA9               	addwfc	___lmul@product+1,f
  3964  0722  0826               	movf	___lmul@multiplicand+2,w
  3965  0723  3DAA               	addwfc	___lmul@product+2,f
  3966  0724  0827               	movf	___lmul@multiplicand+3,w
  3967  0725  3DAB               	addwfc	___lmul@product+3,f
  3968  0726                     l10572:	
  3969  0726  35A4               	lslf	___lmul@multiplicand,f
  3970  0727  0DA5               	rlf	___lmul@multiplicand+1,f
  3971  0728  0DA6               	rlf	___lmul@multiplicand+2,f
  3972  0729  0DA7               	rlf	___lmul@multiplicand+3,f
  3973  072A  36A3               	lsrf	___lmul@multiplier+3,f
  3974  072B  0CA2               	rrf	___lmul@multiplier+2,f
  3975  072C  0CA1               	rrf	___lmul@multiplier+1,f
  3976  072D  0CA0               	rrf	___lmul@multiplier,f
  3977  072E  0823               	movf	___lmul@multiplier+3,w
  3978  072F  0422               	iorwf	___lmul@multiplier+2,w
  3979  0730  0421               	iorwf	___lmul@multiplier+1,w
  3980  0731  0420               	iorwf	___lmul@multiplier,w
  3981  0732  1D03               	skipz
  3982  0733  2F1C               	goto	l7349
  3983  0734  082B               	movf	___lmul@product+3,w
  3984  0735  00A3               	movwf	?___lmul+3
  3985  0736  082A               	movf	___lmul@product+2,w
  3986  0737  00A2               	movwf	?___lmul+2
  3987  0738  0829               	movf	___lmul@product+1,w
  3988  0739  00A1               	movwf	?___lmul+1
  3989  073A  0828               	movf	___lmul@product,w
  3990  073B  00A0               	movwf	?___lmul
  3991  073C  0008               	return
  3992  073D                     __end_of___lmul:	
  3993  073D                     __ptext533:	
  3994 ;; =============== function _ModbusCalcCRC ends ============
  3995                           
  3996                           
  3997 ;; *************** function _rs485_send_data *****************
  3998 ;; Defined at:
  3999 ;;		line 20 in file "C:\Users\jeqi\Documents\GD_Power_Meter\Docs\FW\PowerSupply\modbus.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;		None               void
  4006 ;; Registers used:
  4007 ;;		None
  4008 ;; Tracked objects:
  4009 ;;		On entry : 1F/0
  4010 ;;		On exit  : 1F/1
  4011 ;;		Unchanged: FFFE0/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4013 ;;      Params:         0       0       0       0       0       0
  4014 ;;      Locals:         0       0       0       0       0       0
  4015 ;;      Temps:          0       0       0       0       0       0
  4016 ;;      Totals:         0       0       0       0       0       0
  4017 ;;Total ram usage:        0 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    2
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_sendHAHA
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026  073D                     _rs485_send_data:	
  4027  073D                     l10550:	
  4028                           ; Regs used in _rs485_send_data: []
  4029                           
  4030                           
  4031                           ;modbus.c: 21: RA7 = 1;
  4032  073D  178C               	bsf	12,7
  4033                           
  4034                           ;modbus.c: 22: TXEN=1;
  4035  073E  0023               	movlb	3	; select bank3
  4036  073F  169E               	bsf	30,5
  4037                           
  4038                           ;modbus.c: 23: TXIE = 1;
  4039  0740  0021               	movlb	1	; select bank1
  4040  0741  1611               	bsf	17,4
  4041  0742  0008               	return
  4042  0743                     __end_of_rs485_send_data:	
  4043  0743                     PL2:	
  4044  0743  00BF               	movwf	sendHAHA@cal_temp	;volatile
  4045  0744  0835               	movf	sendHAHA@idx,w
  4046  0745  3EA0               	addlw	_tx_data& (0+255)
  4047  0746  0086               	movwf	6
  4048  0747  0187               	clrf	7
  4049  0748  0842               	movf	sendHAHA@cal_temp+3,w	;volatile
  4050  0749  0081               	movwf	1
  4051  074A  0AB5               	incf	sendHAHA@idx,f
  4052  074B  1903               	skipnz
  4053  074C  0AB6               	incf	sendHAHA@idx+1,f
  4054  074D  0835               	movf	sendHAHA@idx,w
  4055  074E  3EA0               	addlw	_tx_data& (0+255)
  4056  074F  0086               	movwf	6
  4057  0750  0841               	movf	sendHAHA@cal_temp+2,w	;volatile
  4058  0751  0081               	movwf	1
  4059  0752  0AB5               	incf	sendHAHA@idx,f
  4060  0753  1903               	skipnz
  4061  0754  0AB6               	incf	sendHAHA@idx+1,f
  4062  0755  0835               	movf	sendHAHA@idx,w
  4063  0756  3EA0               	addlw	_tx_data& (0+255)
  4064  0757  0086               	movwf	6
  4065  0758  0840               	movf	sendHAHA@cal_temp+1,w	;volatile
  4066  0759  0081               	movwf	1
  4067  075A  0AB5               	incf	sendHAHA@idx,f
  4068  075B  1903               	skipnz
  4069  075C  0AB6               	incf	sendHAHA@idx+1,f
  4070  075D  0835               	movf	sendHAHA@idx,w
  4071  075E  3EA0               	addlw	_tx_data& (0+255)
  4072  075F  0086               	movwf	6
  4073  0760  083F               	movf	sendHAHA@cal_temp,w	;volatile
  4074  0761  0081               	movwf	1
  4075  0762  0AB5               	incf	sendHAHA@idx,f
  4076  0763  0008               	return
  4077  0764                     PL4:	
  4078  0764  1803               	skipnc
  4079  0765  3022               	movlw	34
  4080  0766  0087               	movwf	7
  4081  0767  0801               	movf	1,w
  4082  0768  00B1               	movwf	sendHAHA@cal_temp3	;volatile
  4083  0769  01B2               	clrf	sendHAHA@cal_temp3+1	;volatile
  4084  076A  01B3               	clrf	sendHAHA@cal_temp3+2	;volatile
  4085  076B  01B4               	clrf	sendHAHA@cal_temp3+3	;volatile
  4086  076C  0838               	movf	sendHAHA@cal_temp1+1,w	;volatile
  4087  076D  00C2               	movwf	sendHAHA@cal_temp+3	;volatile
  4088  076E  0837               	movf	sendHAHA@cal_temp1,w	;volatile
  4089  076F  00C1               	movwf	sendHAHA@cal_temp+2	;volatile
  4090  0770  01BF               	clrf	sendHAHA@cal_temp	;volatile
  4091  0771  01C0               	clrf	sendHAHA@cal_temp+1	;volatile
  4092  0772  083B               	movf	sendHAHA@cal_temp2,w	;volatile
  4093  0773  00AD               	movwf	??_sendHAHA
  4094  0774  083C               	movf	sendHAHA@cal_temp2+1,w	;volatile
  4095  0775  00AE               	movwf	??_sendHAHA+1
  4096  0776  083D               	movf	sendHAHA@cal_temp2+2,w	;volatile
  4097  0777  00AF               	movwf	??_sendHAHA+2
  4098  0778  083E               	movf	sendHAHA@cal_temp2+3,w	;volatile
  4099  0779  00B0               	movwf	??_sendHAHA+3
  4100  077A  082F               	movf	??_sendHAHA+2,w
  4101  077B  00B0               	movwf	??_sendHAHA+3
  4102  077C  082E               	movf	??_sendHAHA+1,w
  4103  077D  00AF               	movwf	??_sendHAHA+2
  4104  077E  082D               	movf	??_sendHAHA,w
  4105  077F  00AE               	movwf	??_sendHAHA+1
  4106  0780  01AD               	clrf	??_sendHAHA
  4107  0781  082D               	movf	??_sendHAHA,w
  4108  0782  04BF               	iorwf	sendHAHA@cal_temp,f	;volatile
  4109  0783  082E               	movf	??_sendHAHA+1,w
  4110  0784  04C0               	iorwf	sendHAHA@cal_temp+1,f	;volatile
  4111  0785  082F               	movf	??_sendHAHA+2,w
  4112  0786  04C1               	iorwf	sendHAHA@cal_temp+2,f	;volatile
  4113  0787  0830               	movf	??_sendHAHA+3,w
  4114  0788  04C2               	iorwf	sendHAHA@cal_temp+3,f	;volatile
  4115  0789  0831               	movf	sendHAHA@cal_temp3,w	;volatile
  4116  078A  04BF               	iorwf	sendHAHA@cal_temp,f	;volatile
  4117  078B  0832               	movf	sendHAHA@cal_temp3+1,w	;volatile
  4118  078C  04C0               	iorwf	sendHAHA@cal_temp+1,f	;volatile
  4119  078D  0833               	movf	sendHAHA@cal_temp3+2,w	;volatile
  4120  078E  04C1               	iorwf	sendHAHA@cal_temp+2,f	;volatile
  4121  078F  0834               	movf	sendHAHA@cal_temp3+3,w	;volatile
  4122  0790  04C2               	iorwf	sendHAHA@cal_temp+3,f	;volatile
  4123  0791  0008               	return
  4124  0792                     PL6:	
  4125  0792  0823               	movf	?___lldiv+3,w
  4126  0793  00C2               	movwf	sendHAHA@cal_temp+3	;volatile
  4127  0794  0822               	movf	?___lldiv+2,w
  4128  0795  00C1               	movwf	sendHAHA@cal_temp+2	;volatile
  4129  0796  0821               	movf	?___lldiv+1,w
  4130  0797  00C0               	movwf	sendHAHA@cal_temp+1	;volatile
  4131  0798  0820               	movf	?___lldiv,w
  4132  0799  0008               	return
  4133  079A                     PL7:	
  4134  079A  1903               	skipnz
  4135  079B  0AB6               	incf	sendHAHA@idx+1,f
  4136  079C  0835               	movf	sendHAHA@idx,w
  4137  079D  3EA0               	addlw	_tx_data& (0+255)
  4138  079E  0086               	movwf	6
  4139  079F  0008               	return
  4140  07A0                     PL10:	
  4141  07A0  3E0E               	addlw	14
  4142  07A1  0086               	movwf	6
  4143  07A2  3021               	movlw	33
  4144  07A3  1803               	skipnc
  4145  07A4  3022               	movlw	34
  4146  07A5  0087               	movwf	7
  4147  07A6  0801               	movf	1,w
  4148  07A7  00B7               	movwf	sendHAHA@cal_temp1	;volatile
  4149  07A8  01B8               	clrf	sendHAHA@cal_temp1+1	;volatile
  4150  07A9  01B9               	clrf	sendHAHA@cal_temp1+2	;volatile
  4151  07AA  01BA               	clrf	sendHAHA@cal_temp1+3	;volatile
  4152  07AB  0008               	return
  4153  07AC                     PL11:	
  4154  07AC  0823               	movf	?___lmul+3,w
  4155  07AD  00C2               	movwf	sendHAHA@cal_temp+3	;volatile
  4156  07AE  0822               	movf	?___lmul+2,w
  4157  07AF  00C1               	movwf	sendHAHA@cal_temp+2	;volatile
  4158  07B0  0821               	movf	?___lmul+1,w
  4159  07B1  00C0               	movwf	sendHAHA@cal_temp+1	;volatile
  4160  07B2  0820               	movf	?___lmul,w
  4161  07B3  0008               	return
  4162  07B4                     PL12:	
  4163  07B4  0801               	movf	1,w
  4164  07B5  00BB               	movwf	sendHAHA@cal_temp2	;volatile
  4165  07B6  01BC               	clrf	sendHAHA@cal_temp2+1	;volatile
  4166  07B7  01BD               	clrf	sendHAHA@cal_temp2+2	;volatile
  4167  07B8  01BE               	clrf	sendHAHA@cal_temp2+3	;volatile
  4168  07B9  0839               	movf	sendHAHA@cal_temp1+2,w	;volatile
  4169  07BA  00C2               	movwf	sendHAHA@cal_temp+3	;volatile
  4170  07BB  0838               	movf	sendHAHA@cal_temp1+1,w	;volatile
  4171  07BC  00C1               	movwf	sendHAHA@cal_temp+2	;volatile
  4172  07BD  0837               	movf	sendHAHA@cal_temp1,w	;volatile
  4173  07BE  00C0               	movwf	sendHAHA@cal_temp+1	;volatile
  4174  07BF  01BF               	clrf	sendHAHA@cal_temp	;volatile
  4175  07C0  083B               	movf	sendHAHA@cal_temp2,w	;volatile
  4176  07C1  04BF               	iorwf	sendHAHA@cal_temp,f	;volatile
  4177  07C2  083C               	movf	sendHAHA@cal_temp2+1,w	;volatile
  4178  07C3  04C0               	iorwf	sendHAHA@cal_temp+1,f	;volatile
  4179  07C4  083D               	movf	sendHAHA@cal_temp2+2,w	;volatile
  4180  07C5  04C1               	iorwf	sendHAHA@cal_temp+2,f	;volatile
  4181  07C6  083E               	movf	sendHAHA@cal_temp2+3,w	;volatile
  4182  07C7  04C2               	iorwf	sendHAHA@cal_temp+3,f	;volatile
  4183  07C8  3050               	movlw	80
  4184  07C9  00A0               	movwf	?___lmul
  4185  07CA  01A1               	clrf	?___lmul+1
  4186  07CB  01A2               	clrf	?___lmul+2
  4187  07CC  01A3               	clrf	?___lmul+3
  4188  07CD  0842               	movf	sendHAHA@cal_temp+3,w	;volatile
  4189  07CE  00A7               	movwf	?___lmul+7
  4190  07CF  0841               	movf	sendHAHA@cal_temp+2,w	;volatile
  4191  07D0  00A6               	movwf	?___lmul+6
  4192  07D1  0840               	movf	sendHAHA@cal_temp+1,w	;volatile
  4193  07D2  00A5               	movwf	?___lmul+5
  4194  07D3  083F               	movf	sendHAHA@cal_temp,w	;volatile
  4195  07D4  00A4               	movwf	?___lmul+4
  4196  07D5  0008               	return
  4197  07D6                     PL13:	
  4198  07D6  0086               	movwf	6
  4199  07D7  3021               	movlw	33
  4200  07D8  1803               	skipnc
  4201  07D9  3022               	movlw	34
  4202  07DA  0087               	movwf	7
  4203  07DB  0801               	movf	1,w
  4204  07DC  00BB               	movwf	sendHAHA@cal_temp2	;volatile
  4205  07DD  01BC               	clrf	sendHAHA@cal_temp2+1	;volatile
  4206  07DE  01BD               	clrf	sendHAHA@cal_temp2+2	;volatile
  4207  07DF  01BE               	clrf	sendHAHA@cal_temp2+3	;volatile
  4208  07E0  0008               	return
  4209  07E1                     PL14:	
  4210  07E1  3021               	movlw	33
  4211  07E2  1803               	skipnc
  4212  07E3  3022               	movlw	34
  4213  07E4  0087               	movwf	7
  4214  07E5  0008               	return
  4215  07E6                     PL15:	
  4216  07E6  00A0               	movwf	?___lldiv
  4217  07E7  0842               	movf	sendHAHA@cal_temp+3,w	;volatile
  4218  07E8  00A7               	movwf	?___lldiv+7
  4219  07E9  0841               	movf	sendHAHA@cal_temp+2,w	;volatile
  4220  07EA  00A6               	movwf	?___lldiv+6
  4221  07EB  0840               	movf	sendHAHA@cal_temp+1,w	;volatile
  4222  07EC  00A5               	movwf	?___lldiv+5
  4223  07ED  083F               	movf	sendHAHA@cal_temp,w	;volatile
  4224  07EE  00A4               	movwf	?___lldiv+4
  4225  07EF  0008               	return
  4226  07F0                     PL17:	
  4227  07F0  3006               	movlw	6
  4228  07F1  01A3               	clrf	?___lldiv+3
  4229  07F2  01A2               	clrf	?___lldiv+2
  4230  07F3  00A1               	movwf	?___lldiv+1
  4231  07F4  34C4               	retlw	196
  4232  07F5                     PL18:	
  4233  07F5  3001               	movlw	1
  4234  07F6  01A3               	clrf	?___lldiv+3
  4235  07F7  01A2               	clrf	?___lldiv+2
  4236  07F8  00A1               	movwf	?___lldiv+1
  4237  07F9  3467               	retlw	103
  4238                           
  4239                           	psect	text540
  4240  0FE0                     __ptext540:	
  4241 ;; =============== function _isr ends ============
  4242                           
  4243                           
  4244 ;; *************** function ___lwmod *****************
  4245 ;; Defined at:
  4246 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwmod.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  divisor         2    0[COMMON] unsigned int 
  4249 ;;  dividend        2    2[COMMON] unsigned int 
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  counter         1    4[COMMON] unsigned char 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  2    0[COMMON] unsigned int 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2, status,0
  4256 ;; Tracked objects:
  4257 ;;		On entry : 1F/0
  4258 ;;		On exit  : 1F/0
  4259 ;;		Unchanged: FFFE0/0
  4260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4261 ;;      Params:         4       0       0       0       0       0
  4262 ;;      Locals:         1       0       0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0       0
  4264 ;;      Totals:         5       0       0       0       0       0
  4265 ;;Total ram usage:        5 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_isr
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273  0FE0                     ___lwmod:	
  4274                           
  4275                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4276  0FE0  0877               	movf	___lwmod@divisor+1,w
  4277  0FE1  0476               	iorwf	___lwmod@divisor,w
  4278  0FE2  1903               	skipnz
  4279  0FE3  2FFB               	goto	i1l9702
  4280  0FE4  01FA               	clrf	___lwmod@counter
  4281  0FE5                     L3:	
  4282  0FE5  0AFA               	incf	___lwmod@counter,f
  4283  0FE6  1BF7               	btfsc	___lwmod@divisor+1,7
  4284  0FE7  2FEB               	goto	i1l9694
  4285  0FE8  35F6               	lslf	___lwmod@divisor,f
  4286  0FE9  0DF7               	rlf	___lwmod@divisor+1,f
  4287  0FEA  2FE5               	goto	L3
  4288  0FEB                     i1l9694:	
  4289  0FEB  0877               	movf	___lwmod@divisor+1,w
  4290  0FEC  0279               	subwf	___lwmod@dividend+1,w
  4291  0FED  1D03               	skipz
  4292  0FEE  2FF1               	goto	u87_25
  4293  0FEF  0876               	movf	___lwmod@divisor,w
  4294  0FF0  0278               	subwf	___lwmod@dividend,w
  4295  0FF1                     u87_25:	
  4296  0FF1  1C03               	skipc
  4297  0FF2  2FF7               	goto	i1l9698
  4298  0FF3  0876               	movf	___lwmod@divisor,w
  4299  0FF4  02F8               	subwf	___lwmod@dividend,f
  4300  0FF5  0877               	movf	___lwmod@divisor+1,w
  4301  0FF6  3BF9               	subwfb	___lwmod@dividend+1,f
  4302  0FF7                     i1l9698:	
  4303  0FF7  36F7               	lsrf	___lwmod@divisor+1,f
  4304  0FF8  0CF6               	rrf	___lwmod@divisor,f
  4305  0FF9  0BFA               	decfsz	___lwmod@counter,f
  4306  0FFA  2FEB               	goto	i1l9694
  4307  0FFB                     i1l9702:	
  4308  0FFB  0879               	movf	___lwmod@dividend+1,w
  4309  0FFC  00F7               	movwf	?___lwmod+1
  4310  0FFD  0878               	movf	___lwmod@dividend,w
  4311  0FFE  00F6               	movwf	?___lwmod
  4312  0FFF  0008               	return
  4313  1000                     __end_of___lwmod:	
  4314                           
  4315                           	psect	text541
  4316  0000                     __ptext541:	
  4317 ;; =============== function ___lwmod ends ============
  4318                           
  4319  007E                     btemp	set	126	;btemp
  4320  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Mon Dec 08 15:54:53 2014

            ___bmul@product 0021             _AD7758_SendData 03CF                         _GIE 005F  
                       _CRC 004D                         _RB0 0068                         _RB3 006B  
                       _RA7 0067                         _RX9 0CEE                         _TX9 0CF6  
               _tx_data_num 0075                         _isr 0004                         wreg 0009  
                      l1450 0000                        l1445 0418                        l1462 0000  
                      l1456 0000                        l1465 0000                        l1474 0146  
                      l1476 0185                        l1485 0000                        l1478 01C4  
                      l1479 0000                        l4451 0000                        l4460 0000  
                      l4463 0000                        l2960 0000                        l4448 0000  
                      l2954 0000                        l4474 0000                        l4466 057C  
                      l4468 05B8                        l2957 0501                        l5910 0000  
                      l7271 0000                        l7352 0000                        l5921 0000  
                      ?_isr 0076                        l7349 071C                        l7453 0000  
                      l9640 0000                        l9632 0000                        l9642 0000  
                      l9626 0000                        l9644 0000                        l9652 05BF  
                      l9628 0000                        l9646 05D9                        l9638 05CD  
                      l9648 0000                        _BRGH 0CF2                        _CREN 0CEC  
                      _FERR 0CEA                        u1205 03F7                        u1185 04F3  
                      u1285 06FE                        u1485 05A0                        _PEIE 005E  
                      _RCIE 048D                        _RCIF 008D                        _OERR 0CE9  
                      _SCKP 0CFC                        _TMR0 0015                        _SPEN 0CEF  
                      _TRMT 0CF1                        _TXIE 048C                        _TXEN 0CF5  
                      _TXIF 008C                        _SYNC 0CF4                        _WPUB 020D  
                      _main 0384                        fsr0h 0005                        fsr1h 0007  
                      fsr0l 0004                        indf0 0000                        indf1 0001  
                      fsr1l 0006                        btemp 007E      __end_of_AD7758_GetData 034F  
                      start 0089           __end_of_AD7758_CS 0420     __end_of_rs485_send_data 0743  
         ___bmul@multiplier 0022             AD7758_GetData@i 0029                       ??_isr 007B  
                     l11002 0152                       l11020 0000                       l11012 0000  
                     l11004 0000                       l11100 039A                       l11022 0000  
                     l11006 0000                       l11030 0000                       l11102 0000  
                     l10400 0000                       l11016 0191                       l11008 0000  
                     l11040 056F                       l11032 0000                       l10410 0000  
                     l11026 0000                       l11018 0000                       l11034 0000  
                     l11130 05B3                       l11050 0000                       l11106 0000  
                     l10404 0400                       l10420 0000                       l10500 0000  
                     l11028 0000                       l11060 0000                       l11052 0000  
                     l10406 03E9                       l10422 0000                       l10414 0000  
                     l10510 0000                       l10502 0000                       l10430 0000  
                     l11046 0000                       l11038 0000                       l11070 05AE  
                     l11062 0000                       l10408 0403                       l10424 0000  
                     l10416 0000                       l10520 0000                       l10512 0000  
                     l10504 0000                       l10440 0000                       l10432 0000  
                     l10600 0000                       l11072 0000                       l11056 057D  
                     l11080 0000                       l10426 0000                       l10418 0000  
                     l10530 0000                       l10522 0000                       l10514 0000  
                     l10506 0000                       l10450 0000                       l10442 0000  
                     l10602 070F                       l10610 0000                       l11066 05AB  
                     l11082 0000                       l10428 0000                       l10532 0000  
                     l10524 0000                       l10516 0000                       l10508 0000  
                     l10460 0000                       l10452 0000                       l10444 0000  
                     l10436 0000                       l10540 0000                       l10612 0411  
                     l10620 0000                       l10700 0000                       l11092 0393  
                     l11084 0000                       l10390 04E1                       l10534 0000  
                     l10526 0000                       l10518 0000                       l10470 0000  
                     l10462 0000                       l10454 0000                       l10446 0000  
                     l10438 0000                       l10542 0000                       l10550 073D  
                     l10606 0000                       l10630 0000                       l10710 0000  
                     l10702 0000                       l11094 0000                       l11086 0000  
                     l11078 0000                       l10528 0000                       l10480 0000  
                     l10472 0000                       l10464 0000                       l10456 0000  
                     l10448 0000                       l10544 0000                       l10536 0000  
                     l10560 0000                       l10552 0000                       l10616 041A  
                     l10608 0000                       l10624 0000                       l10800 0000  
                     l10720 0000                       l10712 0000                       l10704 0000  
                     l10640 0000                       l11088 038F                       l10394 04E5  
                     l10490 0000                       l10482 0000                       l10474 0000  
                     l10466 0000                       l10458 0000                       l10546 0000  
                     l10538 0000                       l10562 0000                       l10554 0333  
                     l10626 0341                       l10618 0000                       l10634 0000  
                     l10810 0000                       l10802 0000                       l10730 0000  
                     l10722 0000                       l10714 0000                       l10706 0000  
                     l10650 0000                       l10642 0000                       l11098 0000  
                     l10396 0000                       l10492 0000                       l10484 0000  
                     l10476 0000                       l10468 0000                       l10548 0000  
                     l10572 0726                       l10580 0000                       l10636 03D4  
                     l10628 0000                       l10900 0000                       l10820 0000  
                     l10812 0000                       l10804 0000                       l10740 0000  
                     l10732 0000                       l10724 0000                       l10716 0000  
                     l10708 0000                       l10660 0000                       l10652 0000  
                     l10644 0000                       l10398 0000                       l10494 0000  
                     l10486 0000                       l10478 0000                       l10574 0000  
                     l10590 06EC                       l10582 0000                       l10910 0000  
                     l10902 0000                       l10830 0000                       l10822 0000  
                     l10814 0000                       l10806 0000                       l10750 0000  
                     l10742 0000                       l10734 0000                       l10726 0000  
                     l10718 0000                       l10670 0000                       l10662 0000  
                     l10654 0000                       l10646 0000                       l10638 0000  
                     l10496 0000                       l10488 0000                       l10568 0000  
                     l10592 0000                       l10920 0000                       l10912 0000  
                     l10904 0000                       l10840 0000                       l10832 0000  
                     l10824 0000                       l10816 0000                       l10808 0000  
                     l10760 0000                       l10752 0000                       l10744 0000  
                     l10736 0000                       l10728 0000                       l10680 0000  
                     l10672 0000                       l10664 0000                       l10656 0000  
                     l10648 0000                       l10498 0000                       l10922 0000  
                     l10914 0000                       l10906 0000                       l10850 0000  
                     l10842 0000                       l10834 0000                       l10826 0000  
                     l10818 0000                       l10770 0000                       l10762 0000  
                     l10754 0000                       l10746 0000                       l10738 0000  
                     l10690 0000                       l10682 0000                       l10674 0000  
                     l10666 0000                       l10658 0000                       l10930 0000  
                     l10596 0000                       l10916 0000                       l10908 0000  
                     l10860 0000                       l10852 0000                       l10844 0000  
                     l10836 0000                       l10828 0000                       l10780 0000  
                     l10772 0000                       l10764 0000                       l10756 0000  
                     l10748 0000                       l10692 0000                       l10684 0000  
                     l10676 0000                       l10668 0000                       l10940 0000  
                     l10932 0000                       l10924 0000                       l10598 0709  
                     l10918 0000                       l10870 0000                       l10862 0000  
                     l10854 0000                       l10846 0000                       l10838 0000  
                     l10790 0000                       l10782 0000                       l10774 0000  
                     l10766 0000                       l10758 0000                       l10694 0000  
                     l10686 0000                       l10678 0000                       l10942 0000  
                     l10934 0000                       l10926 0000                       l10950 0000  
                     l10880 0000                       l10872 0000                       l10864 0000  
                     l10856 0000                       l10848 0000                       l10792 0000  
                     l10784 0000                       l10776 0000                       l10768 0000  
                     l10696 0000                       l10688 0000                       l10944 0000  
                     l10936 0000                       l10928 0000                       l10960 0000  
                     l10952 0000                       l10890 0000                       l10882 0000  
                     l10874 0000                       l10866 0000                       l10858 0000  
                     l10794 0000                       l10786 0000                       l10778 0000  
                     l10698 0000                       l10946 0000                       l10938 0000  
                     l10970 0000                       l10954 0000                       l10962 00BE  
                     l10892 0000                       l10884 0000                       l10876 0000  
                     l10868 0000                       l10796 0000                       l10788 0000  
                     l10980 0100                       l10972 00E0                       l10956 0000  
                     l10948 0000                       l10894 0000                       l10886 0000  
                     l10878 0000                       l10798 0000                       l10990 0000  
                     l10966 0000                       l10982 0107                       l10958 0000  
                     l10896 0000                       l10888 0000                       l10992 0000  
                     l10984 0000                       l10976 0000                       l10968 0000  
                     l10898 0000                       l10994 0000                       l10978 0000  
                     l10988 0113                       l10998 0000                       ?_main 0076  
           _tx_timeout_flag 03E3                       _BRG16 0CFB             __end_of___lldiv 0718  
           __end_of___lwmod 1000                       _RCREG 0199                       _TMR1H 0017  
                     _TMR1L 0016                       _PORTA 000C                       u87_25 0FF1  
                     _TXREG 019A                       _Delay 04E1         ___lmul@multiplicand 0024  
             _tx_data_index 0074        Delay@delay_count_max 0020            __end_of_SPI_Init 0430  
            __pbitbssCOMMON 03E0                       wtemp0 007E             ?_AD7758_GetData 0026  
              ?_modbus_main 0076                ?_modbus_init 0076                __end_of_main 03A8  
   __end_of_AD7758_SendData 03E1                  _Initialize 04FD                      ??_main 0047  
                    ?_Delay 0020            sendHAHA@cal_temp 003F                      _ADCON1 009E  
    __size_of_ModbusCalcCRC 0025                      _ANSELA 018C                      _ANSELB 018D  
                    _HFIOFR 04D4               ??_AD7758_init 002A                      i1l2981 0085  
                    i1l2965 001A                      i1l2974 005B                      i1l2976 0059  
                    i1l7297 0000                      i1l9600 0074                      i1l9700 0000  
                    i1l9604 0000                      i1l9702 0FFB                      i1l9550 0000  
                    i1l9542 0000                      i1l9608 0000                      i1l9562 0000  
                    i1l9546 0013                      i1l9538 0000                      i1l9564 0000  
                    i1l9556 0000                      i1l9590 0000                      i1l9566 0000  
                    i1l9558 0025                      i1l9592 0000                      i1l9584 0000  
                    i1l9594 0000                      i1l9586 0000                      i1l9578 0054  
                    i1l9694 0FEB                      i1l9686 0000                      i1l9598 0000  
                    i1l9698 0FF7            ??_Sample_ADE7758 002A                      _OSCCON 0099  
                    _TMR1GE 00CF                      _TMR0IE 005D                      _TMR0IF 005A  
                    _TMR1IE 0488                      _TMR1IF 0088                      _SPBRGH 019C  
                    _TMR1ON 00C0                      _SPBRGL 019B                      _SSP1IF 008B  
                    _TRISA0 0460                      _TRISA1 0461                      _TRISB0 0468  
                    _TRISA2 0462                      _TRISB1 0469                      _TRISA3 0463  
                    _TRISB2 046A                      _TRISA4 0464                      _TRISB3 046B  
                    _TRISB4 046C                      _TRISA6 0466                      _TRISB5 046D  
                    _TRISA7 0467                      _TRISB6 046E                      _TRISB7 046F  
                    _SSPBUF 0211           Sample_ADE7758@sum 003E            ?_rs485_send_data 0076  
                    ___bmul 0331                      ___lmul 0718                   ??___lldiv 0028  
                 ??___lwmod 007A                ?_spiSendByte 0076            __end_of_sendHAHA 06D9  
                    clrloop 0FD5           _AD7758_check_init 0553             AD7758_init@chip 002A  
        ?_AD7758_check_init 0076               AD7758_CS@chip 0029            AD7758_SendData@i 0029  
               sendHAHA@idx 0035         ??_AD7758_check_init 002A         __end_of_AD7758_init 03CF  
       ___bmul@multiplicand 0020               __end_of_Delay 04FD               _AbnorProcFlag 03E0  
            __pcstackCOMMON 0076               _ModbusCalcCRC 05BB            ?_AD7758_SendData 0026  
               ?_Initialize 0076                   ?_SPI_Init 0076           AD7758_GetData@num 0026  
 __end_of_AD7758_check_init 0575                     ??_Delay 0024                  __pbssBANK0 0047  
                __pbssBANK1 00A0                  __pbssBANK2 0120                  __pmaintext 0384  
            ?_ModbusCalcCRC 0020                     ?___bmul 0020                     ?___lmul 0020  
         sendHAHA@cal_temp1 0037           sendHAHA@cal_temp2 003B           sendHAHA@cal_temp3 0031  
      AD7758_check_init@ret 002A                  __pintentry 0004                   _AD7758_CS 0409  
      __size_of_modbus_main 0046        __size_of_modbus_init 000A              ___lmul@product 0028  
                ??_SPI_Init 0020                 _Sample_flag 03E1                     _SDO1SEL 08EE  
                   _SSP1ADD 0212                     _RXDTSEL 08EF                     _TXCKSEL 08F0  
          ??_AD7758_GetData 0028            modbus@rx_timeout 0052                 _AD7758_init 03A8  
        Sample_ADE7758@chip 0040         __size_of_Initialize 0056                   ?_sendHAHA 0076  
           __size_of___bmul 000C             __size_of___lmul 0025                     ___lldiv 06D9  
                ?_AD7758_CS 0028                     ___lwmod 0FE0                     _address 0051  
      __size_of_spiSendByte 0028                   _T1CONbits 0018                 _ADE7758Data 210E  
              __size_of_isr 0085  __size_of_AD7758_check_init 0022                     _rx_data 0120  
                   _tx_data 00A0        end_of_initialization 0382                     isr@data 007B  
                ??_sendHAHA 002D             ??_ModbusCalcCRC 0023             ___lldiv@divisor 0020  
           ___lldiv@counter 002C                  _rx_timeout 0073                 ??_AD7758_CS 0029  
            __end_of___bmul 033D              __end_of___lmul 073D                ??_Initialize 0020  
  __size_of_rs485_send_data 0006                   _FreqPhase 004F           __size_of_SPI_Init 0010  
       start_initialization 034F          AD7758_GetData@addr 0028          AD7758_GetData@chip 0027  
          Delay@delay_count 0024                 __end_of_isr 0089          __end_of_Initialize 0553  
                  ??___bmul 0021                    ??___lmul 0028     __size_of_Sample_ADE7758 02A5  
                 _gs50msCnt 0070              ModbusCalcCRC@j 0025                 __pbssBIGRAM 210E  
  __size_of_AD7758_SendData 0012                 __pbssCOMMON 0070               __pcstackBANK0 0020  
       spiSendByte@spi_data 0020                ?_AD7758_init 0076           __size_of_sendHAHA 00F9  
             ??_modbus_main 0043               ??_modbus_init 0020                   __ptext521 0575  
                 __ptext530 0718                   __ptext522 0553                   __ptext531 0331  
                 __ptext523 008C                   __ptext540 0FE0                   __ptext532 05BB  
                 __ptext524 03A8                   __ptext541 0000                   __ptext533 073D  
                 __ptext525 05E0                   __ptext534 0430                   __ptext526 03CF  
                 __ptext535 04FD                   __ptext527 033D                   __ptext536 0420  
                 __ptext528 0409                   __ptext537 03E1                   __ptext529 06D9  
                 __ptext538 04E1                    ?___lldiv 0020                    ?___lwmod 0076  
     AD7758_check_init@chip 002B       ModbusCalcCRC@LenFrame 0022              __size_of_Delay 001C  
         ??_rs485_send_data 0020               ??_spiSendByte 0020                    _SPI_Init 0420  
       __end_of_modbus_main 05BB         __end_of_modbus_init 043A           ___lmul@multiplier 0020  
         ??_AD7758_SendData 0028                    _ReadData 0047                    _SendData 004A  
     __end_of_ModbusCalcCRC 05E0     __size_of_AD7758_GetData 0012              _Sample_ADE7758 008C  
          __size_of___lldiv 003F            __size_of___lwmod 0020          spiSendByte@spi_tmp 0025  
       __end_of_spiSendByte 0409               spiSendByte@cc 0021                _SSP1CON1bits 0215  
              _SSP2CON1bits 021D        ModbusCalcCRC@CntByte 0024               __size_of_main 0024  
      __size_of_AD7758_init 0027                    _sendHAHA 05E0                    clear_ram 0FD4  
           _rx_data_counter 0072      __end_of_Sample_ADE7758 0331                 _modbus_main 0575  
               _modbus_init 0430                _SSP2STATbits 021C         modbus_main@CRC_Temp 0043  
                  intlevel1 0000         modbus_main@REG_Temp 0045            ___lwmod@dividend 0078  
          ___lldiv@dividend 0024             ?_Sample_ADE7758 0076         ModbusCalcCRC@bitVal 0023  
               _spiSendByte 03E1             _rs485_send_data 073D                  _OPTION_REG 0095  
          ___lldiv@quotient 0028             ___lwmod@divisor 0076          ModbusCalcCRC@Frame 0020  
        __size_of_AD7758_CS 0017             ___lwmod@counter 007A                  _WDTCONbits 0097  
       AD7758_SendData@addr 0028         AD7758_SendData@chip 0027             AD7758_CS@enable 0028  
              _rx_data_flag 03E2          AD7758_SendData@num 0026              _AD7758_GetData 033D  
